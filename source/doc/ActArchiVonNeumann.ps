%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: ActArchiVonNeumann.dvi
%%CreationDate: Mon Jan 10 11:10:11 2022
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFBX2488 SFRM2074 SFBX1440 SFRM1095 SFBX1095 SFBX1200
%%+ SFSS1095
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o ActArchiVonNeumann.ps
%+ ActArchiVonNeumann.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.01.10:1210
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: SFSS1095
%!FontType1-1.0: SFSS1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecss1095, tcss1095, lass1095, lbss1095, lcss1095, rxss1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Sans Serif) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFSS1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-201 -321 1477 898}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839D875E6595524AE250B4BBCAAF88358
42414E09F7CD675ABDF96AF981110B63C2828AE397AB0AA97C0D36B4316AD714
87FF55BDD36ABB42613BAD3FAE0694C475D86E9E070C777B8A0E30A11C2B2FF9
FC63CFF9DFFA41BE0B97B741567C8D094A56CADF2C0312D7AE73FD1B0A32825A
9D284B11D225DBDBF36B22B7259B2368188D94E48FDE06B9765F0506A3591930
7003FB93745CB604ECF641423E6914B22F4438B899518565AF7FB18ECD248A9A
498B1344691D3A1C3FFC21C48C65A08206F5DAE61C8A5DCFCDC426F0E568F431
092FA359E319B476053EA5F160FABCB987F2B5CB0A3BA1C715596D2AB9947C60
579B980B09DF6E0979FE9608723811E9AE0AFD659308EF2AC9042B9600CBD293
A37F84667E7F3DFEE4CFE9D1A676A5728CAE9FF2FD6AC2E3D46EF000EEE19E10
EAD13C12B347F0C8F656C352CE9E25FD1DB2F1FB9965818541F694C65ADA45EB
805911EC74CECA83AD07803D129189FB1A09532349290F3B994839E260B4F8D7
84169359C4206458E198125D6D90557EAB5F57DF90D3A0322435898FD833873B
18ECAEE64FE29364E8B4204C39EFE2051A24CBEEFE58DA480FD74FD1FD86932A
FC4B969E2A5090480D95036E13BEC4562CE21073D35DE0DEE2C8224EEDF6CE40
9DE86D56344250AD374E336AC4F81F679E8AF6631BC115EBC4A8ED2CEF6FA189
350B53164C8FE661D9AAB92D176F1B4CFB8C60D3A39A8B1E620CA659E44717F0
215AF7A4BA2B8092777F0CFD69EBD2EE17ED9E0287820B33E66C09D06F5D6CDB
FCC261B17A9465BE54D65370EE9E4D5B2FC31B28DAD678A97D3069932D257762
B73AA6817481993F4132309D250E53D3B020D7CC6C7B31CC1E54E84334A238AF
BA70922690A31E054C5DDFC10CF0BF7ACE875119C1E6A6FCC1F86A9732400EDA
D7906328F7CBBF38C5CC13AB146F8E9FB7272BEB16469390F3158D7F16A56370
5D4D9324C5DCA1C55DDDF1E423A158CCAA96429D4882427C89D92D3D953BD701
29208909B1597C8425502C35A000BC86351B1B497A5239C96B4C2AB3CA80BF78
7FBAA3043842D5E8D49E074247A41AEB55EC17EBF96D1736C0A85B7D1097BB1B
B95D3A5D180673DD87158514BBEB9A7A3B96C0E247CC0DD8F62E8F118E5F41EE
34BC1BC68E436B3B064254A40153E00416E1AE6896C7ADE22455C0F2FA693224
FB4F4BF9DFDB4973AFB980EADE1ED77401E2BF7299500D3B081083932001FF46
7E877B3A477B4BDAFE4D834FCFFD11FD8DA623BFBD5571921F38B8720429318B
32152E0A1BFABCCACAADDF85734B3437CF9662EE86C30D09AF3ABDAEA0DB0F0E
0717B9F2BF304D1CB300BD1EB9BCCA5FF9D0E0CD879B9C6CAC914FBEFFF1410A
E9D1F228951E0569217C6B088F841B14AC51A6B584E6F9405AEEA82D1226ECAF
D4E9ADA1387512E9895C1D35C4E409626DD6A89CE01362BBE24D518803661A47
260958BE65CA6103A42F49EF2178C47569F36AE18F8C86E5F61619D15CCEC637
AE16BC8D6EE13773BF63650DE7CD1F78CF8B566551A6F3DF1347D7E9B5F0A881
EC5D3588BB8FC5E9D837838BB877721A6B3BD63DE90FD71BE4BBC60B0C1C0159
089A26BD3726DBB3CBD79300BF8BCB3B1F5310F7C8C0EC1803587874D9515CB3
C0F1B44A1151E2CE074C29FE0F7D2F5DAACAE3173C865CAFE512F96A32A8F935
0EB34E79BE368D7F900DD0B7C98AB5A32A2950D061EDBC66BB0F21D85BD349EA
26248081FF6E74A6E930CD3A82DA5BACD79AC7D43D95ADD2134B93BC6265F469
E3A118ED153CF2CAED5DCC464A70BAFCDBCF8D889D0541888F6EB13DF5BD4F90
4F010A48EC241A2E4888E6B24CDCC5AD670ED461E740FA88DB657E173A4BD95F
159BAF2503A3671F3A99F3FE8713F3D5CE20C34540AFE1464FC34CD5DC430436
E9C815EA54E08AF1B24512AFF4C02B740DAE78B9D00EA80BA15DD2C3B1A0B20A
AC509A8068828C287F002DA1ED1DEC7852C62341D5A1054969FC64AD4890878C
5B7272BBAC052521FC6B0B74B4ECF02B79BF1076B1C64D9DF0C85F1C8B37C5E9
8DFA8DEF6706FF9AA8252B63FA9CB7FE20C6A6C652186D6533E7F90DBE639D93
9C419BCC6182DF2D01C27A7B2C00372EDC99A4654DA95F00321A9127806AEB34
7131EED784AF774EC0F15F12DA07E391480C1A150213ABBC65C2CF1E731A2F7C
BA7119D244B8B40B97E30A6B2860BA5973A19EB312118BF8F68171E1B86987E1
F0833CEE45979BA427CFD2404196B14A69F6A5CE259112102F6B613E026FE4CF
05059505C8D1E6EA981A003730F15B790D08E28822E734783A236ECDEF1A0FB2
B6C0E4DB2807334A5A10F32B3053445B68687E62AB58DB17A2C25D76CD888EBB
407E92769952925816E2C9B544530F8736ACE9515013E4AB7C30F730DF83CB01
7D091F21FF313C67A2086E74D33E8E726ECB9FE90A905502933169AB01EC23F8
30D63E1FF9624DF9E0018D7379D438A96EAD018CB12244C32F1A9B23B06E0893
AB418AF962394554A223733BCB796D35D807C81395F39D9E92AD19948F0086E6
2D23D91867BD2122344B0B782A82FBDCF64CAE5B120F1635A0715F79531E5D9E
D92669BA10A8E42FEE81784A16F8F33E50BB66F44593DF879C09E1D95EEB271B
48E1BE9F377BE69354EEAB331C85FAB4AAFAD875F8B1D7AA91DED88F3D182E82
03F9EC0B69DC22B8C1493AE1F9780474A2DD0922392F1BD901D20682F5EA2ABB
F35708D4232C6789AB84B3382D3A886F004E48A987EE70979B59B32314533E36
3ABCCAF25D9965C7DC3EF3911D24CCB008CA1FD50BB9E679ABB05FE6E0A90E17
46BF72A2D1D83AD070876A9F5181CD4899A040FE5F6D3690E556C0F2A46A4423
3CDF16A935049BF0E894BA49A64CF9BBE2AF068B2AB05CE37DC38C36ABDF19DD
5DD945D5FC78AE8F62D086A0A8C6A2A18E9F8D9A7BE19A5C5A2F539B4268F981
C1827F7C5F36F10AC989FA0C04DFE7B258B4C8EADA678CE9A87518541EDCF3C5
2FA3A54558F298E383ECC43B4C28AE2E02660432E97BB6887C112CDF4C8E0ACB
12D8B2740B7E461DEF5078834FD21AB12F5C150CE841FF305ABE6BA35E89C5F1
411BF492640EEB1DFBE8CEAD30E145D9210C81E706C76BAF37E871AB59E7C1D7
904770BFEB00068298AB8495E9A86EB2E86A546E5645B7B36653712BD7B63A11
85D4A61BC0EFC8B74A2740106141EEB98A2684656F5690DE18A477F2DAD44172
565012B6D2BEDFFE88F8BCC7AD4E66F571216E7B725F791C1E935E6B18751C24
EC1C89605A3C8388D80DDCB95422DC7897E3FD01E8AC2F43FC720934FC0692B4
3427D4B8A3BFC25725A0878248F0E0C8B59F9895ECDDED4420BDA71C0994A19E
ADDDD7E10A9FB1D67AF96633EB1DE8BCBFE2D67F9DA4FF113206B30ED67F597E
F4F02839CBAD9485831F3ACCA2F24B71243CECD91DC5AE4E7E75230118184E6D
041C4923547F495A14AC9439431265F2D5E1C843F00D43F849713BF6086F5C5A
5EB784AD24244BE76CC1454773099461E95A722896208CF85A5CCFDD69CD1471
5F6344D9A9FF3BB3987F7475D676ACAF42D65392040413A400E4E30A8B4B5267
4473930C558AAAC440BD7E5EAA1D903FB139C9112008A4F2447FB544C3DF17E4
F25430540C68316CF9BE9B548A1D0CE72227D51048E492AFD20270E12D1DEEDA
E0D53E96F2F65E5F4D6C84EC5E8081AAA523C72A6794AC418EE3DEC8A2A54ACA
39B50D8F4EEC268A83FA5D8F1305B33DF6442669E8524B46CC26320965DCFDC1
DF6E431D2AE325298CF2F7AF0E606A892A549D9872F089F84665E59011842BEB
197375BA402619D48010FB0BB9BFBFBB1AEE5185ADC53165413E1ADFA936B3C2
738EE521A993F0661E8255BE8B827396EE98C9109653441E0A664D2285164FDD
5D2F4E7C32FC559FC3923AEA99C782E13FE0391CD4459CCE3D3D75DB1F5D1EF8
5CE70A69AD4FEE2297E17679FFFF5918EE51E256FE158095475DAA88183FD9E2
B023F5A70C34F6B63A85294E3324F8A44CC62DDB012760AAAEC5DC1577259653
C198D56DCD3BF852A657BBA19626F2B09230531080E012F96A32A8F9350EB34E
79BE368D7AADBEC92B1DD1C96A089DA275941C1189A6179194F880FE7684E763
AEC3FF18E73E7BAD08EF30C49374364AF286DB39F36AC8B0FDA199C610D5739B
ED2629572529A19B0AAAAC93658B0EC289A0FF64E651A689822CED7D21C567CC
64BE1A36DF67226E73CA9E1D677E31C85732908291B1EEE859A2E5B5677C8B44
52EA785ADB0F611333DBA8FDA88361A7F0E8E738432BAC9F15C4556EA6788408
D050DE539213F78438F7C5A6B6186E9A5FDC962A659486658FF3386732F01C83
6B5831A85897433762602790B6C713679C23BC56BD94EE5A644B9396F3405079
A9EFE15B9E3FE39167F836909824421ED6047AF3ADB8060E038C0F3452D77B2D
AA62C67E2280D582E20060DE7924E3C1B352595ED321781272D98FE42E409207
535C12F48EE43CED7D8926CA04E78EC65BCDED3DF176062653F3433F2D3D6443
D6DBF4C0C7733A6C45BBBBE8999D9FA5A6C956FB2938A9F7692CE203C2646CE8
837EEE36EA9D19FABD50B3D4B3194304CC6889F09E2B9CC8A0E126AACEA5F62A
9C56C5260F3A0DEB415DB6D05086927FA68A4CB2CD32AE61FE9546C44F9B6D4F
8CC822BF9585C90FDFF6429109D12C9BB96A4230D90CD8C2B61F6DF42411B6E0
37735F2B747463662FC13F9424B8B7EDCEC3342183A2F86BCA507EF983AB01D8
D64C385E1BB08E3BBF359E31BBF79938BA67102CFFBAEB7119D4D604CC41306B
59F11FF3C1BE7DD6D130248E8235BA1EEC1B49E558EEC2E439CC79BD97542804
77F7C98281CEA6EFF603B57D1BA77297F8A64D1C43A5327E5A1A7EC64A5C1353
1E151E1300915BF751517FED084B76C9BB8BEF6EFE726C5086852811471AF79E
694CAA2DC543CE420F5F78DA8891AE7B902A0230BD29E56475334A16E042B26C
218BCB42366A781D86A0C3D19F2FFE2721B88C11EF4365478D26C2CF0630C5E6
6E1A4AB41267440AA78A41E4BDF286B938BB29CE3937CC35C3715CFF2AC385FB
1B9C98193343C0745B99FF2A8AAF44802C67A265AAFD9EDEF4D15C31ED493C93
BEFF6B0A00ECC14BCA53DDA2F5CE9E6EBFBFB344571BF1BC71D6B7F08375014D
057B7E000715FA3C39C7618D71156798E31BC1703C62231AD1CA9312DE759781
96223BBFFC975F17F4FDB573A92CA29F968D3585E464D063FBFCF9C2C08D9A1E
33FB4633FEB5632CCFA0B979B8E65813CCFE11CD425654B6DC4AFB60429553B1
5E7B0A9BD7D3644865C74FAD07DF7560C6316B5F26BF0BBCAC3F3FE08B8C7399
F0EEB265FB97F33B3BA20B8F5B23D9BCA52770E18B4037035D2268C5F9188109
E20731586BCE39449DF4A65AC6FE929856BCC95C34A938FD6A58590CA82A69A6
37ACADE2F81F30D22401FD0399A0162239AFC82735A1CF4D1CE19E46C61A09C8
C1E6671BAC2A82941B8E1BD69CF349EFB3457A7AF4AF41F310921ADEA87C0F32
3DDB680658A3230D245348785C7C06D6F28C66892F19AC18C5BFB03128E6961B
63F20DA5DC20877D78FA32A7CF62CD4DD8B065A8123A75C4AAC2EEEC3D618292
065F2FA5D501EBBF3173922F119C0DA609DCF57EF4F53544B9ADA93C4C8F6383
235BC408C517DBE8B28573D662A7F38091028DBA6CDEA87DE528E712901AD838
AF2D840055E57D34FB1ED191D7C21FDDCF7EB8ABFBE3C73B5C52E30AFCAFE929
B2394A83918676938A59489176337278B486941A68218C9BF2E6F512316C234E
362A91FBF0EA632C8B1DBDDFFFE4C908926830B3EA86F56837A47BA1457BDA9A
3A416DE5415B11689B94EDC855B8A6E0060F15BB41CC4E375B49690A8DA9F371
EF5C7B996940D7D94D5789728ACC20312F9DCD56E73572CA7C2A29926414161A
2BBBBDCB98E7B2B53B18DF7A1A764F3E0B5A4155BC07E1428551A238FAF5485E
782356A94820B642421543DC7755BC41EB939EE4A36676CC7F3DC004D6F4C4CD
76848696717178E8D6455EBF5FF93644E94237BAABC36F78B9C790C18AFCB596
8AA5CDA90237E25D1EDD0C054762580CF959106002308AA24EE006185F4F9A85
088E4517EDDA0A787E6F0A17483480EEDD6B992F7EDAB772FA7A21F505890C93
32F91BBB1929BED27D44D8941A967740068DC5A17137EC1024559A82D7EBBA2E
487DF99A317941E18CA27973FF22A0D0A0D44BCC83B647E54B05D3357D4A893A
5AEEF017AACE7FC6709615E895889F1E8CA141D2EC84A4E11E21FA83DAE09E0F
7829AD50440E1D9ECE88B51E4B97DB4EDD2073883B515D449C3B2F07027ED594
D5FF033724D768A318AE3DF1743A172DC778B71F64D0CF7EB7086200E77BEB9D
615DB1A4373E7163846101D488296CE28432B97C5F79B80DA18EDD13DC4C3F83
5847DD15E1B868EF5C8FD2B2B21D3166F0EAFFEE039CDB82089486501261E93D
2B513D0547FD775350438283FA5D8F1305B33DF6442669E852483AB8D27FD212
2F7814651F22228A26B036B6C3A2496B5ED750549C0238926AF3577536B0F1C1
5961D374DE25A7B0EDE87EF9D985D4567DB2F14A00DF57CFBB012A4BB5108239
9C53D4E210C6DF4CE0439AD51CA05E36001FB918DCD76A7C764CC16FEA1B452A
C91D4C8D4CC320E9DD919C38730BEA3911C24EEF8E6265DBE574300079E65214
FF67C2BFD57E50F1B35D494FC3D6B57700B115E9B7C3E928F8E398CC63106B5E
ECC114ABAC001F095275D4E9C6C475E9975FE2FC27BCECA137AF0C4F7D66379B
E72400BE1E7F457C35AE49BB242B553D6971972FD93DBB58142EEF8AF7079DE7
6B3603AD99788F266F745B776F332E191B58F0D8A43E34700E62CFF2074DAF62
67582C232B45DFA048B9E4E6E1F6E66C10438F67C2052F37A3183BD1D06C6A6B
9621F5E3C55757BAC2F85E60CFBF850E70A1C76CE2FE16746FA3102EAEE68A13
1E92340E5E527FC26FD89FEAC611AC35459608940E7BA8A5223A9170C4823216
F1E67442EB561D4C1DC4EE507F79A3AC7D987786BFD7B94D1F6219E70C5AA468
77C47AA1E558070F622A757B97828A9661A3FDBD4099C4D68614A975A31D3BAC
ECE30D0FD7A1303B5723801EF0D7E87C3023794A80045AE55D2C4D4F12B5B875
8C87D68C611EC93E2AEAEF83ACC988D73B4C616970151258814D9E3AC26BC06B
E808E4078768C800417B25E759651995BE070A1FBF490CC7D62A7893637369C7
729F5A4CBAD8D78B04AA7BE0E98166B20E4586850D1CAD55D9D87B40B273BDD7
687E8E378C2C244650686C17868BA29378369568AB99EEF1B534EA1404A0BE1B
66A836E6020C8EBFBF39E02C4419F309BAC5725EFB60A0B46592AE731096D2D7
4FC27BA16562A7202BEF1FB6302D4E9FF62781384DD5C0256CAD073EBCBB4385
1885BED03498ADFDF01B1935328249AD994E3B146EDFB62C0A61382E8052B810
41806E843E81025E3415FF7F9745A93A475EBE0886CE628F00BEBE27B55D753E
E604A02839BD198CFB7607B6B044160CBE8D4CFF0C1B5EB06A95E0B419610741
A413A1873C050F7DE0E73CAD5C2CB0FFC129F4BF340933296CD6967B5937F585
BF8D1F0A66805BE39291279BD3E049880254A4EC5151E7249E7063AD54B9DE2D
281B47FD020938E02C1B4186CB35073DEC6A7BF147D25B03A44356BE341DAE3A
117EC4A62DD9DB8278A0A91235BEC31B4220CA2E449BC2817B1F5B4DE4D26C33
47680FAD8B578F03A96456E1317E78DE2D846FC72703D168E5BF020275B4CA69
FE1E7F2B8F8E0F36544D944FF479DCB6D9317AFD49DBC0317AFFD85FA1A1CF89
880E909C725EC4C91E5FBE1D6E4A85FA54671101E1DBD900A74CBE104E972C51
81D183C1F15EF1BD0FE92872E353FA851430CBB4E9E8B7D7FA8E2371457A43FE
9C2919E4AAC78A68A02E80B81B1AD5B4E0CB0422722F454D74679E9C6D454C81
0F647398EE737C7586D8612B8C468B7270922AE36708430DF9C4266788E2DEC9
3FDCF70BC0C43B5D483264AD5DAD23ACA4124555E2ED1AC4C04AFC4BD079834D
240AF7F9BD3EDCDF2743C5BC37371B46B2413F002E5CEDD40DCDF3377C80864F
C37E1ABDD58D0BF85308D7370CD9B17F2F4397976A72E90E3B9DD96EAE3866A1
1D3B02B8853A3ECC9A2615723FD0DCFE8EC07330174190FC19948EF5E63B659F
4A9DD1F2C09E3A49797EC537E26CD5DDC0CD28A524411FB7E693390FCB59B9EC
2A3086A46DFE514E21DEF08811C66BD2DDD7BF3AEE0E5810424AEA349A8030F0
2F3841FEA4DAFC86A4B077C90186F11C5AEDEA68110587D374A29818882E960E
1B92E51238768CB358AA01A76ABD30C01AB94B03C8D4E1402C92440BC0688875
9E6D45A788E11B1E40164ECE1C14AB6EC776D9482C87101766E8D549413C84A6
125A4AE2D89D3D16BF99DB6BDD441DAF53E11878EA08C7B96C07D691BC7D0520
22E889CBDB888C84AC7CF2D4C3458D531CF07FE6D0C9ABC3F493E36C79E6EA75
615C1BC2FBBA51638B64DC5CFE63F10DB5D1C751DBA878BF941F1F76453B2577
F5C2D65DF79D058B4C5C980841756631A3277D35BCC1B3068C76E4521EF63ACA
16D798DFF53D9EA9740DB0311AF7E9763C7D2FD21DB87FDE275DE7CA94EB975E
2E4919A90076E7EBE9BEA00860984DBEBED277B49B8B609A6DE0B582C3159DBA
A8D8D555951736F15529FD6868316364B9FC0C8133A84721D9FACE48AF904C2B
7577E912647E74A2438097E9BAE9CE248E219BB6252D4F20BE1AA27D01F8073C
8922C7982AE9B8EBC8C27110D472D8E403D916A7D13AE20C8CB226F1BD3C717E
94D578C92DECB90FCAA8C4DFF3B427F0EE8B28304D089766888A5254BD7D6EF4
3F732E676EB53DEA1B1DFDA3ECF14ACA088B9EB2BEE2894F57603B77A67E7B99
F1C74E16227C7361585F2F83AE4A2886F5EA27B246DBA54676F40D5F8D550F8A
CC4BE179FBF5F53B26F66105B03904D3E851A0670C04F448B0943E65689FAEF8
08522BEC54D92F7BDE343C7FCBD09A5F60F7F1D3AC6CE33DC14A52EEC779530D
117942A15FD76C91BDFEDD155C61A409DC4D782A37A121F9E00905A972A8DBA1
5E1BA65506192B150D5DA2B5A7B92E13683D98235118938FCE5E28A724CE52B4
E91489E480E1BE8433E0196AF39C96BE18683BC8896FE4E7CC7C7BA7C72F80DA
E2C1E7E7E025955D495FEEE134E83ACF044DAEE19B30A856C573291E6E542697
B5C12A395D7A98F43D3A8B67E6AE0A967738A0DC7551BDEB6830166E3EDBD897
C69024690EC9A5EDB254704F9165B1EF164A6AB0804B0A31A2F6186DE6E376A6
3E8B034C198088D8C3446E158464898EE9F834013D3EF6CC0793AAE899173E6A
E916B06CE1BE9EF1768967EF8295F44F79BFB78626CF2119BF5CE7050BE209E7
3C0EF588E021F02439CDE7460AAD73EC6D14F3764154D2793F64762EBE15DCEE
D3990B01017263FDCC74504C59FD29BC23FBFA90823BB001800F6DC017D667BB
9A681A62EAFCA393AB83BA35BE97472148DAB4601462D5E4C2CF8C6A21FA841F
4D27BD543CD05F1762444C54FC6B098A6974BF3AEB51A8E78261DD9D38DFC8B4
7BE5D07BFA428551BE5416FE8C790720B183025F00B5953133A589C0DD6CAEB8
C0640F4235A2606102198ED89B9258E72C385025F212E1710291DB9F56450208
CB669E8C31DE7653F25E6F63591BFE0EA1D14F753AF8538AAB6D00DE1FB58368
D34E59319D406FB4400BD5EE65D4B761A85276F5EB5D61295B186E78B8468F84
AAADECE468ED9781B2BC6B76017DC0F0D9EC3D13010CC95021DF41F48E4DB2C8
916EE599477DE1D216000779F71F3381F4611CF7C5647AB10FE585D3D630AF8E
28697C87168D30F13243A7FF1D4A950E1CEE24BF5423C063C6D4AED06B218CA9
37CA21BB9E9D6C30493BB6664A732A0B37230FB5C3F19FE9DA13FB2CC90D81CD
CD4E10C85C9B3548EFC75EFC82C6BA5EBA233749BA198BCF013EEDB71FEE2102
A200905690647D0A15652AC07EBC1B53C7F0081891D9618BF26499C7B59135AC
5E1668E3A847DA81B2DB7C9E5130E32CFE4485804410E80C4D39B2522AEABCBE
86FF9A310B7CD1DAE5E116D8AF12B79FB86520C85C34E30AEA67D36FFE3BA20E
145A4144DDDB28174E9FD7F8B455981021043833A23CA8E66DCC272F73C74767
66E76E962CA489F9ED94F85854DDA42E6B8B67ACCBE7FFA914264DBC8D00DDE8
38D3692E211C9778936E24E231910EADBB680527BFA7CDD08F0EECC32E6468C7
F8E3B581E752D01202F6211E3F54A29B3B8C0C591774EC7D314758D097E2FB91
18BC5C01A1D517B5F55F230534AC7E87D3988F13F01352394201680730BFCF36
6ED6D2DFF62E14259CCF1BF1A8CFE4B5918C40137AC1E37825230ABC644CD10E
3D8AB0A30CD35E0C0FC886C4219B703D608E2295A2544AB9777614D7E427553D
E76BFE524F0D4B7C716E44A3E3201307EC9ED1061398914C9E48394CC8C14483
5367045D5B2DB752318D88D489750CFD8B25195FD89007BC12BD872F1B03934B
277D4B0565A2773AADCB2C251B26DF2E07F267E3F6EBA0D03434A57702033514
7732C708AF2AF67AB65E0D110B30EBC6DD893BDEB607E41563B18C4C0476AB8D
8E11A3C160240845DC6D0541FC2A7BB583203C03560DA1F39705F884CE8CCD8E
ECD7D91EB5E4B58430B576A46CF8364171B25E4546CFE8EE09006D5160ADF2EB
46A3FABDDE743E52189FB307D8D9BDF2DA7E6F917D2C443FC4610E019F6F1182
59D5BFC0BA4711BE4AD41807EBA34523F0395D81E5F7B880BFCED1AFCA4F648D
D41F477430CE9DBC76D609AB0BAD535FCA6E465CCA3645C35A1FE075145364F5
B3953C0C24EA10D23B6E6AD39AE32141A78C98099955FD3613589A01FF2A6D93
CCA8C38701133BBC16EC3278870F32554FB2F3E31284B68EEBFDD444127E1C11
8ECFD461D9C2D835AED04464E556F1C361B7836AEE88CC9C814C97C889BE7118
32ECE8F6ADDDE18EFCFBF12D3ADA0B3ABF1DFBB52C7C65E802E0CFDE393D28C9
00351DE06F698A046C425F9C87DFECD5B959A01F43424C8F6D78AD5B0E8CDC28
DA71FAB84055A6A7D02B746674BFA8E608E497897339EE3FE29D2930CF6D91E5
91548AB57E2C873165F5615EA23DE8DD72FCC7D5FE26E8E80B2C79AFBD6D50C3
6B4F9FEB11438CAF265C3ACEA518D4A88539B70D44776D1E0E7008B5816B8B7A
E37FC907D502A53DB3207F4C1F483A79AAC68EF668BA89BD2F8613372D903D6A
F23FF3588B4866A48D15AE8CC788B282BF1E61834B332E19F7DBF482D237AA62
53320EF27C29431F96D3F1D056F132D7E43199D8E2AD2824E9CA724B5AD78519
BA464EA0696C1D1DC45E9C2EA2BD16AAE0CA9931BC0EAFF7E1650F02CE7F2044
09F01622B182C43EED99687D4216C19C1D4117B28B3D5A48449D2059B25770E5
5D9FCF147D2B536E8264E0030F1E320F3CEFACDA4673681867B3324761895525
CF259FB9BF3147A3DE7F80CCEB24AE7D60756AC71E6408D834F50F326583CD7A
3BE652C28BCAD6020B17C7283D0C9A5AF9C62A29147F5CDF11954EB951DA418C
FAC76A7B2488F363EFDC0780DE103D63EE333BE5068CD5144F1D615FEAAE99B1
6AC6BFE35822D9F2E60CE2DEE46372A9DCCCB019ED928A2D32D3D23FC1B7A81D
C66464B9BC4E3588379B0E0E5F44EAFAE113E5B42E63987609E3636D92FC92A5
3A32D203C8666FF382E9C21997278F068DF059063AC4936A105FEEEFC371220C
1482A79A14CA532CC678E9AE6B802FCE0BE62C1213EFB1CBE7DD8D99F9B63819
0AB22D3656B93F0C31B664F8D7D7DF615648E05500FCC17554325CD733E9E4C3
C158D48A1860CB160B2855864889D4CCEAE85574F9CF14108F28D71D36097FA9
0FBBE6669A9E666B366A77D6827B43A526ACF7304C4237AD90F029F63CF8F293
328398C8572F3C10FB199AD9CD3C66A4FBE25829AFAABBC57D918371C610D8B4
1D436C9446A2CC484025A0D444422C97B7BBB780B5AFCDC13962B1DA946DDF09
2FE0B7D0E668CB5C3C652F7299E77563200F10CAC43070852712BD368FE20B43
B3A1B09D980C004AB1694B43CEC4564DDE824988EF6BE40F219FEBEEE9BC68F2
05CB32B3854519AD3F71AB345580FDE5468B829B59C67113386F04366A7BA81B
DC7C965BE25A766B8A77562724EB7A8FF543A627B5A4713E1D16787FEE767047
3BD0BB045E4E04E622DFFC9026903996461BF03AD22485A907087DDEC7F9A361
E6AC7A132A2BA8169489B27D219A1D8F1C3A3084538BC6DB9D3160C10B4086A6
768AC7234D46EC1B3CCAD70B6AA389D28145118FAC6A319F47EB567F55371475
701678AE551E462D142E82CF2647343131BBEB8C33DE3E04BA92C4F0E38B3FD9
4EA195BAA305D9E460C7C1489018A983BD197A47ED865C1BBF0C0B6C6841D2EF
0A081DC3BF8B95E3FA91D84EBB92361E48C3989AAB449C39C53D28E0D92178E5
FABB97CE14E087F0FEBB476A7A4C127E216E1D8404BA793EF5B9B50834D45636
3E3CB1B4933101C1760D614CEF7B73EC85915D99A8EE1B7633BA939A4F10E9BB
ED0C53E2CA5F36D87D5414727F428A07049B686D2395A8456193A8BFD4EADAB9
A8DAEB2A6D79CDA563BB77035DFDEE0C0BDAEE6BEEAD66C57510ED1B5C8C1DCC
3467E871172C0D763EF37005640CBC09EC1370082A178ACD0F1C20902E451D2D
3BEFD67B7D3649CCC184CE435B98BD47506FB1D71F58EC400D87B4D1D47FA443
2237A436D9F0F3C42279F3FFF1B02DD54C4E6AE26694769ABB58D3F7EAF5158E
8C723A72258C34AD32477B369F0FA7B83391D2412ECBCD20E104AF17357D712F
032BAD174C54026DAC0E27F494FAAEF0CF5C8D42BF6CA657A3C6FE90EFAA2036
4EA9B87C565A17DA8E97061F17D8E98D5F8417F663BD4E1E8B4F4B4FBCB411DE
D0150B6DE4472FDE5B541C94F20B26BCB4E9624A45CF0662D55EC41BC40781DF
E40936D77E3B5F350D165B66DDE7B764321249DC46F1B771A7C0A9D99E484BC7
BB8A39A222FFB88D3827DE68583FC2E4235DAD5BCB0A89E55EF69F4FF91C7792
A21C5107F05D8DDEEBFC0A9AE799EFEFA1C9BD86A0F906C1EFA646E878C940FA
D0A880505D8E6DF0F355B310A12832161D90042F00D67991DFD9A6A4BC247446
95E222D00B85C8F25E748C60420F6E1BCCF724A55A9D02AF67AF1F3AEE8CB77F
D83A108E8021180A418E021369DCCFDAF3B4E4943028C7B5E1F1447E732B9B74
E2FFAF2015A64662DF0851A3A83015117A5228E3C39AA0A74A181558E998B19F
84BB38AED22E9314BA9BAC6DC91633067A941E88E835B42FF41938FB0CD8B0E8
58577900924D95C7FF8392C4DFF371F7500C4E7F6B9977594173ABC878072F5F
16305DEF448165ADD8B18EDE9FF3F45D9E67A1AD6F2E0B1886039D3FE9F47F8B
5BE48C244584F642524C49FFB00A13E3E1B3F7CC5FAF3FBB48E341C2209A006B
6A93C3F7AE1797700A8F9FFB0323C1FCAD491B0178444C35E1BE48D2D90129F4
0BFE685DE8750DB21D60A39318FBCE7C2B75A1CCA69B051CBA2FDEA18105A58C
AF8E0DA054C2F19A39936625FAACDA788CC807B40EDF680A4297883EAA97ED5D
C2629950AA9A4925C0A826F8FF609ADB5D03BC8323CC774170D5B55FF04C8663
C397CDB1D98C86BD3833CE8152274EBD0491DD79CAA00EF891CC9A3910BE139F
97856A7A0A818BAEC4DEEC88E6DCA2E3F898C8E61791AC21495F60F1A95C9DC1
AE68520E6F3731C31E25CC9D80BBA03E9520234AAD3821BD10BA318F33B51DDE
F5B00DBE99D7B989FF4BE7FD4FF920A6CB68D73E50A4219C9253FFE1FEDF7529
D27DA259C302CF712682269C9002171DFACE4BCC56E8E3432577626F9C22F959
C8C1F163986A7DC468A629D74F8E0F03858EF81B4B97144C05814ECE17F64DBD
59276CA5B0B2D66F89C175D495691429E0651932A84F6E7B7D0A5C1B0BBE0D03
359E3237066948529A2E14BE48F3B473309C92B517FA49753E3D154C2879D3A2
99E2337A1382E0BAF54A4A434DBABBF35084F91BC01FAC834B3CAF0FC3268BF2
ED37A1C7564B49D9B8E48D7160F8698F9F949062EEDF3B788C2CFB61063BF6CD
10E2092AEE1103E14404448880D1D54B5AF792C3EFE99D1D76706E8C0B375498
B52DEC0555346DC7449ECAF0E84374F27572AA8BB62EB69F0E30B0C00E46C148
1A41D7BFDD0F1C579CF52CC8E7F0390712B063CCFBC1225E5901010FA1DE7B36
038587F1E91C237FF586CEC844409C8D8217B9C22A1D444BC41F3777400AB4C4
5220BCD845FB84409D4D03B2D5079BFFA21ACC665F57BFCD275653A70C328933
788E2FF098F5F23A0741EE8F58C1DDD3A3ACB760680E1154CC30CC0204D96491
B48212DC5355BD50919E6BD9540EB41BEBC461F89C6B289C99D42A4A8571753F
9BDA4046569CAB36454A832D8A76473EF346FD19300F53D087CB5F878106B62B
9979CB132E859452EBB6B676FD35D53C8E50313A7D87569BB549EC11AE954520
40FAF7D6883809EE7F49918161F30428C405FABEBF82611664A36B3B4485480D
0EAF1330CC4134574BE0A4B80316BFA9EFA24ACC6674C663E0B31AC8FD73D494
FA81A243C97BBB2E7DA16A8E22959CA6C445E6D68CC0DB91FFC3F775C2690A8A
66EE0AB0C2E2EB7D807C42CBD4E9C0558FC5AB70AC7606391C86786C9BAD624E
F85227B7A2C4A3C5B2B21BDFB05F89C3B55F53F1B164925418E29E26EF14FCB2
797998F674324E979151269DFC1E3B98CA78B709F7E7228374A69C94750A1ABB
FBA01A8E9D26ACE2F3B18E4E18BE2E330E26B02064818537DE5DE7341B5A9DBE
6C94D286DAF0850F33DE37932F963A4C77AE01AFFC3CADDCC3714C5C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1200
%!FontType1-1.0: SFBX1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1200, tcbx1200, labx1200, lbbx1200, lcbx1200, rxbx1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-223 -316 1694 925}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EDDDF3B8AD19
A05A98215C1A2AF1E98BA6D25E3EE92459564B169EE8915C4C3A77E21AD623DE
4B78A134EC9973C88752BA636665292269AE953747C9605B9769A15E719E8036
4E368E46C8FCE60112D1F5FABB556AD834401D6250529F3A1BBAA7679464B857
F4746C58E043D98AAFFB21E0368B3110A911F98D0C1B16A668D8B3CE65260AA7
E9A3FA32A95349AF8AADB1AE65C05D8C83A10ABB656256C77C42E4E4E7DE2DCD
F47BD54EABD080A844C8E3D14CC76E40490EAA3E94371067AE92388A8875BCDE
93EFD646F6FEAE17E4C52BEE62060D2107B620D9A948B3B3D8D3E06E63A714AE
B5932E76384D2E2B15A5A7827EA3A3C15EE807555607FFAA1AE58C5A95B6956F
A16D46AE1028B81C056BAEE21114AE2C87B3419663837BB87F79416D58E30833
1FF10EF0D5B2112E088F63D9E747D792CFF5B74F2F95DBF5C54245C517F937BA
90AFD6EAEBBEB6707C6C751315331053A0BEE3678476A7BCDA1F939D98923679
067F136F7824411A8D5148998105E3E823D55A18FAA99F4AC12EF14C4BCA4736
E465782FE9E81CE4F3BE271CE14CAC803470BF4D71CAA1DCB8F66E98C454EC3E
87EA1A0591FE3E17ABB7966756814704B5B6971CD5168C3C7C381ACF661CD3D9
4E07D5A40127D809162D41C277AF022DF05690A5D28CC034DB5EFF7D982B49C1
C4D3703E06D8003492160D8CDB8D23725C9449C9CA76A5E0D230265D842D7862
81F98AF840B33AE6DD45A4E08299A90609352D6A761DD6AD8FDBD48DAA0E8957
37C37C1C12562304C4A18A407BCDC51B40F81D04F967FABF692C887C60341EDB
E3E04A1BF6DDC3EE17F2E7CB32BB7CFA94083E1630C801CC2579109133C5F44E
0739678FDDD206F4785DE0B562CD3A620BC82415CD2633CCA61631084AFAF971
A387AE94050418585ED2A4D7010D493631FE0BBB09C8ACC305F5D7738987F800
96844722729076811B50509092A4CADC9A15C7C7B5CEDEA451FF9F4E29FCC7A3
DB1DE373A473D20350A044A2910182DE13CF8447CFF335C364E58BBF983D16C7
A517FC3C7F52B7D55F17EC7CC16BC15E3286B063B5AE98A4AFF2C2F73F5D20C1
1660D4AB1D0016ED45E953D8BB744D1A2E50FE03BF04DECC857C4132825AD4DB
8FE9CDDB588E6392FC187AAE12D2F059C2F67BA14B4395CB6BEC9D41F6835898
9E2F9B20B3E47EEF53A3EF6DFA272335113319E08DF13BDC325DA9CD01A1E689
51CA025473663372C3934C75115E186C0044E8D49EAC202FC8AC292A44C3FD0E
44B0814BC16221ECCD0277A8EFF5FD694306E67ABB1C140022F6C73360FE005D
8F077FD71D34B257F6603A3CA10E8E5A60F96D0509F2E640F993B110FD9A0FE7
A7C11B2440A0CA36225270005EE7C57E4C4C6F050BFCF9BAAB9BD1FC1B93ABFE
FA990E3A02996C15700CDAF51AF265A0EDB38706989C4FC0D5801083AB91E137
6AEC28F7A626F8A2147DF4B1DF76957A76DADA4ED62A6472020963C356C00DB4
6CB828BA39482E44A9736DCF7C1CDDA077DC936BE934C223F5AA9C05566D7D18
5B57BEBE114AA2E311754DC893E47AA009F8E2F7482604F556E96630427A679B
DDF1532095CCC8786F858B2377F62793F3EF3112825B14C2FE7BC8121C5C7676
59481EAA1F0371C24C76627DD5C6C2796720C0BC08F10D3367C3CF348C07D8E4
F366B1F840B33AE6DD45B20223A49961CE69EA44DDB61B2D4B9BD463FBFCF9C2
C08D9A1E33FB4633FEB06A99ED8EBA3C7818D866268C0F308675C1DC1B4AA94D
669A10B0A9ADB963D5174E6D96F25C87EA17D7D74CD0CED210B42FFB4F20C4F1
9866AA097C42A6ED10B1D55FA03BD6C6DCA0844F3E2B85300044581684451F04
C0605DF0C55D898644B7D17FAF2312879A9AD921499A87C0AD100899B406E03A
B83AD8AD9F239D989C98618A37D3DEBAFAF68DAAEA19A2D965A47E136EDFC573
33B7EC064F1010CC1DE2EF13D3DE8924475F94D55DA454D0EB81E42A39BAC75A
88A6BD0D339F6D451A553705B8DDEB76DA57E5D269C67B6E0BE556180D5F8902
09A45418E89ABAA7573A8A2E20E04A03A942FEA75FE1E9E278FFE0CF44FB6CB8
4CF25321B119518F891199D4D6EBE275AC2A9BD780CE9FFD45497FD4F72A9F9E
491BF693CE0781919E008B2E3FAADA8C4F862175961827750F0FBF40C8D25787
0A18C5A469611D9D4D5E1FAACE67A172A5C9DA43DBA3419C63412470E63DB629
ADA9E9F5B010AA035CF38D0E32FA7607C3D76B44BA44B66A84601FC740523B09
DA00185831850FE284B53047B1059986EC5FF4A8073376B5C1564A91266178B2
ADC607D752495F20DFBBDE75DD427C47DF2E86E9D5E3D302754455FD5C0576E9
59C3C2A98C5CB21BE9581B3CC671A04517DBE55634544330A9A9B8645F8FCAC9
600CEC36EB714781BBCB3A8226C5CE066E09CEBB4DED573B6888DD5A38C44652
325C27444C5C2EE1F1736B3BDF0910A04F5F90E3593CD86F510C5A45FA308C4B
5E979D2A540BE0E00613C7B3B39D8710A0770BE0D75CFE65E10B56E179CF8F45
AFF8B43FF0AC533EB8F6F98BADB64DAD461DB208B1E2A2787710512E7D552EC7
E68D937AAC4375C01701DD7CC8629586EAA470CE3ADE6D0B9209B3A3248952D4
5B73E0A16BD31793309267A633F08029C8EA0DD5DA1F1E6EBE978187B92905C1
1D92424C23C4B9C0085FC241D5B657F4A9A37FF60CEBF7927D50E14665B4EC45
66FA5DD7161E1D6B6DBC2A931A3C680419A924C8D725F63A6FF632A18BD2EDA3
B906F40CD741FD762A5573994F6B0FB3C71B91E30FDDEE7FD765F9C16D15DD52
C897FA9DBBA18CC0A925E842C5963A22432C31A5EA1F66EADC3C43EA06AB5BE8
447BF8EA00A6FA40FCCAA38042FC738A2DAA04D63516D012A2CEDAA185DF4DDD
6F895D9FC9D4EEDFE9BAF1A48710E338F800C14BF66EF5EB040C571FA1A71FD8
560AC8EEBBD0761D1A17B9C3C1F87C7533976302E94A0BFD7ABAFE5A74A72DB5
2DDCF0ADADC0492E94840A2977DE5459620413798E38D03AE2B38F253DB2EDCC
BF1ED209BC977F81499A926FA86E4865A3895E22564CE6F97449F8EC14DE67DC
D1377A88135BB9525550DD7729C3CD32B812AEFD3C14DA2B71C1D3B1E0F6C9E1
0E5C132A14DFE92EEA4D44E9F55577D929DC9CC15F06EBD4C3B6EB4A1F64951B
61206C2FAACF129DB7ECA3A6443D1C9183EE8D8F3B20D7BBFD074FBA5ADA9761
8AFDBAC7A28A8C80391DC2AAC2EEECBD5B6653A0D1D1174412FBCF498A374D7F
1CED41412DDA2311F5EFE49FD9878200E31B407B8B557E0D03B5CBC32511D668
F859928989263FE700AB011D3216BBEABE33982235CC383CE5CD307370B9B2B5
B0E0E5660DC9507357B0C375734EC8BCE9CC075148C96C95080D2AA8FAE9B611
CA4A9E712E9A3CB5E4720060CD1A0F83C502F04B1B6642AE8AE51D66557224BA
AB0AACA2517D9AA7AF0B6820671816D89CD01AABE628A4C9DAF1CFCED2D55829
09709CE5C835CFADCD363C8A29A53C6F2AE9CFD6D76B126910E6B3539B9ACF4C
51DD5A21176B554D602E293239EC675BF3F31779C209DBEA4954C439AEC27DCC
2FE096C603217FCA575EC3FAEAA3E920C592414DE3DAAA1471D434A1F621C31C
6F2FCDBFE45B28922B25DFFD56C9E3D03F67B2EFE63589DEA6B1B7E7DDD257B2
90C342F36DB750674BB72DD46FD1727060DC7D560442A175D5D921AD79C03132
1F59C0127D85435A622646EF0FE410BD667BEB0A2B421DD8A51DD1156ADFDDCB
ECD3A1E9FA7C81EFB6EBBD8D1CAF2AACA65D196D846AC0DCE9993C761BED2144
0B7C3DE27AB0D578879DD21E4603028F37952E2B1ABA1511176AB680AE19B225
F24A554547A97A70A700AAFF7C1EF56269E6A0D8A78E9B513CBADCFB1E70FAEC
49579509E0E68D2D6260BF41D33D9E3568F2D456B6634E8EA3C0579D9536A292
93C51004CDF0CF112256778B0EDF7CE218FC019236C635ED02AAB2BDD7C204C0
33E27BAAC9E2E0BAEAD258867FEDB433DE11773B6435A8647133E26E8FFA1B73
C3DC5A29A2046E9015A0643A09FE99F66586474FCF20136A7752B5B49FF23147
83390EC6AFC1092DB89314B761168009FD6214A6BA9FE7F42F5A85F871FC1B80
589515CA27290AC88D73F1BC4562EF4C8E9D8483F5C9ECE5F23D7163300E0683
74E935385ADCECFB7B49A95CD2A3473F8080E6D0AD337E916B76592A8D6687AD
59B499C192207C1E52F523C2D6CF25CC2762F1C0B865CF8B7DDE664F040B07BB
52D18580550ECCB910D55B7A327DF7FC87C34C5F2255689179436E210DFCFDF1
30B91370C57342386892092FDD82641F051985D09746C4C556603469105EC3D4
E2F0230BBD4D6CEF385F61A3ECE62FD42B5EA2E691BEA19083F955C761F9DFBC
B2E11A6248C7DCB8850E70A1C76CE2FE16746FA3102EAD33F38988BD59CBDBB9
54D765955F91EC0D87795B75EA0B8DBE54EF20CE1A4F498B5B27EB2505661FBD
1274FF7D5C7E8DD9DB7459464AAF8FD595D960183BDA3D4B6BCA89BC83D6FA63
EC0E281810D8178CA4DBEE8226BF6A839A4569B3230E525C1F345C050D4510F0
506783F46AA8FD489009B86F08034062CED0FC066E8B1E5C8BEB2B5F75EBB7B3
AC8BECA3A7C5369311E96E941651E32454E24D500718E6E5DF23D803EEBA2C52
8EE6B1D4B7C8624D19515579C5D6087F1FE53A187A016ED439FE987D39F4E68D
B6BD2FD6F6B59619EE36A1C85BB7192F87B72ACFD82C3FBD1EB9BCCA5FF9D0E0
CD879B9C6F30B61F6154B5B458D75D286477D04EBE5477EDC9D3C50FD3D15E26
62DB76DF56229A421528DFF079AD9A04A7CDDE80F21E903304144DE777E639EB
5AB858571975046E2796CFEEFAFF5EA16A6C58C4AB17977A1A7F35AA92D93832
BF7DAA190CF4FCFB72DD0EFD9D9F725C9F22B1D624111AA472AD0ACF9E1D7F35
83C928AC511AC78C55193AD8B3E548053444F32758E4D815166B89E3B7FF64D3
1188521D971DF2414B1899B0597C59FD3A96E0699D64ADEDD399BE7298EF4FB8
F1ACC58B7FA43183502FD119F77BB2CC4BA7D3474A68FC6CDFC9042320F0B5E2
2C16EED8D9FF10CF6875195B574AB03A95CE57F96CD9780C7D8734A78055B674
6E856EDF00866EB0C943DB580D2C3055BBA48E5A20B79426BF4DDA4526DB94F8
F48B74CC49AA4BE6BD4A284E2E82C45DD1EA7E0890575DB1EB5F0788E1E32BAD
8DB5E67BF9EF6CC29EE588C82C6BAAE2FA86B3B7D3A09203AE2AABDF64613DE4
AEF006E38ADA0085E2A908984D9CE89333C945A9DFE37E5F34BA68E4A07B2821
1FD91795806B801DBE77B00AB0AB6053EC38986EFA0A8768FA0ED545B9D27CA8
03B9C9D46D12FF53A354718283E524117F6B0646E6A6698D1C5271D998208A80
B02AA47C18D442FD9E99F94B35937A278122704B9FADD1FE48300A6DFBE6AD8D
49D2791FA339E9F762F07BA2577035FF3493BC739DDDA068E597DBBE42FC930B
4299141676A80245214A12F093B7D84A05DD11C979CC4F788724AB4F8E511D0E
4B9C2EDEB213538E2E9A1BF9D2E5842CDDBF74140C3907FF153ADF0E4A1BD0EF
F80FD505A1343EE1B71891283B252098408013C5AFCF78EF18CB185CB98D42D4
00A94461DDCC6AD811C275D67FD09717C6DF992584C499D5C2F4745030E356D9
9EF4A911847B04FBE057967C17FB4B643B69ED7D8F45E68F2A60A8438BA33302
CAECCC09D411CCFFBA9018C10EE62785F4A95922F60861D99911E33447D9048B
2F1BE4F3B7139F4118DCAF6612217ED7F5AEAB8699AE660BD63C76CFDCEC914F
6117E5C6AD6D53EB2CC157554DE510D2AB1DF7ED7A6F36F438B5E728D9798A83
E2D5DE817EF045A2B5C74A9F619072461F746B1F7A53FC830929423A18AF3378
762504B7524DA7E5079C9E4A07D6973812E5070287F77CE1C0BD1E7F80896547
5EBFA9FFD29979F9F46AF28A864F5223072B4CCCEAA8C4068DFDD226D6CCC752
0FD814AE67936893A955098965C08EDA5FC70762DA6AB4EB2828D4321EDC1A13
77E19BE29FE17DE9159E3E8B2D77A2132AA5F798DDCEFE21BD4D5600FE98DF28
F3492339B3E98F8D7F803B5ED0AF07C11E9848170A39E20D60F86764C7AF7DD8
02C348D37C26899FD2187BC906EECE46A747E3F7FF9B3FC935C17762B43E6C8E
18FFA611DC8147CBD79254353F36F4E15A6ED054260CD14DE0B1D0DA484F02F5
317A433C21BE7E5229AF91FA8E16B5AE0ACF6AADA23271148BE4D5B2C86A8FA9
ECE135CA2D15B53EDCDF27B191A6D35CF856DCB8AAB67DC05CC647FF24EB3974
C26588628B04AD44231D6304B956F4FEA9D490254D0B8864A9C6F1300D40EBFA
7EC828A7A115597CA6213C08F4E26D46FEF743C756A23827721A3A21BF427191
53CF8C7E37F9117E9E5BD3007C6DBB2E929ADF2C40726B1EC0FD12A7B8065BC6
40A89E853DDACF543889736D44092416DCD0607120A2E0DD954ABFE3690DB844
45E85E8D8315D0A0E3E26DB60B2B15649012946227CEE29ECE62D3E940616A16
73E0083658152AD806535CC136845920230CC099948E18DBE4729B2C0C883208
1EEF90FC7FB8886903A5034BD2361E66C2F667AA20BCE3049F990744F6BF1261
BF5C825D0927CEE90A6F2BA1B705CC49DC251202FA35F6ACE8A844D683580300
CC2654A6185766A02FE509C306CD759B2F6F443D3C4E383990F0A6322BB9F0F6
89A83788729A60A77D901A1D503D7B9E6CACB70C5FA5BA17C9020D56E982500E
C026511BF3BF932382721807AD83DFBC5571780A658A9CA19C5B7DC1B9E6F9C8
EBA470199DA187810E20F22FC0888A0A7B1DEB05FC3974E19DEE2CB096B0FA51
4300B8FA63640710D369A374A7860855DAEC77460A589AF94A5018BB47F8316D
4CE59261BAEF736F7D096DC2576BD40658ADF464DA89A9EFB5AAD525FE8024CA
9E20CD2C692DF06DA1487FBC4AB1C182B799703B1A6305226A778429292BC3DB
C09194546C14FE40ECB40DF7181104E45B6F7B030CC40799D7FC06D16F028A30
4E0EEECE9DEA78ED5B83E37B694FCA3B171E6A9939A37675454BF1C1BACE3570
83C64A1E298574764ACD56B6D724F4A403284E8596255876CEE6DB755299321E
BD85BD17E8FB9AEC0B1B4DCC72AC6BF31E280AAD4A686AD5F63BA60AB0D3CE3D
F27D18D2C6FCDDCB3538B09068C7FE59165715E91E84D9573C7AD3C7D6B93EC3
EFC78B8FE701BFB6C1B68AA4992FFFA828A43AE0EB5B07B48DE067F29CCB7936
8A13C6477E31978CEB2E24EC8A96BD328F0F33E01211788A1BCB560C5ADEDC8F
497DC8BC02F0CCDF68502CCF78BFF30420F3980B753CBE7EF196BA3201D6F243
EB6B27A37B3104F600A41D5788F094FF49CAECA6EAC6A2DD4106E84136E8D757
02DFB2539421A0D77272A97ACBFE4003BED0D37EF3B7EF1010AB5E002FE0DCB3
A7254137B4C28DB569B44E4D9F3F26C231610AB9794A0A4C250155AAF2CBE5AE
AA3AE49DF09126A4F19BC54EE197A6D96505DBB304B08E98E845DBA6AA91E474
31E4874F529E4AF50C4C4F10241FDF5359811480E9A1700FB890AEBA2B0737DA
6A718DCE5C60D6A103761D37F09A92D8625617A080C5D35A9A2F0F6D97473FDF
0C82C2930188C769172BA997FBCD3CD9C85C793F28CC845E0B9CBB39B01EF643
673A0E4190244B84241A7F524988F225D844A8BC72A229AE654BF23BDBD709B5
E64FD756618264F76C76DAFA8F7470FD9CDEFCEBFE9E30CAD29DB8E9EE69C254
34FE6F8EF313A78EF9FE4B498DA00E281EE05BF33528B820BF23BE40CD7A4D9F
18FE04CA4863CA51ADEB90A95DE5C9F334426B39DE32CBFC3CFE4FB3F4FEC235
AF963BAD3560D482F3F53A695FE9FC44EE3FBBBB32155966595F9DB3D291CCB5
7D378F52F29CBD8718380A31A4F8BC51B5028A6D3A83F79E0482EA95D7A0B980
CCCE759A4B186761667ABD98B1CC22BC42F4ED7DF6AAD0A5B018FB186F8BC12F
769725BB6F9B211312359A043D953B7A57B09CBC628EB50E739854F422BF454E
25ED440B96E48381BD10AB44489C140EE592887151C1120B32EA5C7722C7D222
40FF6FDFC51331159CB693B5C418619CF2385CB51FAA9735E707BBC255BC6296
BDF2116137F90097A01C135EF8EFA8A4C5346707E81FEBBFBA9B57354447371F
903178EC5A6CC3EAB277063CE08BB890C650C8D90586A653BAF8D824F3C05627
944F56F269FB0F2A05B84A25BDFDF5CFC9F211418299C13A80D1DA739C0A1C4F
6EAAB676E724C971A36CB09FCB96470F81292E4437C8A6C4A320C5B59443388E
DB91F8A569CFE3C0B1EC4D8E019ECB955B2F7DBF533F4F66EE7C1C3CC43A9EC0
8671F27F3AE6C9A73E8476611F0CDA226142B47EBE6BD5E3C4F6E4677D7B32CD
62522C1CCA23610FDFEBB5775CA7386AAAED72B3917699DF6BE1D14392E16DD1
B0560078BAF7E37B176D5AC145073435A0CA0D78BE21756FFE10C285C6EF49CE
3C544E8E08FC137734462287D05C655B6BDB56CD19A515BED3064BA8187484FD
9302B7782FE5B1AB827C391D850DAC38AE1066A025281D675358850D4D893C79
F1BA26639D0C12F15270D171189099BA03C2C94C0C3598CB0025F8E449AA68EA
8828FB7DC1D60764CD09B400D9B5E201CF2B05C095A1C4D70E861C9236A4685A
43A1B22079BB37CF6EF579DA976BB1A9E7799C5D4B1523B25E77D6CBFBE7E1F6
9B13100CBDFA4AAB14205A8A8005EB129D85B622808537744BDEE169486EE01C
4F98110DCE7727E2C39A29BA8CBF99BE18BAB426956A73CC2CA839EC0C884D6A
2ACD742C9EC2873A3BFCC0315EAA8D49E9A91F09E8E04299D213FE6E9271771E
4A8CFFFB100BA9B8049EE251EEA5CC6CE89BCBA734B4F287168C1C4461BE59AA
41B9F6713CE3724CF03ED2A97A66DFFAC6D901923E91182516123E68109B1821
0AA23B9A4F82DE83BD4329FDC8CC56ABE73AC1BE171BF963A15B1C099D334C64
3D7643095031AC835D2B11E9F3A3307BBED1A9750E1F4E6F62539DC385235B0B
28B7D729E70F1D17FCFA2BEC7D29415BBC3E904AB4DC1611DBED8051340D392D
39AD11EBF80D988B018FD6FD2FB0750288F0C66140E10C8D9673FE24317EEBDC
7BBD53C12B942C38F287AF766F78E25B2B5031FF07F1A9A67F00F2385A1841D3
F0C9D172B13E10EBFF55FA08C74EF09D0A5A4FFE6C092F0B163D58AF491169D5
120257012702C1CBB4C48BBBAB805D0999399A4F027D1DEF81FAD1742F0367B3
25194FA39E2E35A181B57DD0BFF71FB98D8F5A9318BC46BA4523B34ADA1B5D31
E27DE292C3575229ACF7BFD2A2DAF93F55D086CFEF3ABAFF365FBB1EF36BE602
9B707453F8E8F4538367A75C9F3926AC3CA722A014371FA4EEEB128E9E92D448
473BE822E3957638FD34AACAE8FC504FF07E57C959C94283A8DB948DF640E279
90D9B37425AA9974D7447F41A31880E1225CB08F081813921B70FBEAED00D163
8F379276B22093520062D2E3DFD19A3E9FB883588CBA3EB0B7883A396253CDCB
9CBC3E366131B9238834CA6C0DE548B6276C37336CF079DA9C6EFF3ADA40E839
B75FE8AD9E7B450B67A984F6CE6F529A894801ED503D35033CD912F06002193D
A29EB6D491B1CF397589BCB8A202E2316BE7403DF80E4092B109A67D0C278745
55F5FCF839B2EDD312EE1C7A037FD1A6970FCFC73EFC3F89B6740935B61CAC18
10F2A3F873B61D70DF78D959ADA65C98E13907BB59D8E590A22C3E7169EC8F9F
1245D214DDE740B263D9A2A27091363F1F2013A3C82366A40C5371DCFC0A882E
E62E38E0F2D29DE62C93E5397DD452A4788DC64271A5BCD0D989837D7032AA64
0ABCE47A2B5F6D61327198DAC655EABA3B93DBF15010B0FA4D08719D581CF562
CBC5FF6EB74EE2471E0FD8681FC03F4FFF3D67A7118C473317C81D6A2181E02D
3CB6CA5C8614C473E0925B683A4958BC71CB859118DC10FBDF801285A9054698
A35DEF19BD9C231918264E7AD95537F41DC5945CF44A528D29C32EA49B9DA747
1032F2AC594A91266178B2ADC607D752495F20DFBF1C64068FA870057EAF5693
ABE477D9887B0F9D2796962CDE670272222B46B3E57B29259A361AD07946B41C
50BE0242730DFD1562116944ABA65D196D5F318C97C47331BB1A80411C9C2286
147F6A6557B5B8C9226DAA20DEFF066C54B7EFFFD9FBA63973058518A5FCFD28
FF916FB9B7A3D1EF117AFD2FE95DE239C5BCC4AACE13AA1EB213ED5CC53E5394
400670A3CAFE2322B84DC00671CAF9798C2CF8D36A02A448F8DBA10FC8A1180B
16CF0B709FDEC385C59339873F55A40ACE981D20A10B0A1ADF85A244CF5E1045
E9318B9E5B9C5F16C37FA27D3E0E59D965E6E8ED6DA97D2B5D9EC1A987B85616
08D23F532B2DCFD2BB4E0BFBEE0F5B38B2AB0C31A5C4DCA63644E536EC77A07E
34FAC77EE6E5274D2E530967829B3566BF06E350834D865F2FE04DB8C4B96D40
43E4E356BE46B960987BF974A9096C79C908205B156DD1EEED04351AB04308D8
BC9DAF2CCC7679FCC9A8ABB84FC7AA94D3A4EAB1BE91588D8309AD017AEDC46D
7E6CFCBC313EDB52BE2A83163E4A979242441C86D7E792F285720C265DF00458
85A91DD6902315A4912C299A03F2C731B4B7A858994798F6ACC5F67333E1F7F9
5F6B21D45961B560D842B6C494A5395823D12AAE6657E094DB56BB7C48062F95
3F37466563D649704D42BDD8F18EB5CF55C1AE259DDF3117169AE6FABA33F25A
304D5E1CC79A2C668EC0F2711371F5AAB8D401350EECA6246E4DC59853EDF741
BCA3F3F06DE5280137BBA0EBB4121AF0D70911FD992A5CC2EB92229B74CCE1D5
C869B3460EB6C3C396110E675F5BEA5D45695CCA2964CE1CEF73BF89C86381A1
B3B7EBA008A67C4C4237F824EF322DA99EB13C1D40E8076C3D5C68F7783E4092
B409383CCAC5A1C617842F3217030BAB2E5EA8412EBEFBCE90E7E1EB317FA798
EC8D534DE9B41E342D574D7C037F8329639C6F159BBBE9A6380A470EB5FF9CBA
9D1007886C4663E7413EC21AC6298A742CB9F041E04E084BBACD8A86FAA3668E
52F131331AFDA08CC184B3D503027C6C5713E1EE1646D773CC4FE566D91EE8A8
9D7D856EF369A5D339365B6D38ABC58866C1E1B8A80D7A6BCCD8E2FFE07A95A1
877C2FB6BA4D23A79CA0037A3C997C2C451DA2C090270B5C7D705C1F51C1F7EE
D4DFCFF453BF37D85A59EAA199C3802CA8C73258346B51F0994E2777A82B9B0A
CF4DC2C0874B3570C3E7EC0DDE35C1C2D5B7F7EBE4C9A81AC4300D9B6DF00C90
AAEFD8C121444EE372BCCE9E14AB130B73EFF46D584F9AD653462EE2886E4EDB
CEF8309C091050DAB6DB518CF988BFC9C07950A47506BF015B4C63E38D9FCDC1
2EEA5EF98ECFEE6A8B6322EF1ED9891660D47FB341FA02A41E73A4A2B6C8880C
887085CE787BBD91239B9EE730512BBA52F0125D3EC439A3400DBAECBF2840EC
66AAF89654DCDAC73A588B6A10EF33F894F14968F68659A329119D416A0B120A
FAD7B14511CA5374D1C2D78FE64DB80B78261A2C0DA401601BA963415EA4B8DD
3380C54399851A3E4C455E196C2D1C9B59168843DCD33AE22F04511380430E16
8DF3B656410AF0BF290E476F1D4B21F10330BC55BF505876355DF872A45ACEB5
558381955334B2DC5D1C5918DAD2FDB2979ADB9D6C366646D36504898BC36C94
595CB63B7E244E9274D6D699EF3E8742BD565CB1FEDE983F7D46685CEC72CEB7
CC260BF3D314DE03E8E6F42E7B388EDAB7B75C42C2EECCF636C70DEF611C3DBB
6A81B76A9BEB51B86998ED10552D978DC02B195449EC843B26BC248FA8B21590
F653410435B50B535E9EFEA0E7FD20849BB4EABF4E9FD99B94A252E89C0F25BB
1B169254DC034E6DE42302A72FC5F283B25920905EA681CD4280A70CF7AA7F02
7E95F0C17C5D6031D29BB99B35E3767EC2F903DBD2056202978CEB2E24EC8C0B
9661172A63F4D88689065DE79EE3CAA25741392D3E2F41D6F72A7070660BA7EA
C1355C7A8D2EB1B53941ADCA8A2CD6DAA547F7EDFBA5C3EC49D94E6CE500448E
444F592B411FC5F685A8D52C7F2CAB96BDF9EB35D2FC00A0D94702D2F9D1A7E1
4FBD871CED84D38D33FC2CA559E3D622150359892DDB36641E7E452F1CE50626
48E34BDBD65A9742DB6C42AAC219BBF030BD9B336D4EDCD2820D4F3891F262C0
C5D6F8C50C32C5817C8967FB90B0C3891A934D8823D267B251791CC3DD9840CF
87F65670B0F94C48F672BAB2D8430BED15BD91491414D03EA8F3ED8D8305C7AB
7EF31EC79ECF1AF7C14F7B4013DE961F7C7EE246723C7D0CD4F3D86AA628A5A3
979AC926713FFAC8CB7949F7048411D572807B6C079615AFC73DE77ED4EAB68C
55697E62E4081D5ACE14658BB789D37BF9A8F793B51858518E7954DB1E1516F2
4C54D922F59B160890F00C1B79E8B8B037DD26D7B98264F2B9E9C33FB1F8481D
15ACAF54AFECCC0C0A1129684D74D1527680952008E04068BD67FEB466DCEF7D
22B2B8E488EECD051CE4900E12C3CA1FA510ECC2C81976A2AB9661C9EDCB4916
20998649F94ABA555658AD5019A2A84D5740F601C0756D2A009826CA2F60B016
6207F7F13470C6AF3943A8BF68ADE3EB55DB14D5999DFCDBB71F9F4E3B04FACC
8B34FEC11B39FBD458BD2130D480C76F82AF2F157AF42FDB193BFF584B03E331
2C109EE5E868EBEEAA1F4C8EEF1639D840140513371166547B306807A08E4E3E
6F9B6FB6280E7BBC372737B675F9BEDB64CC1A137E221A968BE6D54D3497EF24
26270A50518A940EA65FB87F274D90C2BB9B053AA1053D249E3AA85A32326727
94737C7D1AA33264DC83402B8F9F05B578878D2ADF539137A9BCD6607E25DC31
3231FCA257D265EE6165FD59E8F50CB460474CE0B5827212B89BC6A7396BEC78
2E4467DC1BDB2CBAD9EAE38BDB414649B9442625F46DFC64AD4890878C5B7272
BBAC052520C2DE9C6C6E21504A2EE22E18604DA7671C8FB1F4BD696DDE4652E1
B095792EDA4AB81E7138A2E2495F9CEC9CC29D6AA54A7D53A6729C54F2644B9B
E91B690A3859D0FCABCCA032017A5D729BD7D9518A57435C5EAF1296B856B3F9
0B63C9550C500FD3301FCCC1BA2F8178C8EAE324789CBABD5390213258952409
CF5F38F054582609A595C53168661A3A49E29E97ECDC56E343FBA571D7A77925
235E2D5C33EA977918BB7637232080916F8C1DA62D39B03F2DB043D3C9515D2F
97BA0F43C79E080F393DEBE120286A4C7DBBE873E9C44C1B0BA99DD8C32FC6AC
3D55A2D96A3CB38F3F18C23EAED52E5D36E7F9B679D506ACF69DA7A1C299E353
E299964E9E10D562EFB019E74DB93DD70EAEDB465027E63354B24FC1C8B8EE06
1871FA5A165C04B3EF16E2B037812A860B5AB4DF2A3B1EF3DBBA44253E639C9C
A00C270838EFDA9033FB5C05EF8E1307261DABBDD7979435819D5A8A46506736
C3CB63B828881CB9DD5E9731E979B70FB98786D6D0895142612D4D100290DA85
22A793EE3AAD295FAAA4DB59CA28B1C2178DACAF26750EAE7979BAF222CCAAEC
277C154164B567E55FDA1EBDA995C10430F3D07F88704975C1B19025C199123E
47893841BE4102911437AE9091A95E270DD02C1CCFB0E376FCC4F698572363A8
14C7D1A23CFF2E983A814BEFEB0FD42962C637BBB428E461B076ADAA3368BC38
5C9A406B71785E02A1CB4705D0063D6DDF8E14EC99AF53CD119EF2014C1926FD
E8B63685C8B24E394F1C85A7E7128124D676A7BEDEE70BDA562E0DC797A046C3
12D7C896B63CC0755BB36933FE47F4EC035377370E72A1FC685D131DF8038357
CB31C8ED3A75E730F594E060F7D0E69EF1BE48F2D881951FC7A823272BE2132C
121722C3A633709027EDD364A5DBAD07719D2D15CD31FEAA2259DC555C44FB04
D54EBB7479D28AB3EAF26E7E0828622B9C4A861688B7E5C3DE9F4BF9EFA415CF
30975698CEE803570885291AD42330E89E4FAFA04C0F8B9526072264FA4DFB38
74607C4E6E045AFD335B44F1CA6E3EE54565038DA6E8108E351ADA9BA979567C
28722CED80AD39FAB4B2115B06CB37E0D2E015F2BA9D999DDEF87CEF5EFD0EDA
BFDE2CD096EAC29FF568E1CF28C2DB6202AE1B71390594F97DF0E12B914C3409
ABACE66A825744FBE5E559B3A63A1BD39B1FD43C307CBCAE3610A1AA3C5E32EA
88A713FCA4548C1834C8FF011CD595B898091BD0AFABF26738C224B3F3E0EDAC
3A40690397273CA3D7423A4C2114BFC10B810FD1760022F1B03D32FF3E739E34
7F425918D8E9697B1054254C05875C40D8A5C5BA63F854D298543A138F488500
A765C7C3BE5032861EF35493579B96D7BA217076202C48161F88CD180FEFA1DA
D124CE514294C34B3A96AC9A5AD853F61C7897DD1B04D8B29B82CCD20F4B77C7
C69C8FAA2D770D23C3FB8108D6AEC0E8FCF9ADC901BDEB30ADAB905301C1E8A7
659D2FFF017655B8073F387FD157FF2C0FC64295C89DBD8D2E1BD125B4021394
288C2E525157515B5FEAE6519BF7D079391D74C7E2C02F6F35AB8D94A971C71A
7643913A763B405B89E9D5E89EA75D28F8B7B3F397FC7D111AB18C7A28DF3930
BD3D726CA2195DFDA49C2BB2B68EA5E01CAE3202974C456F7643C6F8CD1C8027
5EE69F9E3CEA9005F983048CF5409F485E6363DF9846CE0B91C98709C468E62C
ACDC2748597FF7DCD3F17186174E1C3F0A6E6A64A15CA82EF8B5D5DD6152AE8C
1B6EBE51258D5806B21BD09A13E672C50606DD70BB2B987D4C6923AA1DAE6415
C20313EE0037B2104E41EB354B62EA8965C23D75CC94D048E6070F51BB5768C6
C2E39839F90526BD35EDD09DF8DF86CF789B9CDDF670A56CB130DC0B9848A841
6D9143E41F9C84742DD90E96D03F0FA81E6B1345D91ADEBAE2C1BE26276FCC70
946ED0E8FBA43319690F227090DA1DA7C4C7162F23DE350394BE4A3353975AB6
9BF64E8BBFE28D01C76E0CD55B6909BA719219644184BBC9BF39B2C1567A639A
56EE1B8BB546A69E5A9A28EE4E671B8B453D17F1DD5851FFCA7A3442F0B8AED8
CD88BB096EC49FECDAF68AAC5AB740CCB467F524288BD30465BE928572B7FC83
1C072782B6869486C682AD13619DE384772A61228B932409898405D2CD1C9176
8D58AFF3A0A31912A60DC027288F24AF93893C961F503C80A2F604724569FEBB
FC9197FA9D64BE505BC02DC097E033200717846A95628CBDA6B2BABA1D707365
F49B349F929D9FB7AB5F6F2DEAEA331FBB3DB87F7092455981AB7CD7D6F55A3C
2733A5B1C80CD3538419F7783B56F77A240FC12472957648293E907DD65A95AA
BC960628C079FB0D2DE8FF5738D644F09C80F36C9A43B2ADB6E0D4DEABE4782B
CC27E32CD64C34050DD8B449D80D9CC38198D0949FD642EC6111F4AB98763B60
613E7B8136FD9742AA4684A80295256E9305C3238C62AACDB6622739684EEDF6
C4689E470CFC6611B33304F31734424F4F88F59E5F45A66D38DE354BED7A28CB
3887C523940EA2FD033CCC4396D7EC3F601D12075772BAE42D9CACFBA36BF2BC
EF2843988A3E5D867F16BED9A3F555C0C1330BD458767B25E087EA1690C5D4D4
1BF6C2B1EA6BBF9951961F00D93083CB9AF5AB92BDA17CF178C3E373E8982793
F68593AF7C0095C8EED734239E9D8D67224F1F31E090C88E0C86472596575C84
65696B2837DC4B063737F70F1AE80C6057ABF16101FC9F7FDB204A91E16AFC6F
1FE6A13BED439F2866E4CB26C70EF03E544AD171B494039B030DF159745AE6F7
3E928C9063B5959103328E4EEC7EE00F9AAE0C6A357ECAC63AE75309F8740CD2
B49506B85E240B421CC3D51705E2D0D0613E2F8801CC0C391C829CC1840EDFD0
18A1878C51A10727F31F54CD96FC31C6CFB1038278DADC8108B5D92CFF8ACB94
5947C87FA08DA2F0C9047AF3A1CB6150F7A53EAAA7228B085072D512AEA396CF
8AAD325BE0E8F32300094EB4C57E3B6BD6DBD8B9F7E696A51BA40E5651032BFB
48DA65EE10A264834BFDE869F93D9CDAE04624710DAF0AB5B38C156EC183C9DE
A5611BBA810107A65B9905600F55922BC1B42B39B87DDBA685E19FA7EC3B0F3F
94BF0D3AA17A8E49A15F3E9B2F742D1BCB8DDCE2855248FD4C0023A742F22817
4B578DD7F60FA726471D78601A19836001E31A1F3643EE2327FF935C08B20794
8D4726ECB374D3F620EB7A63C88609FC1ED61F24FCD83CFB361BF8017B8893AC
F67218FA30F596DC797924A2378AA67F23E4EE59B4659A4D744AFA5C52535888
E4B41625A7D181CBBC8C0A9A6561423E202529A78A34351DDE9CE5EF2F39F5E5
14C51B70408360E279E1C45D8F16E92FEE10EDE1F558DC81FEC079939B2F5FF5
5CEAF1BF5F004E9499782C57F0321C9D9E24B74C75907A387DB6B91B57D8D7FA
0118765933F00AD32A6453D6C901112DBC6245E2A3600F230B15A85BD63424CB
0B991A57BE88A3A2EC2085BDB692576B92ED602CB6234BEC6094D7B3EDAD6CD7
ED6CD299D86C932F930C79B537583873BB0B1CDE8DB192C317F9FE709850603C
45339A3ADE86ACC5EE21B5AAD939BAB07189A0B8228ED5DC93801F582F42DD02
71DE7B340B2116DEC24074E2F6B3DE7403F375128AD387A7B0EF0385930E02EA
922DCAF2B81ACEE9628CBDBED23E944A27AE89717B9FB8B4BEA46C42D08B7C4B
EB0C9E2AF0449DC82D98B891AA935C4BC189C79B997FC5B8128A57BBE3E1D8D8
D0A8F9D9334709F61354C14905B854E879B6551C07C03E410319DF43A9A11C61
1EA61C41B889FEF19C7B7BD600F705B5D2907D7B9F058169DDC900B1A098380B
71A9096A7B6622CA8E033A08EF499594ECD03389B2F9F5B8CD3C7DA693CB3B47
5588D94189A45B033CA61FE35A6ADEC7D554C8BE7BC233C6373CCCAE34E91ADC
F7D825B94DA34F769386C5F17C48404923F1D01D0BA2F53E43BB95DBB86509BB
3A5B8F704EBDE470617E2774E5607D0CABC963DB92B9A05F5B5605677BCEF6F4
B47D75CB161CBBECE1B5ECE7BD14DDF3A8C788575E707D885A81C2F7C10D7140
292674812C27681010D6EC01DEB20A8834EEF4EC1CDCA9DD10FEA96EBDE81DF9
67A16DC0EE7842A4051AC96F3BD778FB6142E74B12B7199235B16EFA59CA887C
16CBCF43FBDFCA9C3497E8E5FF5145582348C6C220A52026E62EE6AFE6678C4B
F4BEC32265A7AA44E2476DCA608804775056D9928BDD543AEBF6E3B897A17CF1
5D7FE2D299C5DD935E4863ED38721B1E162D7F1BEEF0F62AF9CAB37874F69E7B
BB0D27C78F95065003A9162EB12C4F2616B05D0DADC3C476FE9634D95D592396
CF0C3D41DDA48CBF089E668010653F5A18C66071B977ED7C7BE318110183FD3A
9D6C774F1F2E198AA491901C93A4DC7363F1AABA1DDF33558B929D033B2BD0E0
3F8181E7926C6F163BBD5F3F74AFC994F320C4B5F5C71DCCA107CAFEB593D248
67378D4A36FE6166DB1470FC1DD83DBACCE70BDD0E6125D96076B10DA645403C
838DEA4872732E0662FF67529391EDC924A5AF060F0CA6DDB5D81C443685565B
EAC085C0E61F3EF0072E6DAC0C7CDBE8C542E4BDD8706779827E29CF0FA23347
254AC54E41C07F52F01DC805134DA6FE5A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF705FFD7B13420650A3E56C4B5AB090
6D15C8CD09CC2F8B32005F24D05B7E5EF52B8BA4F1C73CFB0A908D42CB6BB6E9
507EC5AF073CE78791C3DA714AA60198B87689F05EB1298F554671C81123C070
925E3F07DC46D862F6C874E548187A5EE7C6B713D5BF66A7CB3F258D2B99BC48
41EC9202C3D02C9A2CF71D52FB4D0EA9DF8BA01EB2D2192FBDE6EB1E0A7EC955
13D077AED82C96F3A8D32180720DA7474138F847B46D021414BCAD1629F0954C
CD7808E026A4B5D79809DA84748C1DD5A1EDB6AFA088E9C1122555CF98C46549
F30B5A62907162B395AFF56320A138B76191B06FEC97AE75953891B02DDF53DC
CBB20B24E56DBB752A5C0D7940CF7E3E521FD1777DA4A2638139FF78B960298D
1627E5DD2BE89CA00374E2708CC47EEB701A6D026C56A4B495AC3916730A33E3
F20BE70B1608FFD5E07D666781A583899A9E954CE4EDD9144793A659B499C192
207C1E52F523C2D6CF26F77B1BFB04A74E32536B7C6632BEFE3B123CA985B721
3FB2CDA7BBAD5C07718689DF3C569C8BCFC0F8BC5E075CD64CD6230EFBA46127
656070359652536BC1176EF4EFCCADBDDA29266D238C0E7C800DB0E22BF8000F
D3DAF9A8B70334512ED37A8812D914FEE39E343EB23944236E5288CDD4B8D323
578F80BA1F68DBB0644DB800ECDFEE43E42D956605142993345431B9FF2E3660
D108DA86E2117BCEDEC347C04D58988D00402DF8794B1D73940EF5CDA5F711EA
0BE543BAACDEE7682FAE1239CBB0BCC0D1B9351FC2667B316184CA25DB43961A
A1C22EBBF71D328B75CA05456A731F177F6F99EEB4BAAC06004DF835495ED5A4
9C49FCD5B1F03444A2D651AA5DB383E3747179FD54E0955DF11800F8D76645E6
A7C09AB7C7CD9922E8788E3B508D7F77C8C341A1FB529EE1252A1158C125100A
5B42A2E400A501580CAF3C9BC9C74EE0BC48854DF648EF2A0C6AFBC2499BEBE2
613232E4866B0F82F15A18E9324C7A1B5C7DC8375A1D2E8D121894EDA87B3A96
3922A29E00BE8334ABE712B0C3B23708AFBB897F101BB80A110DDF7E4E761488
03E20DD866B8AE8BF3ABA756B9D8DD0E3B5E495E3070FEDE72BBAFD87A45386F
9DC59839783DB864303DE8C85969BE5AC5245A0270CD53E72377D6B86CBA8331
76323D1EA2402B20E1C4E68C55F1C6CE31AEFE7C8215D7503417B29FD16BBC2E
221724547E764D44F5A021DE5973BDFD4B0EC4B5A6D5DB3CC8716D1EB0AECCFC
E96209BEAA676650FF0DBCD65A89DB5513B266D00F71935DED5AF2E670850928
D9E6A69CDA5E108DFE5DE022D24C8DA18BEC0A790ED8BD50E7E77F002F99E34C
64E6BF6959B6E245417A3CCD30C9B8053D310B4D8FAD6185729F7C3CCEE8A9DE
3EB39D72E9C776AC7EE344A718174809E3C057C10FDA8B73C48A1AE933CD7D3D
2C7AC2D5BDDB2548C637EDDDBB242E8DC921CFE8851CD927C5AB6220E7A9E2E1
F20A66019777719D6D13084BC8BED1ABE47EA36D0F5282F33311497AC69F71C6
3F014D07370671C52CEA8A5E53198522C434869A0C67906B55C46E56F8C53790
FC92D2D39862E3081AFB5C0BDE232A458F3E2A5F38E7A3A97D8A6EEF387C9FD4
AACCC343705FC9CC20609255F68F76666D9D4647002BAE0876BCD353CDA8353F
F24A48188ED97C54815465EB7CF6955084AA74B9E8459ABFA31A96A177DE5AA0
0C9854DB2D25E958FD56FCE76D0DEB67A47A2DFC20F2318C9F6FDDFE21C2CF81
2CED3B67F6B17546BACB6631A51EA218C8811C7A73FE4972A46F1CD9A89D9F64
ABA4B585A674CA2D5F3B0CB9D33D6AD3777D15E08308220151CC188E305B068C
11A8020D1A155FCB44FD22631BF2BB54874F6206780CCDF810419D871BD38ACC
4F2B176F782DABE3FF8C270633416DB2A3FACC4D1D421713135FD84718A13369
0E6269475B5E4B670FABF83F454E745574255A02CD28BA9E87AD4906113E333C
0DA452A3DA5FF5956B7894282521184959AD0C62899B0F39A7FE182D41791D9F
8C15AA8B375B3C445C6EFF1AA44EECFBDB8B9ACF11B6ADE903BDBD785DF0512B
2EF428A2923A91B2F776C70FEC7B1820C42A1078409AD56FE7191150FA4EE319
9E1639DDEDF5009220307515D4202AF42CD3D3F98DE8CE8101FD697B9B981BFA
7BA525060E8E38C85848538CA9076CA03EAF9BFEE22C49F950A31A6912A8E62A
9B0A1D331A6DF16E8549CD1D757DA72837CA8E90CA93CBF9681425ED59AF6F19
CD6A6C9C19310EFC5E3BAE2B3838F886A23C87281744E40FB9C24D5B9612453E
5EF16C7733BF56AE6BA3F4D290FB8867810AAF4715E339375D60A1D1B7AFCB9D
F8A89FEE180D6275CA7F8ADA5E5973BCEB77DD72295C24BCB97A2A8755111464
61500471693B912992BC817E704A0E944FE4BC73F5CB8455B5EAB7423DAA5559
8A17A44F07BAC8A71E8F20774FC77035771407F6C61B9AA815F71BA9CDA2CC27
83ADE9766D90D8106BD2C089C0568476073FA36EF1BF8B03B7DC0DC3D0E9E5FC
8771BCFD404F15D439B59D094DB2E9523460F114D0D9E5BC68069C7DACD273B5
0BC27AF8E3877B5A18FAEC29D3124B969B854899BDB45C50E17B063DED4682B9
7E5C7DA98CCE8D724D14B879155BAE75A53F5B8CAA9F3EF14B096CE3C5EA03DA
61993C0742C0C991B2700E8E8DAACE7BF3E6015D0FF55BC9FDD3B63B0FD6A904
69F981B3728A590966A1F5668CD8CE3441AE0CCC52493F0D102D2B7A8FD57969
D2C61BDBC19750AFCE844147A34C17F8B7C2226896D515C595A962D99275B831
B6B117F602C9A6294A8BD979D0E1891573EED27D45D8FC743A5714FB582DDFDB
54972E891F3C1909ACC3F57E504A97373509044C5410E81DE9D9628412B17244
31EBDF1622CA25C441D2FFD4DAEE43CFD08C950DB75F8E5B5F42C1C211203ED6
EB5A3357154A0894C7C6C045C42EBFBF182F0D752E77B8EF24E11ECBAF10682F
0EE1A0A11302921F69446F53C950E0AF08006A4FCB9FDD4CD675AA474C42A773
3E97EE2065A7C30E8D9622E3ECCD12E57F97CE085C84C5938C3601AA6E55705C
785648C8F77B93A92502BE80997C0EA83D3AD039FE0720013D660B96ED1E6B51
89A938DE6896D72B0CD6A1747611D2BF413CB128327442D69D1B7FB6EDC903C5
AB3DCD4A3D172B4A8AC5DE573D52D00995249943EACE8608267FEFCD4B77DB19
44DFC2FCA9D28A6742AF910205C9B626B44734A2A35C990AB0C485C8FBCC63BC
FDE667BBF8B8DAE62999615F358E7F80EE2D8EBA389C249A86EA1764EAD2D65F
03B4F41A6FA44E9CBDE36F886A6D4CB723B35069C84B8D3F3B087C8454EBDCBE
9D7FE91345F3775F357A5368A23599557D1C23EE03044801F3211770CEAEE917
D81274FB0BFF9DF2D25FA03BD6C6DCA0844F3E2B8530004005E9F6DAEFA530A8
35479D3FC7623589A18544A63F960D6555EF804A6913C95B13962C80893D13DD
009CC4A4D8E80FA3A1C5F9D1F152BD242CC5B03E2614541891B78E0EC88E75BB
E78CB32E0133765517039417CA212D044907A66E3BCFBC6E22A8BAB77662B561
34033D3D98BF16427BF143B17D02D492F4024DC4CABF70786A7C03996D966AE6
5BC10785AB7CE2E6C544050618A4AD496060FB97FFE5F9C9C7E31FB75C3E973F
69E893ABC4AD81F1EE52D7A1D7C6B353DA579D9C83E6D9510BB613232CC88117
AD594831A1CF9E71594CE475C30E761254F64DEDFB54EB910F0F68AE5AAB53E3
9DE6AF787592277924D503B3FC8CBB424529DDEAD48EE971DBEF0AD790D5241C
CE157AA6DBD6AF81A9BC101962355B043F99B66F7E21D717BD703717CEA2FBB3
EE7D8E614A4F65BF1A72907BCEB28F129535655C5E9E97172263A7E42C94772D
55B7356261B866841B773E27B9BA709234D73C597A8FF5B855B941930507393B
148DBBBE4D1D60A3CA285454D782F68BD580AAA99B9A321DD9E9E16AC846CF23
6B292A528DF0167174D65AF973D985C5165342FA3127D068FA5C3EDC07749B45
C040B9D7E59CB5DC60AEE82925CC2158FD5EF5AECA7F096426C90128BC64841B
C9B7B1B4FEBB791C6D143B82A1E7F25B59CB436D394ED59579120E119021D3E4
077CC0C49930DD44E6568EF1704E6CA60D1774E48FA86164A2DB1E2B045F0F50
11D46D01E050A7D133FB47A97302E11835F983079F564F6FC7E37A5DA2894CB4
40A7120878838D312A1772295CA75750165C4DA08A49FB435D439EAB8996645A
84FAABB61775170FB57B1D2BC1A0C4CD88B67AA4F2BA785515A78B79AFA1779E
D52C2002B5064CB0640FE67FE479A28FAAFB8B546F7C26AF23496D88825ADBF8
BA1C6C5ADA9C5AA9E163BF413466BC19C9F5E44E56DFAD604A3722EFD41FF3FF
F4639076AE5CEDA8522B8EF5BCB00635333E3B768D342FB18CAC2863E1EA2AED
942C0A586BF7EDB02C0858751DF4584EE9B2943C5B3D1151199B86640EEA8B49
F80BC01C5F054BC8BED1ABE47EA36D0F5282F33316BDD73B8E7A4C9D19997207
3CD015DED01B35A8E9B032209296003CE197AD689B3DC5744A79EC2A2506959E
98ACB5D041E2A879095B20EEED756798AFBCD54422115A75684D9410B3CAA4AE
C4B05A378904EEEBCC24FE873DD8467139DFFA34C959CBFB2869B759156B9E6B
1E412B8E702C1B405B496D0C6F1EDCB9EDCF8EBBE083F8A9CA4FE72E6AE73893
1306813253D0AE866D12256F20494D6E47759F5FD4F02248D47BF3BDCA06E998
0FEF7F1E0BC67F2016DF29B2F4350B0A05922DDAAF34C1C1A82D3A58ACE98DBD
EC4406B3DE0084A9E8CE74049FB76B20749017E7804EE17DA33BDED9BBF86A45
7CA8463D47449AB7FADAFFDB6F359736A68FB4786A3504F109F09AE6E3A9FFFE
714BC12E515C57EC52EEB4C6FB4641CFAD1888AF2146B5EF9AFC2BE48AFC2E1F
4680494F02A74AF98B8230F1E78D0A4CC4489CFCC81026173EFFA5894A2A2BC1
8F4F56CDE3255CA1292DE225B7D69765823B05EE8604E044677F5A2E70E7BEB8
1CBCF81E2BAA51CE0B606886629B53D5C79BAC678AC5C650C13A327C0F3DDF10
18FE91AFD0B446441E0D4C268C299025428EE579B50FE708C34EBD9DFDC33FB0
9145CF2956D98239588E6778F8D57D90EB766C0FD124FD68CF79F069B7326465
25FD39B232929B577C97D32873563D5F834D21320CB9A2AB6493640E24CC357D
6CF26AFE3B8D773D93A2602C62C70B61444F884813953F351C8451997F0083D2
DE423A5D78C58DB569B44E4D9F3F26C231610AB979401F73E3C0C22A4F74BBAA
8D379093C76A76D75A38C44652325C27444C5C2EE1F17903E9CE89A883887194
534A5A46AD115569D2CC7296EE2FCCC3967CF4DB84FB19A69D0B110FDFA25680
F22D31A6F60DD3CBADB13E7883CDBA13231129E7500A0100F19785C6C43FB7DD
383DBCC4EEBD1AE147CC5A97540293D180F023E15726656717557AD547C61B76
450EC7DA18B2D65DA816B0D510008BBE028CF181A9E599F6BB346B111AAD8EDC
D52088410B5D21C4CECA5D79A249AA3ECD373DCDE4E66EA83949113A359F69CD
6B3D322BB90A149DF5D44B5087CFC3379E3A62E5B7BB128280C049B07B070323
33B21D6747C5669E9DEE7EA799D03E1E056247E9270ADB4956ADE830F9CEC9E4
7617273A10BFE14BE9FC53908F149AA7AB432579CCA7F1B7AF96AAF53CE42E16
DB66BE6275511E0CE1D0A0B8159DF6F060A4DDCB10080AEC722B8F5FEAA5E06F
8E9B023976B95DE6213B7C6077B2CDCD69E17EA619C3281F49B7FDA52B8DDC97
697AC3FEC999B4B8304CF70233F8E5CE260BA610C85984F5C1CB17A5118DA191
01D1876F1DA8B9FA761422D7F58CB8DEEF6F2D2FBD4E421297D36AB8A7DF9D0C
C1EA7A3714968F2D3E002F30135A03DB7E501E4EC2A667C270C67E21DB0F7150
8FFB23C2AD6FCFCFA517EA2438E51FE64D6C217A1985E2D8DA36460501427136
4B94AA8168A3E76200C15CD68396B4581E1C94B86AA2A9E4871BAF58061E02D3
D4F36FE8DA32A468F3EE577A2BFFE83E15A84E7DE98083865C38D840A16D9808
67837CF7FBA915E6AADD5025E5DBF15404468FF6A49FC7F021B183025F00B595
3133A589C0DD6CAF69E83B23F6D1EA517BA31D54AAB23F63ABC10400F15833C9
20B217422F43524E56F03D80BBDEEE31883DBA8B465207ACEA1E0C7EE3A2F3F1
716F05FCA1CD2CE148077DA81D0354D113A2C5E6831D58E04673F0EF8B8CFE7B
EB994EF5BBC6F11E9AC04682962BD6FBF24577849E9CAA7D24F59CCF307F6C40
8F3A7282AED7EB093765C2FF1894F736AB3CA51265918F72E32E01D40022B4AB
9EE6EF0063D45950A8318C563F6F1AEA9D80FDA51AE4AFEF3ED1632ED8BFA0AE
8260E101081FBB9D7A52996D579636A1B9655A286516D5EA45BBD4A48CE64C43
5497EFE30F0C51C5CD25C5C2CBB545FF4A2D6E71457B516CF74DEB2D075025A1
5496E42772AE35DD836A27847793C804BA8F97E9582090794B99F1628A252BB2
937A280CB489A8D4C9ED06EAFDC7624E74F0470AD7B094035B9A8E414370A5CF
F7D9123A70DBDC1A514D455BDD3E216F728D89D06EA5960EEAFFA4BD72325D51
23A91D30C8DE870B14C732C9336099EDDAF556BD6B97DB43DACF1B88468AB534
FA36F070EF946A608766C4424D9603931FD9A7996B6C0DB5F2632126C001C236
702909918C89EE934DCBEDB8BBE36315E4147A1FA2C60ABF2A1AC4C2E4DB6571
9A0363DE59AAED1196A05CA685947A2F28A8B9BFB826B7D5B311D0A49592F9EA
787C014FF71A77BC5B82698E4D1BFDAC343C31DEFA8479890D6AB614FCA9FF17
924B6F0B44397BE13DAD407F880B6B1C2BA857DC545E00F6C3710C7464FCC72C
C846CCA3FD911D0F5E45AD26ADDA935A73E18504C4B300F40439C815FE9A0D6A
B575A0172DB724600C77D423E38B7D280A9CF8D5BFA77AC3B48D4153EDED94E0
B4221B343D6D392053084F17E7726B82A6575172AC6759B875A2AAE5033E8E13
EC78CCC37831BAE3F132F8AE3AC5BA28C726211915F9448C44D89F32A2ECD24E
1C90D40A867AD80C92BF85B3CD763CA07E7DB9DDECCAC684FD09F3579A8C1E5A
BDDF98C6E333DD05B0A2AC1596FB208C3A9D5222003A87B6A6EFFBA4DF336E25
21A0556756E2524F347BC1D76D13A4ECA2771CB4D5A4880D6B9A697C461ABB55
6C0ACD8EA0F86235AD9398D2286A7340AC83605B885E84EBB34D419A10FDD76F
8827FBFCDF4F024522DE573C98B0598354CE9DBFE1AE36DDBFCBAB86410A9250
A182D3C07231A6AAD9ACB4187308CBD2387B2EE0DD970AC391E7164BD8745298
3EB4AF15CE203DC6C75B216C4084F9E66D917CE2CC46CE18C3988C8D427F35C1
C36A8D730D7AA4D59758523EFC22B95132D7D3ACFB7CF88B597F604B5C36465A
A2947CBC87138DA0B300AA3A998A0A9B845B236651AD4B31D4BED58C17846DE0
25C1ECA778EA80C9FEE684E5FC47B8C070763B7C9F061DA8132A66FD0E8177B9
BDFCDC6D7ECF9576B42AABD5CFD3E2FB855CAF102124E2B7171A88318FB6B39B
F2040284C54C48F7F3BDD4A848B99AA372FAD830DE533D42683EF0456C3A0D74
E8EFF35D7DB2D065E1AA14A34516BFD002FE02904D82B436E5BC6F706E0A5786
8F3AEA2DDF4471798CB2BEFEA90D79785E058B61290D596559917FB066DA3B80
DFDC1D4A49FD15D7B59150B130B906E648AE0381C52A1E6D7F3FECD591300CBA
D5A21C3FE284FB598FE53D03025892B6DC81966BEBA206263D11F3C1C69EA9B1
08257AEAC4F506E0274D0AB16E1EE3D6DAD9A06569FD4EEE40C516ACD809E760
867977BA7ABB371B30CC350A005E4C58B5FF90F4C78CF92E1AC245F6E924D719
F0D42D3059DBA18A004CA5905715353EBF1A1A9EC3BF9850B1F5DF3173CE039A
9B9DF41F4F5B3640FEE2BE932510FE68DE87995A618DDEC1FA2F733B3F2CD4F4
C77C6C64C26D4C23BC242D463CBA8C2A0EE0197FC50698DD8477920F91850945
2B0FFB5095F9088A8DC821AFAD335BEFBC695F2746A01CF467643FCDE38253B7
E0D3E8863B2161664E80C133653C769B773E687147530F269AC5F555FC819683
7AD7B53179A5B0BB86729916A8A6F0E9C8F90A93AAA8A2C57AEDCC27A3E5A245
B091707F4B4C12F6FF094944ACD605E6F19709D2A7FD03E02542CD6C109F1F1A
8E9E4B5BA2446229B15084600D195236BC1560661AA96AD20D39E7D640105F38
1AF27A3F8259CF20B1959F884245656DE4B6A54E3E5A33C8C4BD07E26EF964BA
42AF2EA6F256197AD8EE1F44A32C81C2F455F1EC8533D46B6DBF3263E488A233
96BF06D6758BA195FDF57A2CB8BC7C173E04AA86125527688023B4B5B33BE92A
0310DD612A2B3E05D5BB84F8021AD2F25A5876F649E4B48C13A8FAE3B321EF1D
414161D2D3F448400674EAE66705575B5AF01496892EB69F783F43DC60A7EF3B
7636F9DFBB6E09768DA2FE6850B732914D25ECBE37E0E37118C5C4C156A5A8D4
A3B0344600559C88E400E64CBF535F8A9FC196979C946F900ED54B21A9B303CB
BBD7FF7DD92DE311A9C1D285F15893E8346BE0AC571C21236336E3BE132254CD
A089996A44B5A20D4BE80F3E6E2CA99743C530342CDF7EEBCDF11BFE38A7AF80
ED7761878410A0FFD1FF8879D537D25FB79D71BBA3F4F48079FC8AA22BB75B05
774BD821C3C9D905FF68678C2BC016B1C259922E2BB4E4907808C003218EC0FD
5DDBA32693D4ACCD03982615563EDE73605E33B1B0E007AABB078DDDDA14F7D1
C88954279E5FBEFFD8BC8D5DD424FFE364428BDCD23FACA93D04571D38A44E32
E3745195F2CA95993C9FC3C8FE822A6AADEC5297A293C02937B24E90603D3663
6F5B2306CA1DCAC207A71454ED00315A3D2A0549DA1A31FDC7D428F670236F6E
98335E02EB4C8198B4F567B9199B762F31F21E6D1D548CA1024917618240C719
2AE35A9D55EA04C24255E66ECFE43C6434AF12D1ECD718BE4E606081A1065199
112680DFDF30F8EE55412B5FCB35CCF793B53CDCE581B6A2374CAA6DB9B0B901
CC804F0A10874FCD812D449CA5632EEF618E6B6CECE06862048668B0BCD20A59
239032023BFC05FA8308A8F56A6331825F1372C73C303A4AFE5BE076D56E4864
7905DC47D205BECA61AD34663704C33DE7810F15E51C397D3A6220A21D3A2723
D77016F982248B426A9B6058AB15F8F54713C48F34E6654EDB7384A8CEB6AD36
3612001817185E95A7C0FECAC2B864928B6B817E165D37A68E599BEE801DEB21
5AA717555FCC0156DF5A5044A4AA5E80312EE695210E5015DECBBD1CFAFC53CF
9BBD35E7FBBD5A32BA13F01AD5ABE4355D50A2D5AA8B5252CEEF8AE58083EA8E
D9DDD91195DC88F343C0D47AB26795572241CA4A3F4DD9B7332A5DF14A55D1C8
3A3822A21C63CE90EE04B3E46F6E109C819709EE7CAF72194C36192E5779DFEB
A746310936B0BFD28142BFD50CA5E2DB14A9C2E68F598382DBDFDB229F242848
E744755965EC306ABD8035302ACE9F88A1DAFF1C09565BCB853F9AF629DA7E63
8C3346BB7DA150836C74311CF48A174E63E97A47825AA81FF398A34A6EE9E6DA
9BC74BEDA6AF0524CC5CA30DB787E8F12507F7B8971FDC4E6E61DCA0A26438C1
234A5E123A0C427D588B3B4DEC825608601B3D068B1F4CFE595E725CE1343CD2
54E7B0F0F7F02996F048A31C4CABDC34534A6E029A414E2D38F1A3425B08D2EA
D3ED4C895A608E7FAAC01FC9598E9B30D958E5EB58E9ED97F2CB66518F978EC2
CD94A95DB4E7FE64D8CB2208172728FB08345E53B06EED2DD82B9D9F3AAFF216
1809A2D6892FACA4D1ABB9D7F23B4654B265ADBE5929123CB52E90524F6E1F40
59C474F61B9F5CB3943B9D00568942AB2D85E1224DC8CE640D0A429C5A168FB9
5F189F5EC661FF919BEB09C956D40B0F99B5DB8B72E965FC0D43B20B8B8DE404
1464B803E3EB1DE037627307B3C3BC8B251DCC59D705A0D83ED2226C5BCE11DC
A0359AEEB798E2E8BBB30B28683335AB8D2DAF410A24C23DF65B879230A547E5
3FDABD00E67B10180F026122DC3FF4F6F259B8E9F871FEC6431082E697A4B8E7
DF43462AB867281E5AE7AEF68D83CA84FF2A2FB18CDC6708D9817386472C80FB
3F19D51209F745D54EB054F8335F55C9A9E0E4577DA0EAD2428EBC3518950F8F
75976D0C6C3AFCCCF206B2B60A271B585DF3C3331907ACBFB8A1E67B975830B9
E88A453ECEEFD638326DC402C3D7E4016ECACDDC73FFB5680ECEE8115B18AB8B
FDBB49FD88D259C87BABAFAA5E72CFDAEDEA14B7F604A66F820DBC1D7C6F186B
84CF1DFDBBD7C58015B37472ED7E9B572AA9E06839D169AB3F174F9D68CC188F
215FD9442C290FABA45607983B2A476965445B33C16B928D964304E9705A3DE3
2D75A6F8C76929BF56986B596B99B94253BD694EBD2FC3104E28F1B90947B03D
FEE967A567DC7C4A16D1935B12FDCD656ABD621A93EEFA839FCC6406FFC92F53
3C82060040611396581F1A77DBFF89CF934BFB600F58C43EEBF6DE56E8E94673
3F25DFE1B6435230D8FD3DD7A12E6590B9E63BE444E65664EC52070597073759
A489B30F12A85C054544F72290D99B3420287AC145040CD32DA373A72D8F1326
783358C209128DA54A7E6371EADDEB86747C9A89292FE52CA2F60CE7A8EDD72F
37D55A4BA4FE875F31DBE1FC4705838E516B1B40215988F4FB6DF3306F4195D3
5DDF81018CFDE16ACFB9EAA482D1A8510092BD01240F732E1E051A8B3F494F89
8277C0AC298D9DB49E059CBBAC66DCB62E414E8637EFB43381D43711DE009A5A
66150FBC9E046E5C67C0B1A7812DBB3EAD64425E2101A2AAD9B6DCAD1CE78D28
2F9016DCA0602D46705A9C77B527B2D0ADD70E4A83479A1446D42290F62CFE0F
83B4001D7E70AFD470BCC4BBE8F5F6F027AE6EF8A1D771165892598B0748B26C
93814FC409DE36BDFB17727D2AF7CC179189AE483B74064D2F2DCD1DEDCD3C5C
8AA13FE4780EB87DD9A66422C5E472D5998FCA85D169559F0E85CFE236877F16
943C6E16A94A90AB75056859206FB59C264E9CDFB2C964687DD088795C8B791E
032CA6E0258504B3E62F05D21A6CF168633066030F183315AFF37CA5766916BD
B07F514119D363B0AD9E9C714723F6C0292CBDE0538984EDC709FD2051B7318C
9516C713ED106573674F36D31B8AC6F49088DAEED56150911D3475543C5D96A7
6FCB6F8A806E061403C4ACB7DC4A3868647B83EF5B459D8A3B24AA15B2D18D9E
37C681626A87E271F7CFCFB62238DB0926B0A8BF6FBC041D068F2BC46B30A03F
E5500D46A995A5EE8D9D7099A5D74B7B7666DE49D6EC3AB6941F03490DB9BAC7
34FF4093F7E310702015F5B63C430080B7C4C05DE9D811FF6DB8F53187D0F74F
11ACEDC7755659382DBBAC369ACD699F7AEB86DC98EA7FD3D9647BAE11CF12DF
F092B3CFBC34234AEDF8EADEEFB818DD50433CD02A64751BBAF49D0451A930E9
7F6E2FF49AAB53CEACC461009A5480501625A7985C65130AB438C06EE67726F2
0C0C8B8C88ABA5D2A333972193DE3F5C1A5EEF3F2EFB968EFE3496F7739B7FC6
28FCDB929D94565781BB77FF203C063B9F950A0F88545606411D158CDC22F90A
0DD78F65DA6EA2C3B2432CCB2032EAF44C1B3D6754A7C3FE5B9AF8D6A281B1F6
B9E2B073A791E325AB358AB29FEEB045AC90C9EB324C52F2D5209525947CFBD1
D90A82EEF9C0C673F11A18DA71DDA5C4F4D6E5435B0F028E7BFE3F0882B3F9E6
8748A4628EC390CE7BA1E3D31C3E9E434E2E44E7A83AE34D07CCD9B7B8A028E9
038BC8621836C08237293BA07A197CA411B133F0B99A05EBF832C4F4B925A203
1B4749456C3B23B2B78878A3F3D61467DFC393AD179441058296B4C087366869
B857FAE577672626C76849D337EEF1E8499447E2EE4E535031B8BF2B8673FD3B
704C561DE0ACAA6B4D82E60BC67209A354D963AFC63B992AEFD8F08ED56490BA
D708529829F39B0E7DF2794BEFDC96EA81EE58EE796C5083512B168BCF1ED1E1
CA07C4BB773119AB244320C7B204597577BFF468C6F8F9A8245CC0A3025CE243
1E28C32D73F35CEB9BCA1C35E372D4106FC0C276CE3480EE51EAF284D749B99B
CE670CFE23D1DAEA1B36D3DF3B4787F5CE0C97AA3D34B6AC522AEF8D006DAE78
25C584A613FACF3B7DF58D45D1A5322C1051A03A7907A725B7F1DFDD0926ECCA
D6D045475206CB2889A99B4856E3686A6DB5A46287612F12ADBAB288055BDCB3
F9D8D79715324D3ABA38C1B0AC9E7EF33DBC3C7CA4A4DDBF70C062A452062FE2
784DA04324F101692187D66B2A42D101517190C239125D1FE8AF1E4E777C3512
5B7AA8FF4E920CC6254D15D2AEE6A1DFF768E17C0983FF7ABEF51CB11F1580B2
5CBA678F1F7C48A7FD83662EE051A1FBF646E4AD7E58BE7919A2D97E219B4D61
87F50D371B913841BA6C7EA35BC5583C89759D88CA1554900F4AD340E306763B
B868A7BDBB2A3864A393984560EDB711CE055C29513F6BEE30A0B65BB8F0EB25
49371A0AECA84ECE00339C5C2E49CBEAFFE70697C6B527CEFEA9DCF116DDA6FE
CDD5E11304EAE73EBF97CB2D5E99B465788F8DCD4EDB5B5C9D696815F5632BB8
468C530A52F09C1F82FB8244F0A0631A5F3CD9235703F263A334F5AE1117D4AD
A03CB2AFBE3095EC410EDA65D11E8596CE8CC8967E1AEB92F2FA97FFE5F9C9C7
E31FB75C3E973F69ECEDACCEAA68AAFC75D4B2CFBD0FB4DE3309D2756F5F7AB7
394DC5D0408E3D527131FEB6F88BAB7FA82E77EFC996B367BB79E69831DD1212
5FB1C7D45866F2F39AADDD2122E2572DED5436471E010406B1E6FB872105F499
6F718DB031DCF50F53B5BC2DC8046D2D19C8EFD84BBCF7857081D2B571F1196B
C610F9C6C6654897BB2D9147E5D3B31770C06819C8AD137EC34FDF41F6EE049B
C37F26BC612E1A75953CC14D73E0AE25E73862A77674C9E9886B198B09B0FFFC
95F56114ED2C401CAE4797DBAAEADA880EED34399BB110596807F95839ECD72F
E53D80C30B31692E846B620507F48F326512EFE1B93D0A7103A1496CA2BD76BF
861DCF2ECA6CFE2AEB28AB406DD16C34DCB5DA798010F76FBF661FCA202C6299
55FFEC45FBCDEA39CB068BCA45AD5AC2F89B38D7C875E95DF937A7DB8545000C
D669E611F6E765F21458005D7692BFAE1BB7F29E6B4E27F0B5CC539DB396F429
D6F6CA6596652BC881A4458578DF56899AF7CAEBF5D018F996099EE5C6F4E05D
6C6B02AA094CA980195A744C5C3A49C2448562ED00E192271986D5D2C77B6DD1
8EF8ACA4B80258DE5E916E9A013B144DA04997F2D0BEE89779F803E3C9F6D68C
D9DB831F91D29A5B3F5C8723F594259D7C9EF31949127B569F7086DED981849F
58048A1B69142DEE95CBD856E4A689C3C3507FAC410A4FE9566A288B38202630
6F91514C9CC0C1F0A9EE6D9E5C61CFFADC53835447006BFC6631A27F331AB1D4
DE5374A7A8509A52DE1F05C33D1776B15519D94ACA804D09354D45A5DCBDE532
C9857825C183D7976F4B748703139A16C5104150CF818BAE6C8C384E0870F0EB
F5ADBF86CBD8298AB199F109FE4632AE956E0E79F1238B178A9A51B000929DDC
866FA2BF01866DDBB2E9D14C4B3ED49E7CA3E139BDB604E2C14E6DAFF8BD7931
F7F51C3A0CD7B966763DE87B605BBA3AE536BD6FC6A9D2BD271A280EA96E2B13
2DF6D39F80BBECAECA4F3AC8A66D2ED4551810F9CD3C55E227BF0DDC5513D8D0
575AA288D28D004E98C8F09A8D43210D4C26ED59DEE755D0ADA383BC3E3DC359
2D78E989F47D448DBA0D9D7D39B03D2D12AA61485310EA9A9B88EA924090D1CB
FC4DCF9683F2732FFB474E82F3DF2E1D79D46F75FF0DA2ABC5EF1970F19A62E8
7168ACEF666384F225078B3AE4A7D1860345F16D91D47349E0123AFB9FC61814
B14C93F707D295250FD36ECFB7111BEAC0A5DE4ACCF8898513FA22C8FE583A08
7E9FB56A541927D8E92CC112984C2ED0A310F71A138301219DCD52B45AA7518C
66DC86B4DF6D6112200471279F53D34BBF58D467514988BEF2B66DAC806B1E9A
BC6283F05D24BF9F34237CFEABCAA0914FF8C156F23F50C9AEEB43F803D5AD9B
4A2D17E88826E1EB175929A360FAE8A0872E2C813A1015427AD5372F6AA8E593
6FDA267BDEEA31E7307C410DC9BF548AADB5ADF11D5DE9D0FF7C6DD203E1E2F6
41794199C654AEAC3EED26D57BC8B2BDB0B3CE84F1CF16D558E87828776DC0CA
C48CF30C85EC87834E93A7388209654AD0B8FDEC1561421724655C6CD1860474
6D82C223D9F3DAC15C6D8F36C3424928B688A4653D73C8A0024A084936579B83
B57D4F5C0F9C905370DE40BA9A55AAF85C8D2E3C3F0D16D74FF032F91FEB79DC
69A1F734983F8C116E7C9E67379F2F4DFAF2BF405301ECEB77AC769A21C9A6FC
27A75DB4652BE28D58506C041C0C66287DACAC1FB22EB66F90EC3BED8CA67200
E10EDACDFB9FF7A394B908DA2C20E378058C59115974809C7E949C1898EC97A7
A6A8D1D2D813AB436AEF8CF19F92BEAA8A513279A2F8B68920272D97C7103D8D
8AE1C56554EF70500AE0442B7F01DA56A015DE372ACCDDA4004524C5D27F66E3
0BAD22992ABE352312A88D2E6EC2BF39388AC0751FDFAE2330DAC1E1BC9061A0
DBA361FA7B054A18304354921C79F575F90AC584C0C44F637FB2875040061417
CF924ACF52AB80EF33C6102BF99A3DF0153E0EC02A5C7E65E2FDF8E5BCBD0AF2
97CDEE3966131066F7ADCAAA2F8CAAEBFD84A70D972218184F052E8F4D0CC070
19D339591111756F4CFC6289BFC5702BDB5DA5484396B0025D10F32B3053445B
68687E62AB58DB15CFCEE42D2E1F7EA56F4BC449DACCBABF3334882736C441BC
F3FA2075E07F302102344F82DB94F4DA751DBA42440D81C64C56F2706B029E15
98A8295BF45813376DDA3ADEC12F795B6B3A3E97E63BB68D91BD5C8C1E430252
9829F39B0E7DF2794BEFDC96EA829D866744BE5E5F709D379E31A7CE8E5023FF
E7D6B543B1CA63ACCBCF2673F7190951C5850D0A49580822DAA2148CDCD13B00
F96AE2D5574FE761D83A482E959895287EC820F2AABD2C55B74280C65F7495F3
3CA412D0A48F773034EA57481F43E4FC476647EE05D49409CD3C2DE0CF07829B
89C59659964D3DF39CBA5B4156D8DB312AC8AA4208BDAC99F4944FA81CD4CB5B
B003C54706B5E9C46E89A888C06F79A527CEC0A3F399965AB82C2026771A9F7B
2A7D03D7E5AF7951EBC6D667B74149776209B1C9C38746DD543C5E8B3AC56F75
8F1264209486B3CFFA939E804325257168FBF2A1E338BEE383BCB280DA21FE10
A38A4E37D4F7856F481E256371366908726CE31F8E040A1570F91DBF8F60BFD7
E97BF4AEC7CCD0268F14842D160620AAF4FE98A99664195A920FC239F97E12B1
FC7B16CEF082F0FF1D9C196F9E2B9DE1F90430CBFAB7F6DC7DE6878DC968928F
CD64807E15D25C6F701533C985B5737450A51A3829D1F779DE999423C40171A0
6BD70914100C2DFFAA11B149ED60FFD0C08B8C765496C224E033DC8424D4EBBA
7C5FCA028A3AF5285EEB4D22E5D73513DA588F47FF9725DFD87059394C09E57B
DBA35C019999A83A21ED514AD4FAB64A08537277D369B625ED1FE7CB5B5EB60B
278CBEA6C7619F725025B734F456170D431774AEA9CA897AC54A3FD2B3196E8E
42CA1097D44DCE78FD29960EC0CB8CF9077E7E1ABBC4E7C64BA8F67F4CD9C123
3258110FBCF4AB71BDBBE63A7C5D00F4F85B5245D2D15DA5EDEB4B417A21BFDD
6FDA2403822FF582447380AF8E942C0D2D1ABAC018ECBA37555B89A0C578162E
7D1BA1FD1D174E18A7009C0CDFF03D5CF38625678142AEA8181CE2A33E8E6C91
3C8815516FB1FC88D6424727F622FD72228AC15930C47EED1B247645EDB0EFCE
94A6AC6C9976F3EA7FB80F21096ED5F8A3F7E7D9AF9ED628E7D712DEC183BD31
695A11CC6E19410C54409726CB0B2B4D6D618FE59DC345A4942B81B6F2B716DE
9C73EB3A28648E7E11E8DC3D8A6F1DFC6E3B79ECC2966E00489FF7BF39C9E079
EF1B2530C78F7B3522C8B4B2E7DC515E401D4A4DCFA5FC92B84085E0B7E34AD5
D2EB73AAB8FFB634CDE1242B732B6E7170CDCA6C05A654B9030D6C540CA1868B
AE8E9AE55A110CC62945BFF28B315732487403B7D07EE3C610EED767BEB2DC6E
2357F74619730C97F5486B955ACC965ABE961C05F527AB6AA16C66130A00F390
EAC371D536EF4695B6CA57316FACBB078DDDDA14F7D1C88954279E5FBB6B883F
2B6B2C5D6E4B3281145BE61D1F70D8AB0F8853617D0469AB4F2695B5C8D55795
91D564B5F148C8933DAF38098846BCB763D05C712EC8933F327DAD6D778320D0
8F9F204F32D91B8E421BFBBBE7EEBD2D0C6AD62D0BE7CB9A8D3EA5B74C3DD375
41E346A0CC3D90EDC6C9D0C2AD47B679838CD6D0937E837F0AE4D1D84EF61A82
20EB2EC57DF2ED870B34072F209C3C163328392B5F3855C290E966930B9CF956
33C51AEC6B7D428899AAB971ECB356584BDB706FAD28430DA36273B72CE7D233
2731F4B3F7EF5B11150FE9BC8E13F77EE258154973C91A067183AB75DD9CDC72
57A831D99BED9E43439B6BB6F84053A2DAEC61D79DBED8E55AADAE62ECEF5F07
88E1E32BAD8DB5E67BF9EF6CC52478C41AC048CD00F5B65AE9C8560FED002FCD
E3331F077EF71245D6A1C17D3FDCDBAA019916303832B169786F2D749F104792
8F7425338B7051BA543E4C0606D37D3D9FDE3C4C8453B16D2D70509F138331B4
11642A472DBDC46F556B460D04EEAC691DE58485412242DEF5C02C91F04834B8
BD54150788EEFE824B0BB25B007EEC19E9DD684658887CD6CCFE4500C9A427CD
A49769F27E5747C2D52CBE9DA0CA518BB883B4550C5B63ABBB0B97BEA98F66DD
FAE3BF71A5FD30020E5049E4CE27842C5C2B88C96F84D2D1AD8A1635DC55BFC7
6826BE1AC3AAE071B00905648F1DF7416A7FE7063A503CDCF91DF1D0D3B92D8C
E067C5FA2D25595969EB32227A2935BEB5B4352360C578381BA3ACDDBA251D50
49D278C4CC00FBB14C0DCAA264EEB872643701E33364AF4EB9E3ABC1069A9A90
8FB01408CF652612E409390142BEA3D78B9C697A59927A2437B4217A00A2D1EE
30390BF2C74C81CACCD455A6604FB505DD58D7F14B4C5C5DC52F371FA6569FB8
D2AA1E87F540562AA3AA092FAA20A211D4684B703BBB219E5FFE7400A9DC725A
DA62706D49CDD0051202DDA9C23EECDA8A08DFEB68B11CDD19EF2D7771791464
3B71607DB026717233C2074A186ACAEC19BD65D6B0794F9E330B5F9F4555338B
D388B0E1F08B964685AF85835A0CFE1798D29FA481A0975113F833A1DB1D596B
AC2ADFD006890435415A4755E0AABE2DC95CBED32A02B91D339300444134BC96
FD941F64D4728579B9FB570BB1A0331C8B44C75D9E78062E3FB986410A925051
249771EB1D69C39DB28CADBD87AC2C5136BEC173DBD9F110CEE18BAA0C002271
B9B73BA27E1295668DD0484F8C7A630BD4305A4BB961A535B556426604A6991E
ABB2882B51E8DECD0B332DE32AC73E35FCA3D8B19A87F344A481438CA22336FA
907458B67DB7918B8231A1E4DB4B8B2CDB895125F10E5F1A4DE0F85653A3B131
69C5322321B6F692850AC62C48E1367FA2063805E2671EF952C1654CFC91C43D
A89EBE85CF7C674C31AF13FEC087430B481D5BCEFFFC5B2C54A55AA658E6167F
FD5603B9AA5B3A4EEAFDBA2E917E0AAECB6F86A942729499699142AA4684167F
7E934AC46E268ED7A0718D44E9D86E6F8B5B03068010326F502DCD664B2D7701
D0E726598B0F9E10AFE5B3FC8B92B37E736BBFA3E8112B67C5D4604C7D763626
A7494944DBC6BD6B8F8DD4A39294FB7989B04C5225834F2E921D2551C552951D
A722DC4C2E53BFDE5A28210BA244512C22D9BCF0FA355B428482D66A8180D3E2
5CD43BECBD46E339E95158DBA2BD4B409C07DCEE33573CE3215355BD24CFA4D9
13AFB1BD9BFCF14236A4113C3313CC1DBD690889023A437A1CCEF030FAFDEFA9
CDDBC63BE7F90DBE639D939C419BCC6182DF2C50C979335D613A9F845781964D
129797D585A371E90C500A09579E655D3AF67E58EE6B6663152868C326F2201C
A0F15E027D58C0F6FEA6D19D0A68D055092DE38AABB8924626A31136A8205B03
0DE99B45795C4D2C87DE9152171835C6618E9B101480AACDF9F5A7EF80169254
DC034E6E92BA8B1E187C4A23B48A012C069ECD198DD17BA46DFCAA7DD5980ED1
DF6EC87EB89B0D6A68AA0F0890BE5FFA12988B3C9C57908F020BEDF2FA30838F
6E008C0A8FFDD59E1982CEA0684169412B72CC0393C551E0C08FA189A4BAACB0
B978A58EDE8E9E34957DD7DB8FBEBAB47D638DEDB5748519DFEB658FCC5384DD
AC234B3A29D8E94F24B6BB13E6A3642DAE6B3AE9140BEC5D5736A79D24954346
C854C033A1BBEAC0D4676CDC7D3BBF3B641D0A1DE0F553FE1D4060AFF6E11319
05DBFC3E6E44726E81B17A1D664FF161F38842E48181AA1745AED6182C7CDD6C
9A899394FF19037D8A673AA4444159EBCAD841B07FF8A261D42541141BE9D366
02CE575D754852757324E31AB358F87A07B6BFCEC27CB57E04EED09B48D1CD1A
4022C2A49F90933AAA8027898B9855C210A6136AEF0CA73FC96186D215F358ED
52B1FA4554634B2629A939A9EC6CF2B247E4F760C53D476745BB03148727CD06
EEB94D65752431F54A7B7F6F52E57B8AD1EE404AB21BC4948675227B3C40E10D
5F2D6C5B809DA7D50E96B1EB88297CC977864EDFDECE3F75D7B6653DA44C4875
F78D66B507A7ED129259564B2FB2D3ADE2358D3A84254A1E5BBCCDA14C4B4EA6
7E4CA87BF05A5D377358487A87D3969C1B8016258F5D4147CF42873A11311635
9FA58D44489B85EE971B8123670DE14E716A2A9F152DAAA2E155A8AA9DA41974
E75AF421935A29C98D586F50BEEBEA3B2515FE405FB0BBAA2C3C4A6F9353D385
F3E09AC7D282A1A38E448CC5909285BBE76DA6EA7C92B85478A1B3CC2A8F750C
F9D26528CB93D771B8287CB37FFCFCDB8CDC24DFF733D398CB76F63CE67048E1
2CA29E5D1A18AFED92114FB81EF1079B667C86D9B96239829EA7D5134F6F1D4B
A0F264AF303CC6D8482BAF14967453FBBBA94E923F18F34FAABA058157921133
0E4677EE8F98AAA4A1B5163186310A28EF3A9046041F20540783995F73CFDE66
E5498C93424C7C6ECA114DD4132F232AEC24E434D976F5D8F95AB256FFB82C8B
05180C49E1A92C9033790FBC010FB414BD906D3CBD1168F812E9FD7E7B8D4C5A
8B4D29A69AD0FE4AEE36DCE983BF2E8505934C97DB4AC89713FF0D683ECCE7CD
60554EE8C5DB0D6E6477DF665D719CF9CD9EF55CB2113E9DD534727E6B53A52E
7184B14138225786A33945E016345674DBF46B9770C52BF7C1E38287CB2CCCC4
B3DE9A718677BB021B3373946A495413E20B4CCF58F0043AD5D6986FD336F8F9
72CC897CF9AE67B665A09E0AE6E9AC3A13454FAC6C35E6223753B16A785AF0FA
FD11396937DD289E60651AE831168CF2F9F9AF908C75AA6655AB970C2E6236A2
6335BDA1ADE6F682C2DAE1B08D2027592419A1C65AAFD32B2D13FE6E9271771A
7351334162022D8E74D6A0B5ADF757EEA5A683094DCA8C905B6729EF181E6DA2
ECB189192AE6D23B32B0B1F1F5AB538AA750317B5EC5BBF89679B68B37F0387D
2D0C87E0647C329F0DED26A43644D1CFC63B0D1B5000123A77B69D4874F3B7B7
D91ABA6D67A0E51A56DEFB0022AF22D39F6712C3E285D2D1C61A483AC06B5E8B
7E4F6E7B56DBE6D58DD68714C7F4BCF87E50551EC9BCF643D5014B3181680317
4F6BF5BC8C324742EF2AB3C4A1E60BC6CC2DFB1976FD40CD4C72147D9F9CB907
83B3571FF88489D979EDF0D88554AABFF4B13B04D04E308983B52F89EC098BC6
CBB7B81D00A1C6699F5318CCFBDAF5A15CE71593BD2D3A834ACB9FFFFAE34615
F778BFD82B7456211AF60FD5F669112279724BCAE3B42D0CE06C0110C60FC6F2
52C9BD827F220B300DE149402EC200572BE40592142CFAFEEF46BCDC657A6663
270F4CB739E855250975ACC29CEA8C3A895367413497F13E84E933F2DE108A68
C107994133A1138C629BDCD411F89AC08092B88C664162F03CC9BED426A75282
A1D1431725700E5E552D52DD800DC5CA551E105E55F8FBBD52D3289C6F37626A
316E0D712245A067C358D14409D624BC0B3B9D2B8C04EA1F1F1D8404357D1BBF
AF5C40EE7547E5DE7E2F0FC50AAA6FCCCEA9AF97BD1556E1822D09FC028CE7B9
2199BBE83A514D9FE9920C8D74EFF9567C2699D3FBF84EAE7508885CEE09FC89
055302AB0DF4B4D37FCC4309D52088270775EB43060C930FADE7DFB4D56B301C
2F16CD9C10161D05D5CA2A5000B5AB410CB8A49507D983D782313D300C4BD573
C44B8FE892CF37708F98DB30F5E757A0353E508CD7D708F1C9AF09DF0B5AC346
C6FD7C016A9B6F4F47B6CCC9799675E47AFAE51A38781B34ED3E79D32600B035
7A56D146930A58D71DAA4D740BB71ED2BE79A1DC151A22FF7EAF05E7C206CA1D
BFD1217DD3C7D5152EECD234A25DD502181E795322780D0DDBA76D168E5BE09C
1260D979AD1893F5EBC83F8C2E6F836EB6DAA4B648449D986D71FEF0327F9A57
5AA33C4B3172B75B2E16C42FCF809A2CAD20DD09D9CA2682BBB0601E40BF2A57
305F90B8801FA1281A91E890E86A5BE5E73E055B3E347894601F70CEC3C4D57F
FBAE99D7957BDBFB3777583F6E5DD51E2F6F934C743A3DBBEA58C840A539CBE6
0997AA55F9B57208895AB166BB4D390A68EB65CF322F94AEBE28C5EF7CA665EE
AF45953490DF1A2906C822AFE8709C24C96A8B404D8CF485EEB25ABFA3597551
FFE62744F5731CE01C98FCA815E776B87FB455B484BF76F051EB6C507463771B
EA64D51132D616D2C7E5AF3B1DE9CFCA0B51592CE1149B846AD42A966F2B5F2C
4282EC5F418B652572EE75D32BF574243F002D37EF70BA276AB50BA81FA061E5
5E7E89894F861F79AD9856B446A00F979BD724C28E24046F642ADAF55928D0BB
05C1AC02CE015FAC6632F6FF013FB77F9B606E51E3E7692A716C397070D875C2
AF8795BE662C73EE7B7C3846AD494F7966B593AF9A9EBAAC04D97402B690B5C4
6C864AC24C14F14C835AD40C81AFC0FD4F3D99E722A7289E9FAE5F27A17CF4E8
08239C906E067405998AC0776FCF32EE7F2E4963F85DB377D52137DCA3F83E43
53A5513EEB5896A49D5AD9C4946A80928AF117D74328E7CE6981F4DB8351B999
BE88031E7A78C58840C5AF9B353ED18C40B98BCA5F632DBC06E117B7188421BF
C4B4B355A800853F5A471DEAE0A248531DF5581833CEAE930508788C95BA8DA7
215C15E9D5383B3C2A0877D012D3222F667D8FDD0214F5A4C429470109B944B2
361C630CEF9B2C50B3AF7ED845B27853DAF149A255BBA703CD26686064302134
20EA173CC4A27BA82C268F1A39CA61E32091E5749D197D7B972C56A0842288CF
FA520C15B0FF2C277811DDBAC232BA3B92BF7FB0FF3329E2479C7ABC1991939F
DC7C8567BF373399D30584DE643CFBCAE5E73E4C824DBE7874688AB227E013F8
20E3B9A79C30496E3FEE2A10A3D468B47DB7B2E6BF09F27587F83DEDAA7A8782
83162BF1167594066836A1281669E8BC5FE22147D97D3992A39C7BA023FC70E4
310B72750F604F3AEDD1EEB759380BB156CAC422B436D1FAAF69016E559E5EE9
4213432AB37891A3CC34CF373B6FBB78A091508D386FB0C58418DF66479C00BC
3F24D5485C7754AE2BA58F4F16768A8518674EFB1CF5C1A00716C713589964BB
A8F706E9D86DDAE2C8BF05B6F251BD8CF65C3B95BE0ECFCC9546CCA3BBB877A1
07BF3830E328E84B4E5BC7E342F3B7BD73A5B76BA417CAC8E122B09EAF5362AE
4AADD089E4A5C890ACECFE622E975557E2690121ABEDB51AB6CCF9472FA7302F
3186C22834AD73AE7D7A155D019850D3E88774D95C801A1153F8328360795D69
C5B013E4BDBFBB7AEB75CA742ECC0F00E7D62C9AE2479CF72FA44071FCEA5F40
506F294D1A5CDCE465DE2D0F81DDAC4C4112DB37D764D19369E05AB5BBC82F64
08BDBFF11B0AC809985012105493EE7DFF30EC06B77E2D8DC2CE9B81D2B1452D
6184B3B3DF54451B8D9A95C10AD7F3A40B51AB8CDB5B0209B4B6620C83B6E841
877F475C1D06BFDBB25982B34AFF25CF2441D851391E388D4549A2AA3BE3FCBB
9DE5B5CBB08788D6579375BF7E5DA47073B10E1C20D447B51676E47FA4F3865D
76573E17D0AF4AFD37E44CF036DC354072208C95A370C65EBBB0F458D930899E
4410C02C40CB9115B305F5B7593BB9B0E86A55450C52F6937CAC83F6DAA7AF9C
AAB21E22645C8DEFF5A3E589D8769932ED38C4E43C487A9E53B11538E63D126F
9BE291ECA5218B7D80C1BEFE3FF71E4E5F72CE2208AE51A2C5478D4B7DA7BE11
F5DA83BCE521C2FE8438ED078F2569AE2093B2EB62295780DD4466D8C09A0AF8
A75C0B9B9FB8C2FFE7F7DAC127C6D3AE18CF38A9ED7D083CD52CCF170B491067
9DB31653590537A9436C8D8159FF38B1F53B7E1B26211622801A0516FC3511D7
2FBF4076A3021373E59A311653654FBFF07966912A40DEEE11C0B1C537275032
E8B34C3B4D36A6A502E904B3BD1878EE35F5BABBF8EA6F84230519B19758C9AC
677C247DB1B8F82A6DAFC98D2F2799278C2ACE590D3E76F95A3C54FE2688E1DB
CDABEA0E805BD409ACF0BF96CBF0837A1BD7E4D066BF7BBAAA5411F0D3FE1291
BB0E3B8F95B629936EA2E4145D99E6064BB8872CEC380430F7C0D05F5F76F7FD
DC3B872A314EA903E464F1A8C62229237DD5E1B3C4BD3B736BA5F5A6100FD1D7
901AEE1FE33E674CA1957604DC5789F74461453333E253CDD45CA8F04BD0DAD2
06A3BCD138CD2EF56088F53E36E488F21E19A3AEE3DC6289229F259FC3DF94E3
0B306E00A67D0C2723E7BA5CD63E1ABB5267234B51578BEBE53741B36A304BD9
206186AE5BE2309B713B92AEF126282ACDB855E64E156C8497841C7C5235413E
77DE99CAF20501DB155591B813B8F73326AF31BE1B037DA6DC886537F866EE6F
4C4491F9AEC1F83C23024257510DAB1466D6DE4DB56480D0CEB362E7D7C7C87C
857FE8D140D43ED5174694826815EBAEB7CEDA6C1FD39A888C71BB56378D880A
63BA2F3521F4B7FAF6C657DCDA9193A7ABF32EC762F27551E34886D04560DAC8
E030C214058A614F31D7845E1B420C6BBAE8B8CC8930908952F0FB5B9C432B6E
339B52B5FD49FDA63E36BD7C8BBD9499BBFD68FDD3979E3244983956BC553452
EA94829737D2EA74CF5409A3D6B3DD85DA7F4C2526AB1836C815F64E4B8E68FE
7853DD4B00E088D4FDAA40640C6AA9E5F2237DD9ACDCDB5314934D7D04E2E7B2
E9CABD46A80BDB7F292585676A890DC808FB383AC3E410E5B384B3D82A391843
82B8BDD33E4494E8FC8792F87284FD1C09CE1C4A3F62CB7F68F93690DCB5D59A
4D9BFC12DC312CD813449A0E6837B01086805BD4E743C3D8A049DACC035525F5
C0E4FFDFEC3DE98C22B4E9CCAAF8EBCF84E2281282FE60BDBA3ED99F2A4A42F8
70CFC9FEF33BD0D7130FA47830B9C34FF68746B77C65F2C5B91F9B2E87E6CD6D
3FCFD59E372511C7D23CFA97F9A0ABABBAA5C840B0C1EFB4DD74C9C55FAE52FC
8B3FE923C193B6174A15B824A11C336EF591459833510029E14C8B7CC983BF4F
A3CA66A077B67A2B91909AC8D3582A94D4ACC678022467B27A66282436C9E417
8F6556F98CC65BFF783A36BADC55C5FA7185D44A2CB41E55470BD010034B1463
13C5F65910E4DEFDAFF680A6ED03A38B3AFAD2A119DD5AC6BEB8563A2FC47F3D
0BDF7405D2AF45297D42EC30EE315AAD67C6176052317A7F3623498D77D04604
D2D82FEC177A9227A8A4F74EF5D81D2784EA60A2AEBC50AE6FCEA4F5E5E85F1A
2091D033A6244D24B000A1A8237DD8607552D4A8ED349AB6D0224112AD3148DC
A7514EFA140A19D10BD4D705FAA06F952EA3B1B2BB2C429A7BC8EE5E5FDF80D3
766E2309E888FA3BF73468C9B62EE5F117F60F346F60D8A426458B1F14856A43
5C411D0FF9DADE9AC79BB986BEEB83C15A7733479FD8E22E39EF326F2E7630B5
78ADCDB2CE02F773C95615BA53CE55E614BD11BD89C3133C52FE979FBC82657C
4C9899E9A4097F07D6E75CD6E8A4C4B6F6EFB80004D39CED65D47AD21C8C7B64
4863AF5F3FFEF0C8AC8D1BC973EE78EAC090176A723C1CB7C90C1718FC1304C3
1BE7449D39FA73A3F0C05DE528BDA696EB1040BD40794EA9EEC6DCBE57F64027
C08B96052EFE7907AFC8558C02835A0AA654B7623E1CDCB5F0822DE928D103D5
9AB613BFCBCDB00E529C5FB530F6977FFB1622A7FF3E09F6BD9C73A05C259742
749E300E5243271B436F2D3EF80220F7F5CFCC2651773E75504985E1C41F1546
A3EF2D9D9CF32A3FD2E4FE96C83E11B1045B648FD2F5347F33FD5B9DA2BFCFA8
2E48E3362DA2C9B65DDE7EAEC8AB4074133B6A734D2BFB92DDE577E3E521115B
074F3572A48043E595F787611AB87A4F7394554E4CAE12E1B7BA9D9536BD95EA
A2612344766C70CBB992A3D517347FE3BB8FA31F5E298B8E7755AD35229173F6
241B2BBE19D95006AB82EEC92A2396B9C862C45C3619C9A9607CA216B506754C
DFCE9D0F6019D1B0D21475E2FF82EAFE54653C655E1CDD44FB6BB71577908DCA
224F9D6E66573F363D4B4386247CD088B88FE751F622634DC2FB2C4801F4A1A7
9267E3276752D24351A933EA3B907000C974C41884EB5E812C96CF7E997E7DD0
355DF50448C5FBC91CFB51FCFBD1ECDE9AE96CAFA07E0E955344AE35C8177C2A
842BB447FA839668F1698D08D3F1910C7145D6213D9A687F6F3B15536FB2C4BD
EAE58A1C7A97996F50459ADF05B202C4F1483F04B10544DDF4CB15653A92C33D
0482BEAA58A591740414A1FCF3E5B1A4D46218A34B53FFE4FF683F396E10B97A
76E9B2D86026316B0DC3D13DA95B0F2C2B95CD7226340EC3505F6653FECD6816
DB3450FFA69B625163B8AC6821F98C68CF3187C66EAD25F1DFB35E07A3BFEF26
C5D80790D398F2460E939B777D44A8E0E746B694779803D4E444F2A2BEA9EB30
14A75CBA9DB99C91E31A7164832EC93D0E8A644134F26E93CF38063E8A818809
6096DBB19F2F4522D2F16E160477500A46CF081C6D23F8933258459AD498A639
260D7637DF3E3D72CC1E1062996FF84A639F23DBE3B9F33DAE304DCC0C18B41D
3EA644548E01D2171ACF30C996BB42D13BFEFE8EC98E67CF0307FCF668269188
EEB635823AE1C562F0E0C9890BA4328C132C355F3264753D41A0F4576820C5B6
0EAF3E612F8E267B0237870EA7D7B1835BE0B454B9640D8356EA750332120EBE
F4C4EC14DB4FC5FD07CB0DEA6A2D7B9254C08A4AB3961E451794659B0F55C8AB
4E5D1A269E3CDE71F20FC20B4FEC4CADC56C8652F4A2DEAD4DDA125623ABD9B3
8A24D1E1C88E48BD3B1DD7E5BCD2E2AC2AD2C082867A0210A7EC97D84851A41C
3D8462AD73D0AE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2FB94AFFB60B4E1CCB4595B2318D48BCFA55780
E205ED971C0B1BEC306E18139ADBC5AEDC2AF74042342682277EB1B742E28AD9
B0FB51CD6B4FE3335061CE19C71F2DB1522B4416AA366749D499C12682855A9F
9578800DACC9F47162A8E34FEF7DE05B2BDE24EA45C5521A5C45F278AAF56607
E60872B457F2CEDFD642D6219188350856B1F6E45AB8FE20E1807771A2C8C78E
E350D342AEA003CAE47966EE4B6A33DC92C67D9A78529F835ED70B702152DC52
D908138FFEC4801C85C09FDED112B93EF7E68F06BDCC9711D7D6033B728F9136
95F1A2F4DAF08E7CEBCC6FDC810CB54204E22C49F0317379E6B45FAF5ED8A878
735E97A895F9E3481F20137FAA0B7567E02484E7635EBF14C12720025A582564
C9931DB46E01BDC256801F25694819EA9FDB956CACD1C1D18C1B6137CF5B6869
90B9D2D6E80D8D0C3C799CA40AC41C3C5F811C274F42A9F8CC178C0EF4F2964C
F5715B61599E93DFD7C12716E8C9F9526133FFB284ED0F0B6DC0ED0C743C70EA
2AE33E791BFB54C61ACC54F273399DD819E013A3D943F55A6424FD038BFD50A4
21B796CB75AFCF6E99EDA8946B78E05E891195361D05DD7726AC8204E2C98C9F
658F1C765E754609D7266EE4E6568B22D805B0186E12B9BB75AFFBEEB315F719
5F1E1FFFB8B1FE4CEBE7C9F250F58B07189B323083B4A20D995CC1D43CC2A8CB
1B958DA526DB2AE050183B69F77A375F56488A9621814FE131604F34AC303669
653C6823FBD4D1517A9A36ACE7B2E2E2213C0C65EED4B73DA07FBD5774AAFB20
AC43C596E74B0F52B7C9720E9ED02B5C5C087AE4BE33F428F3231E4491254E60
B1A29B3D1612CCAE572B540B3D0A89652067A4EAC0BBB5432B32EED6A0425C6C
FD94B09A7A018A70BC3E35C62F5FA085F3158D7F16A563705D4D9324C5DCA1C1
0321DDCA88B03E179D01C3B303C6856735D904397FA5BA912510AC23802A803D
37EA5AB43AD5580EAE6F3FD0145DD75587C6ECAE796448BE5F0F0CE29AD1F7AC
75BA998117B9086A9D333D0ABD28289B40162534E82750938543066F7E02555C
B05210953D6F2D725214730B3AB6349BE5D19D001349061E86F85E90258AC673
DC13BCE896FAC45D08EBE43E676816DBCFC51C446F7FDCCE431FD5A12CAD1DBB
96D1A8E20B38F642D54197C26130F4E1DAEF0B58644849DC7A72C8CDFB2C2611
2D44D432004DA354352C5F6503160BDBCEEE48C1BBAD05D25A7FB16C84D37A6D
2737293961F1AC4E279EEA4D1D24096A0425C6DADE08FD62A27C1CC846D0058E
66878900B1E50D2FA8AB9C41181A1A47EA56AEE9CB455AF0D099BA21501DA475
AE424CFF1CB4D124C5A97727D768D51066B5F39980E77501300DC2D822ED737B
6553A158FC1D07BBE3C8AABF59FECBA82BDEBADDA8F070E70B28F80FBB480BDD
CCBDA8B72B332F537424FF5BBAA90A0BE916B5F12FF470C20FB9BFCC954A4C7D
ADC39EB6764B4F82E628E623D3526457B108B1B05ED7F3EE7CEC387D36986A3E
CA1856E577D8AC39E83E5671740DEF45A15736561BBE6293E64020A72A21CCB3
7E6874F1D4BE7271FE7D9F05395B076CE489C96EA3107B6E71E3F95D8E47E5BA
1525BD9CD5004F405BB970B21DDD1DCBB579D9636B62813E19ACB96FA7D67EDE
445845E8891E0BA36FCB0C1430EE0B55F31964091976723D887E107C253CF647
C5311CA723188D8BD8C456B3D25264E54B411296A5A8B258CCB554666EB61847
7431E8919B9F5A50BC2795939D9BEE749DE172052D4F8399D067B489D07D7BF3
BA998726FCFA82A5265E167225E8B8F2F41C0344F32EFC6BA0F6E0DF4814EF7F
439A96ACC0379E6D2F308B5499BE053BDD8BB304DD76E084983EC622B4B68F42
B1618DDF827CEA206ACFCD91C071AB0809DFCDD6A51B561A6C001846E41606DD
510D2C7D0BE9DD189F3C2C70FA4294B6FA99A6D30EDE8AF0B310FD9A0FE7A7C1
1B2440A0CA3622582D9833C02C797491CA4AC0FA3EAC58E1F3377F7956E4894E
2DA8C65E12F2561590D9F2EAD24718C154618880B4A972C8A64E2144A435883E
2F8756D5937DAACEA84CEB22C8FE583AFA78AACF2BC6B3163335A31715430C85
52D44A39F14C615938CC497A100EF03C83F06971D7AAD27B4111C989BB05489A
B4A9E8E024E6C703F07F09F172B8564DA3590A8A207923FF154B85F9782D702F
011489F7004568E3A0FD9496C05FE3C5B162BDD281F719A6F2B43C19E99524F2
45A19F0BF0409B44C2298C76871F1F34DA0E2BA42386CCF555A4AC642DDB69B0
316E7A0061684872862891F2C53A0CEFB9EC02B186B8DEF079F8AEC452E9DA46
8B5307F6A916E3F133E32221BA47685A24C8F69022D26DAE760C590545856108
F8E19EF58EB29AC26C9BE91A6CD2229251AB44D4212927BA9CA054141F8C564B
0685BA870F416E1981DBC669B9C02E0B8A6DBFCECE5953C9C8467EB368983002
9947484CE0C36ED5FAFC48E802A2AC1D7B866192C0A3D63AB7D27CC05C769074
1C8333B9F97A3CBC3367DABC8F8E86E7ED3B55359CCCD52BC8191D69FD489E5A
3830CDCF5B4A73E891A9235CAF337CCADCBA5BBF1E7DB7688110E7FFDF23F47C
8B20A714F9F644E222F4F23619BDC3F30087BC0ED3CA5125E056D1BD0B7F4836
A9BDB94221EF653D3B1AAA207044605865A09EAD831F25BF86F23674F029DD64
C0F7BBE3407BAEADEE68B49A54BF0257C1C671FAB6E1F7F689DE6921B73B357B
D8FC5BDC305905538C9D8D83343E8A3E7ED6A207DF2A4C835A4D8F6E5448B0F0
17A05B3803FF3ECC72E107661E5A0CF705D75FD08ECDF1318E79C9F29B8793F7
52043601D1A8761C41CD74170F62339B63188B3C435DCD5EAD0902B9C6A3E0B2
C830D44FC534EC6FD7428B5C6434FFEF6D6D31287BDFA7E013B89C48C904C01B
B0868A5AC34F412F98F740D8BBD3FC3D917A786149DE48B51FA8969CC6D9A4CB
B96C99BA3EE5EB69F69BA76FCBA13D1E562A3BD6E72C1F45FC45FFCDDA0FB502
3F64DC36443E8A29F68619E8ABE725B3A7FF4A548B13BBBAC6AD4AD2D77D9AAD
19948F0086E62D23D91867BD212B75711504F69DE72A86C264E1F6FAA1EA984D
60676378701B58B10ED6E177B8DB3E67827E16CEA20E26E66FF7FAE3068468A0
96D26BA0F300658FA9CF48470309EF09261C293C686204151A8A791FE74A36DB
5925CD8F0A18E8B943A3001B9DADDD653B0A7794752D0FD36ECFB7111BEAC0A5
DE4ACCF88DDF2716AF805FD8A8B85782536B1E3F3D24BEF64CABD2248C5CF72B
FC266395746894A9791BE633B28D3530DC45094D687FEFDEA40A758449C0D93B
1DE7B605CD2D29851CC373F415339A2A90E2DED1B24FFD726EA8005B95E85446
CC93169AA043DC9DC3A192112324E56F8CD8BAD2D5C763F7F052B3A4D6BD1402
BF0E6F39861E93E8B4E0C2804CBF85E3A60ACEEA96BDE7DBE7E2EFF13DE66FE0
1F2460165E08F8E3DBE5B57B4024BF88F23217264AE7D1F7A64467131D1A1D20
E79FCDBB89810EDEC2C94D13D415C1560EC4CE4657CC787466CB6229130061A6
5818EE9CC242DA312994ADCAE422301F9D4C7DD3BB40C8D257870A18C5A46961
1D9D4D592A518E2F1CBC8B19908F90B5DFC3257B9F121EA5E9C31304ABF9385F
859FA935BE50B1CEC2BDA27746B05096F2CF38B5F68746732F2102B07DB3D968
D4553EC689B5125CA855332F3D69406E378B51AF31103D10BB4F4F81BE1864AF
F8BA316EDCF93C51E023092555066C2B026C12AC5760000F217BD847E33B80AB
5E80BCF219B5A3737E787D537F5441919F2A837D1393EB657AA3001A5FB38F86
C40B618FA651FCC4FFF0AFA050BC0E1AB8CBA5D919BD56C6F3B3A046B45B3D9F
6E88FADD8CC10E1234F44B751395227CB93B583ED36DB126F3F762ADCBCADB21
646EB89AC3FF89A5599AA471B588036FEB6243D1944C3799AF425986620B1664
229029635C383EBCE1CB7C2B074F93C0BEA63E78B26E677BF9804BD0F1969E6C
84247FD094ADFFF4CD9460C85EA5E769BC0580BC877854D66B4B0230C67883D0
26051E2F9E8817FB8E1EF293D5D7FCC28C53EA116A65563C720B8177BA68FB0D
443B719C91E6AC43491830909871863A318D7E3FE983B040661E9B7445B58EB9
8A49CE1D72D0F480A7C9E7ECC8B3B01B9B88C659BFDE32D2E68B650B62FAA0E6
9AD4AC12B09E834370ABCBD756DEA43207C063CB94BEC0017A287EE9450D593E
DDDA9B13BBA1A52756BF57C6E4367E5CE351FE8860C3CC71E16A33042E15ACDB
A483F269691069D8B35B31A742E8DB7B16895F005D0FBA343D16CC738D963AF8
FF8191BB7E1A05ED1672C9A5E207EE08535E73C64AE0A8BFB274C4D221038DD5
6C2C4A362FB5ED34A3E114BDEA9D56BF76A70C37299504AA2E0CB5105DD5ED26
3955A7C3A855481BF776A87F5EB2D25C0836B0BFD28142BFD50CA5E2DB14A9C2
E421B0D7E4036FEBD5E3BBD5963C615AAD6104AC6508CD3DAE99183A214CFA00
4F89A5555F7B3941116088DFDEE316ABB0B90E9F2A78BA6707FB205217A2FDCB
2029F2EB9E481757E46AE4CC04B1493D6BBC9280471744DFDDD7D951C6F57111
A2F1A082C93DD51289FECCF5F8F3B70574EEE16E4FCD64B1870EA9DE5458AEF9
355C26318B04CE4D39822A0BB4D0EA5778B0D747812CBED8EC4CA7A3524C0BDA
B16D74B8F8F28DF3EEA1A6355182DB6271A358CD2B0A603D6AD584ED6F3EF2D3
FCF0B2416566377F8626D35CE4C38B467ECE18A054078391772A98DBF497EA60
A50FEECB91C83BAEC39919B5F966C44C856FDADAB8AF8B511E0A709FF083B868
4906B07E70CAED2262C8D914AD834729538F77F26186B15C32F0DCB0EB88DC78
64ABC3B8F4DF2EFC2FAA08098C752DFDCA4C0F48542C269549AD368A60CD66E3
A9B91773EC51FD2D36840A68398FB360A92364C4245661621A729529B3BEB4F4
9A32CB8A92393CBF92BFD5D3AD6497203AA20F102C82B9BE4D8E4BC4C4FB7F62
7A842B2B9117E62DC57CBE3EABE92A2CA295436D84076BD9B93586FA75CEFA67
FF202F2ED74451FDF617CD4037B873684421F2843A3FA0C03A32338AA40E60B8
E13F999A8DC745DF4D00713423FF72764B7AC99ECE88D5F0FE606458D65CE680
B1C3511FC764C7448537E7372AEAB95138C8F85A0B741C24571E74ABF75AAAA9
F897B11A571FC8809B06E08263950FE2F52671C3F783C08911F10BC269C751AB
2C58EC411A765933F0DEC039DC701E8FE4FB558D29075AFDDEC81361853FC842
98A55FFC732C51A69960F313C93FB5555F3E688CB12FACBBA649C23507129FA6
DC7FAF8C238EF40D769838A4E2FBFADBF3DD497660EC7DA3B1BA22E733B3ED82
108FE391030C5423947CD089427B77323C3BC09D60F5709530FB856AE0ADD1B0
DC9E52D2F160158086B6F195AD62B913E904C32606A118378485DAAE249CD88F
991A81242201444DE0216C37B7DA12E05917EA91441A017EAA8F1F4B2BE70D93
C1D74C78B30DEC09FA2DDDFAD7999071F8A0BC1D9ABAAAA032CA6A6C6F8E07FB
C52B1FAC7AB634B0E396C87D8D4C682B137F6A85F36884B3640A23DFA6BE42AB
CBFA56724239EA5AE88B7C73FAF13FF8DD5DAF0AA2AE164475AE670FF0BE39AE
8EA4052289B1B04A5D00A1ADF89336567AD43EFE580A4E68AF10EF7A53AA29FC
34410FA9D5037B97DD53936F404CB055611ED3A531B2541FC81D6B9BDF74EF6E
320AB25C8D769D8161B2553DDACB43A101061D845166EA716102619B4FC7178C
DD5EB3A60FAB4F77634467885CF24C71571BA9F1730452A8F99C2E5104B2FE1C
2AFB62CC5A28234C71C577777B625D054537D03BC59DED43C5EF497E1C22981E
B74341E013E9681A6D7C5F778640A02847A4341F88CFC7672BDB5BA9A1041CB5
F645132D01FCA34AA14DD2BDC5F8CB71172AF217A9697B3FDA4DB77DDFB68AD4
31E418D385892B36E14079AC276D5AFA07BC5B81B419E7C202124E96BBF94242
88FA67C8C1F07E420A7545B5D84AC8E0F70C434264866624C9D5ABBCD7D9F721
50DE208706BB57DA92A25ED21C6455AB5A82266593F13D70495C57C19BB2E238
C84CE373C3BD9DEE8536A6C4DA236D422483E9C4F229D1C561DFAE825DA7ABEF
B7D2179A38B82DD4434370A5CFF7D9123A70DBDC1A514D455976FC9A30C61127
F13F57119AFB50293881A141413ECB7E4D69D2D9C00EC73685E69BFBD86B27BC
4A273072C43104F4BBDBC85AC27DF2CA6FA4F62601F29EA58CC3FCF95BCF5667
546B88A0E87A5FF076789447494C90FA09BFFFF066BCE8BE778849B98879F894
83208487CDA9009B282362B27ECF007DEE4323D0669F9306AE7395F52E2343BE
1FEFB5827212B89BC6A7396BEC782E4461387881F4ABD5FE771E97F2CE255849
6E6B074B72E3C126B01D295227F2E2305082FD5D96FB80A3059B67985A9B0421
A92E73D185B64155983624B4A462342EDC43B7551F33C7E9C2EFC5812821D417
A9C3AA45E95333373971CD93C9FDFE3BBDD14A68CE87B62CB5906948723B14D1
75945A3C89DCB80DE0D85FBFC5711049CF44B1C7CCA5CF8B0D072B07269B8992
B8B0437D272DB7C1C5F1C7C5BF588E3685A23CD46DC56B90093EA15698EB21A9
A084C3EECB1229ACFF6841A50D6E7CF8FE7488F9FFBF71C893C92249FEA30ED2
D9F2079BD96757E5CD37249AE4434E6E3D12558DF6520581C9DD9F83370A2961
6E44637E7DC22A1F0161B6017F1758983D4E8D3DC43182135C505321FA1BEBF9
13068A4B139F93DEFC6B06095CF22D3D1FA288A5C64714F6B1667B013E69B1A7
27B849B2DF536D96C58957DFCDE8D4099FA355EA6F60EAB16503D08FB97D8010
B505F83645CEDCF54A34BBE83BB75A3662C9601E1321B7C93C0B625F0315BFD1
E607FE1BEE0CFA24F39684ABB0991D20146347F5E03448350170F66DA9895783
8DDEF0AD7C4F17AA5E58D971000038D5E7BE82D8ED2688529F8CC49E6CAF8A0C
46F2EAF55693F60E383D2BC664FC69EA1CA34430E58501284F589BCC57148437
64B74738FEF9478C3CC88384C00BEE7BB25D172313ACB05A3E95CFE230D171D5
604607A124319499E41D93413B74C1BC931DFE3A63BF4F27A4B583E48F8F6642
0ABA60397BBA0772D6B60C7A140B2DE6406E5182D81CE2A83171CF2BD29C2307
4544C1630F613926A512635B2B56403246955BE6E8090355D108AAD2BA534AE1
31D2975E3F7B820380894809BD63204A82F810D4E3E5BE6082FABE2508EB3B63
4F656E97438EEA6D72FA96995130D80A8AF5EC9E27806488BC49BABE513A3E98
379FAE11D6EC22167237734060D65C1687E4D49C7720B58701308F98D16F60B7
201B996A7C66E0B2E15E8C772C3BF076B385414429C43AD6E3025E1CA7A04CA7
FB021A67C49BD73551EE33D21C568D305C6BDD6701F1AEF46211009392AA0019
A685B6A0B33736789AE4DD1FA1B5FEB230E71186C8489E82DDB0AF793AF5AC6E
FE14AFCE671A239BB45E96E0EE3EE6FAA612F4E115463FB71C01B2C65AC5DDBD
FB84D080BCB5C54357C63E1AA9CE87477942E8612B7E5AF418215014061C405E
1F86609ABDFA01075CBCA39F0911C952FE14918CDF8E88C3BAF29BC0E1AE2573
77258E81CD042F2C7D5632494F1C9DFC6926013E4240B66A9D774DF033CD012F
E02E4BD54017208CF22CB41923257203116B0160FFA5A9FCD040301CE64C1D89
8C0C6631E61DB881C337F2AD4E95ACFC86B65EC497B4599F155CB0DF32ED03DD
A8E7A138C313575624E0B68C0A3EE4F55CD03A82EF087C1000ADD778240E37FD
9286F1DDD8F08E4877E4A4499743F73607F8CA64BA5E639035B996D439E30910
7F38FEEB2FFE370EFE6F9BB7E8DE0E1881F182EEBBDE7FC661A0090BF2F5A025
D23F98662E1BA1D5036FB3F18EBA2ADCBA82B4F1F83466480BBE36E1C0C294AE
BB777174AF637B34F1CE3D8427377CA4AB2CB20F36C63ADE4871B956F4D45B31
BB1FCFAC56B0BD7E3CBAB4858A8F8FE58CADB350E8DE749FEE80F870F114FF40
10102B4387AB3ABDFD3215A143AB621FC07C3319391C9C0476FED86AA628A5A3
979AC926713FFAC8CC2F5DB2A4C3AB9DCC2AFE0B780D54AD11691AF60E851943
C1783046BBCA2774F277362287BBBE4A7B954B28230D53EF75A00DC77666B818
B121EA39688B5B5DFFD6711A601836BCFEAB7A17E4831E3C9D769900193638AF
AA1A4C966F681B0078E52766AB705F468BB626A72E6878BA4805B6BD03C5A92A
85C8266319613FB350942BC74AB503E55333DE95318B86A252F8FCA0F5E5FAB4
693500C426971884A2540043B1C4EE64CEDC583C1DEB0D925AB9B6D891539CFF
28B33E6DED307F9018D447A9F592D1ABA356F58CAF4B91AC6C1C66D3274D903B
F18579249608665EA6811F9C96DA8D547D8240DD39B82DA0D97D5BDC8A21EAFB
F5B3C5C0D5DB9D3E6FA98D207054C87778D841441C358C2FA49303BDDDE96A95
2F90DF80FCEFE43D6B22F9FB349DA718C1BACAA51F9E04836A94751621C75A6D
6066D0E23D2D1460913E0D2F499A02454DDD91B4F4FDDE9913BBF4ECFA73EB10
C1CB5C789668AAB53D8164413D23D8BDC0B62F311D604921DF699339E66CA090
FE3B8B00B67ABD90A2270FF8A490CE8586B6454E7250D2DC0B0A726977332CCC
68B94AD74DA2D2A8023CA4C3ED2D2CC5A315D0882B8FA01E81013AECD56AE907
25D1E1E2E5D0A1EC583BACF74670E38E33893E5F9977E3F8DC3A0562C47A6B64
C7A0A62A69F2B44B23ACA1B50E85DD33224DD39874699DB41CD8CB9C39E511C1
B2732F9EEA6971F0392F6C5EF1A8E07A8DA3E5CA280755346351BA52CB0A82E2
BA0754F968B4EE8E3953B72FEA2EDDA48E917935F900B92AD30A9A0760C97F97
26FAF6C0C6A035459C7765424919FB5808F074650745F3F239432C533C84D7BD
52C64E544959B43E58916A644AA592141BE5AD64AEC2E412EE5E6E07E63ACDE6
62B55A188D9D5ACE59F9353E2A665D17F4305D748B0F70D6FFB3B06D217E3EB2
1351C8BF72812C5E1F1B68A3A52672E8B0EBE6B76E576780C1621225A259A7CF
6C1B03EF8E7DC70BF2F2C0047602E7D5798B91025BC24BB53FA4BCD6B493B49F
A9FA8EFA7215188A8AF8BB2E6B5748C0D34F160FB159F332DB422FB63E9A5F66
5DC050BDF8CDA6AD307BB14C22C0652878D2D7E8F093E60D222FBC973F199099
F4E035A4454E3EAD7B37082C90504DF07E552A5BE1B9CF6E62E9596EA62C942A
8E0AC324DEB563EC3E367F8795669F0B4E446EAFE3CB12F357CC8461B3D81A1F
50D0C068871606D4E972D8DB814D81CABEC45F4E6F5C6488D4819F0675370E30
98DB18A5085721D1A099378C4DEAD4112AE569EA6F26D025F1AD7292403A2416
08CD9E5C59BCA21C205588BDD28AB7EEC89E136F000BB178B36E5C41F9608380
A4C3C799426DF7D957629295DA2E86A764A42E850F3F5EF2ED794E4F789CFE3D
B7C46926511480479F0307DD5A7B8E16D4A39A4FB2F587BE58063E5CE124B6A0
9DF39EF2497B919A4816B3586A008D953CD8007F6F85EFFAD8FD1D0104BB5E3A
0C72D3709893FFF12CAABF0D8DF26A74F7A8D5A62E85D480ED79D38E7557192C
02CEB0144F2ACEF1116137F90097A01C135EF8EFA8A4C53CFDCE9E0539A6DA20
E96C58DEB846AA6825F2A2250B0A9C4074D1A5234DBA4AD8EE33A66B1ADFF78E
CE0BA086B77EBC61E053F1D16A19DCA457CA086CC0DF3A273E8CEA0398BCCDCB
31D08249027D050C909E92544DACCABF9459BCA156EB9240C23AF5E0D73853FC
829A37A452FCB8D31411692A72FE93385CC319F1BEA96D469CC7D0E54232713E
4A001C01ADB378235140A1BC75978A0E00FD3F441A31BE630F2149B2D6016953
8821F025E8A9E19BF4798162F4B4EE15553F44AC715DF579FCB3A2AA4E1B7B86
948DE8CAAF5C15BE73F5BE65225C38E0B9D9C7AEB745AC7C3BBCF30D931B3824
F2805232A9F92A3E1254A9A2E0433F85759243F2451551A315CF727A2319B154
704F9165B1EF1146154D1B1500E4B31421FA46F000E330D632415CF2816DFB02
14A4CA30227E5F97C41B3A816BB130CBA5473EF29F4ECD69FD31EFCA185DEDF0
0E2F0A22DCC8B8EA7B18FC55EEBC2157E635E6018AEB195F99F5CC3F91CC3674
092C631DE215B22EE9C0FA967C9C9FA7D4E739C9818D6DD30C92CA794AFAC634
735F7838C98060E4D9BD6BFA8A80D07A167D108AD54601C5F9F11A12AEACDAD8
D407FE195BBD99C10C7B3C96586FA88B7346956CC308FC26DFF0D0E5F89F88C9
ECEC588F021101FBD1740F7B3ED9A79FE6FD1A55E85A6A7ED09589060FF35326
BD8683B307304D5EFEC8F31FE0116E502E847F9B9C229BCA0E4C3E813D1A1E6C
8A5814C436BFD31F487ECCD3585CE0CD283391C768E5D97297633F6CED2F1077
37F1C6B6B7F51C9BB7A95607684530F25001444418493C3E076381475B88F687
BA24426B162C392D23E793B69B12730BB9EFCDA12B01150F646B67EE9F37768D
6650F77781011A7F8DD8C00B91AB140EF3910A825E1E05ADDB80A225B2DD6D65
4AB327F8E201DADBF63D27EE53710225EA243109A9D2DD41ACF6D9407B495730
C692390440D0495BD7C6F5A86BD272D001570F677905F9B52157527A61B3E017
02B10190A53BD4FF514FA2E7A04985FBAFC27212F8EA7F125D9C77BA76EC2233
1C2DEA97AD3DEDEFF2D4BE2EA46713C28573A8F2B52F60071A4F9F9DD7B96D56
DFE0D783456AD23455CF84B8ABB7D8DFBFA182C822EACC8CCDD874FC123C78A8
4B7CDC3C2F1C7E8F30888B9D2F0F6E6C868628092E893E0843CE3BB2C2618493
3B51B09B9AA3BDBC5FEC94674C5F2AAE4FD4559FA6EA30AE29C5F04D58D64EC8
311BA06CFD2439301FFDBAAECFA622A54CB25F93496D8EF6EE86D1D7F8A0FDA6
4EB0EBED07BAE472D5998FCA85D3CC5E11A5BA43A3F2E226603CEF2867725F2B
E24EE8C3B3A50531C2D35985FA842218465A10DF3F0A3077768E0D7738E18E8D
14C67A0D8F5312B20DD102A8E3C00193232EB7D1B85B203D71DC802866F884E2
697CD2C08E8FB1A81D6663AC4B0288339755DB861ECAEE566FFB8419DB4A16BA
CCB5CD46EC304FA9C65F9C98EE2771D9E0251C0A670128832A1B8122C62C659B
DD923BE400C0E0FAF4B791198222F912C711509361862626C08E56A3B492C93C
C3D24E92AEB5B341C7862829322A4B35A0F601119DF341C79E304B9E3F0BB0D7
5482E70985D77AEBD52406629198BAAB391B1CF06B7268CD970D0F790D883B07
0E5B25C84E675EBC241D63071806F9B4CAF7D67F61002EA27327E64353A0ED1E
C8878EA229F71C9EF54DA16688B07D6BE1DF4D23A4632FC3A74FA1F527A123D5
F8EFFFAF6EFE11A5BBED13104A446789DDF57674219FBB3FF89648393658D842
60879AF4D7CFC781B13E773416377530C2066761E3121C6EEA3DB2AFF09B47AB
E3C18DB99BD0A3374E8D0F1BB7CF6F7DCFBA9A841CEC0B4DF58DF492831E9B14
62367A2ED5F085F24804E19C4AD8F1767A48AD0E80657236FA7479E8DA89E2BF
953731AB8B65DA78BF04107A7531051A0CA9DE10BE810B6278BEE450EA041A21
B868DC83B11C836823A8A3082C8CFFE1D9C7EC83F2B4B054CA50673665896687
DD2846AE8CB87DDA95EE2C3C5A09C7577F2777C5E164587E677981F6EB744D3F
DDD905D1BCBAC45BB2A1BC1CBF2D6FBF64BA6446D5BD910C69B3856E4782CECF
5A52336E2DD2AE05B965B893847B4368E439C57BF3DC3E61BA1A71AA49CBB1D3
2FEA0179E57EEE78125010E0402DF667AF30062551A98F668905A9239197536D
5BA8611C7F47BCAE3BFFAEE1F89967FEF0B00AB87330CD580EA19FC26F6B58CE
1B906F678C78056BFCDAB3C436584C4B54C3EF7B3DB6D8290AAC56F4B0575FCF
5A2367B5C90A81897B6973FAD7D4DE4C31E2C5F9C96874FD3418B583A55D565C
0F9922B1725153A8338ED37F663D8A185A7135DE6B96C751F0149D51B7B8D79E
B49577320A53E24BCE1BBDCB2488C5DC808B649526DB426F52485729C2EBD87A
1C043EA30B3B5E4CF6E7910F2BEB9593424FB4A58D06D8EE5FA1ABC3C576E911
58482A0CC98BE691B38C6F6674B9D510E96F6FBBC63A72EE0340B25AB7870E6A
99EF2D8DEC992FBFDCD93069F9295CC342726463DCEAD5EA7C83F4E51B8ADF51
5DDFBCCB55C9C0304306A749F349324C057B7AD713E33D8C93D244334BAC9C5F
0C596DFF489F6126A199A07C98945828270889C68CC8201090E753792D32BEB7
408A2061914D1A646A3D0662464687E74F7255169A76CC2546151C7E7114FA7F
221404A6D152E12301D317C287775158811DE1D49F24A5012B25521B2E286826
393AB1BDCB88BBD457586AD16D5DA61C12E13338F52F285C7779FF81C19973AC
B3BABDA1DDA80E3F8FFD04507B26383C56D93280E20D97F5FEF7C0A13EA6C0D7
BA6C1F8E04957D175AD4D8698A840E7B51BF3C8D3B41E0A123FBB9A9883151A2
68EBD36FCB34A44710846BA90949BB4E32225A2FE1817CC70EC57F21B33C889A
58950753E24DB4BCE066B665ED53E13B7C32CD2F148D1A5237DC7457501B46C7
78C1B4F6E91182FE8BD84C620BFDB72A46438D513586D27C2508962DC9DC3E4F
3AC35E5F84ECF74C8115FFA28B23FA77F42C5710D1F0C533FE2962B6D72EBC0D
DDFE66701E1FED17606C08CD6311774C5E1D01D8D764979702EA4001C7FB6EE9
372DE5AF60B8382FC094B8C48677B027A418DEB2EB29B227664FEF964FAB63CF
7DF47C88CED0B0C86060C2DB7386755C04A77BCC2BA9124D8F38DD71C6829FF4
7F4039F7372A909F6739D90815F9D8B3A57EE90FD8DDFFCCCF5E06D79A1DBCFB
AA638D7AFC41683513C916422AF06427405D9FE2E8F84E09586CDA498601DEAD
E23ADECDE18847058CB66D7E1BEC0AB78AC6C6AB77CA6A9E5AE555F94FBC07BE
33A006F8F578B49F51AC588BB2761DDAD9737F5C7CB519B75936F9744DD4FB37
D6E7761DF73E1809D294969816E00369D49D47FD0DAC92EEBB2366C6117F397F
7F3E53044C20FA26DF487B9D5C5DF63E6A17337FA1675ED8953E25AD506C43D1
B8CEDEB52746E2CAFFE9D75627B7F3074002931E71D53D847E0864E06191CCC0
76E530A55851754C65B63DF37ED819F643196917E6488BF7469089612BC578D3
C407BD4125564D674604E36B3440FA2276ED38C551E53DB065BD8CEEDB908D61
DC74206DE9C9EEE384CC01116BDAA2E9ACDE3B340686EE50B68FB8FC3E3DCE2B
8387D7E8F747A1D59BB9712825456388C53332359B8334464DAA50D94F69C91D
9DD8E1021F51C96444912B5EABBDD66D13BCC242ECD53B61767C226C4A6B34F4
C9E298820FDAC00246DAA482784932A401A078508B3AF8FCAAE4151E9D0386C9
2E5ACCA8CEE5186292AE6475B40AE8CF0E540B293844AA1AF3A022D2DB18F72F
BFE6D1897AE1379456A8F32CFEE0BE51358575CCBD4A8178613DABDAEF9C0D34
5D236FC9DBDEA628BC51C2DA9B8E4FEC349A29B4DB1604D7B6683B6B55183FF9
C1079AD3F5A48FD206EDC4E1678AB6B3473627E1BF694F3E9CB9A7414BA06EA1
2D6AD5ACE62FFB970F726AC9128ED85F20598A5143182AF7D5CBC06FD9269FC7
369E9CF13247524103082B4E3DD2E25F1CDEE90BCE1DABA1C0D2E7B32F6EF885
528F0DA95991DD033DB1FE30EA06EA871DBCF2B8BA07F93902B9CE1F98079F73
F7F7C34ED8E3DA31BE99BF7D04B70E643F385D6B52E2CC789961B55B2F97FDE8
5E5D7CCAAF6D21D692FEED7FAD9B7D6034EC2EB5E8B293C2B4615940A4EB9FD8
BB6240A6C15C2E8FEF4DD9E9545919D03D84C236E03C32E53BD00CF3E869E59D
863B22AFF6665968075AB0259857014537B091BD956BC11C154358212CB5E27A
79E1738E9A4A4D99411A07EF9D22EBABA18CDF3C09D9653226B0802016EF05B7
2236BABAF279DB1DFAD63D9326B73B17B6679EBC0A040AEC165840EF7AA609AF
C1CDBD9D82B045199979AAE7A94F71CFDF258F19A87A534C0AF65DBB169134FA
8DADD21641082AEE01EAE0AE6E9CC4EF31C974219793DEF42C09906F674153FB
9D69D7BEB4251CAE603EA10DAA05E023AF9873FC7031B45D8838DD71D30BEB16
555C34DA674D9CDD4E0EB006361DA208537D42A76E9C5801476A69A2024696B1
78A5E95A7A539BD65BBD96505A0A556FDE6274B66B09A8755ED9770942EB8805
72BE1D5BC1466525B3B7F0508B26BD4B075B8A212CC7282AC21DFBE806BFD987
609F4E2AC1F6C8A56E74CDD4CE36DC89040FDD3009E6DC9C9EA1BBFB576E4904
23F9A87FA7241CFF2002365E93F28E60EE84D058B5B3685902D2E79F44EF41EC
4BA5059F9A8983D858523953FB581285FF992895773FE97BC699291604A4D6B4
FBCD7999C7DDCDC1C71BC15D3597CE1E916963776C917BC6372B36227E92113C
3DAE7BF70890C6612BF7608DD8EA2571CA77459489EA79A923E45E039975A6E3
14A181DECBF14A4AC0AFA17935407EEF700391472EF978564357C31F9C1A8A64
C98FAB5CE546A4E78D52DA4A440FD11D2A69856DE753ABFA0D7B8B7E21C013EE
3CD986609AB85B942A7A9F0CEEFC0E41E5B4E80F6AAB45829B0558B1867002E1
B928E537194E6AD79C16351CAA8D3E686A3F8D65AE542DBDADF58110A340436A
007C311944B8D88A2727041C3EB159C6667EB5AE792DEF862FBB1C719FE1CB88
A46557837ADB31451D851FC572D002AB19585E05D73FA60AFD96ECA5ECE4678F
DB35670D692AB3B745C7F7956246A0BF758D7B49B76F26B185A12173D6DC7B28
272282F119071A2306A45B8D9F0C090DD724EA32F31C59404C119618B6CECD67
6E5CBE6C2A91C5281598C44E027D50253EC67BFE723E90E176A7907B98F4B58A
F0C4594CB8C59DB05CDC0DB7324623CEEA513CECD5679CF430BC88C929347ED7
3CF6B8BA64F0AA4D566F5C532052ABB3F1D52392951B81CC79F4ABDD8F97951F
90A7738F26801307BC60159FBFF46F70B94DC8700E37E03E44E80075386C8F16
9DB30AE8CF0E540B293844AA1AF3A022D110D67EB51415BDC08ECEE2AF43758D
9ED91DEA862FAEEC41AEDE5552B46E53CA6BE8F16CE8C8E2BBB1FD203011B1BC
2E1EBC76FCA31702BE97D8CF7988516F5FC74311E6CDC2689AFE8C5A61E54D09
7BEDF187741B529DBAF8B93E6C4B83EAE2FBADE0741095F876691D987177B4BC
FED85CC360CED92E58E88AECF14F6E981D851B9888E6847DF40BFFBDFDA6E290
E31CA2AD100A7AABBF9B38C7B1CF575CF4FC73C22B27A4CA38A6CFCD2473FCCD
6C62AEDA99D432FA6DB2B87F9EACB05E65FEEB0961EC6219758FF05160E3A43A
EEF49999679ECCC2E344BAFC620E490479F34E0CB7BF1EF1BB840873961DDA0D
5FB8E798BA91F2C174543650F59A037A5087A3E2502D74A17C439FB6C392AFD8
53D46F96D6308587AA86286BA26F4DF597514A22E74457C6422CAB86C3960736
D8D890DB97C5573413F671A40513F7D25384B0D40DC3C376BE3EBC3260610957
93E8AB02E385CD5057B9DFAFEF64FE3C79A1FE96E5EB8E82A56DE29AF2E4E564
9034A62418DD278FD4BF6A3112246806E0B9F63AC3417C55890F510DAB08B7BC
A905B9DA50C4BDB1AF766835AD9398D2286A7340AC83605B885B7AC1D763B079
6B52B9CE3455855865BCFD09EED00D459452FBC2A20D390C3EBFD7D9D80A8F14
FFC524F19621D2D81176BA98DA5694D04C7253C8271ECFF9DCA956F1D0FF3163
82D166419F3CC5099E9CE0999C08150D699B8E17B8ECF398DF335F66E7F073AE
5E6DA5DA9B6FBAD028F92D0A7C89305D2B976C317160B133134778C0391B579C
16BBCB13FD83CD1620B34865B11C8E2CE1F25102F09C9802E8CB2F61318AFD9C
78AC2A3F8DDCDAA84FF7C2AFA2ADF9BF6A01FCEF21C47E05C35686AC42833D9D
16ECD19D0A6F30DDBBCE8234B59A6A1CDF1557A70C4545BED8A0A529FEA6AE4D
A546AF637E04D936E431DF471C7E718B13F29CE209E3E7A0F854B6460C7E6898
7FF725F17817A5C161B5D523BA7726304F402E36CD5D0917BB65CFA53620F061
F3DAFB1F2F39E2BF7BADF844A90E18184E6D041C4923547F495A14AC930D5D42
F8FAB0D292E84A0AD107C511E4DDD5DF474831DABAF873C5D6DBF2F7E039F22F
20F114C1FC8D05647561C1D5C7DDBBA74C6E483C66E080B81C4D136EEF2B51E6
80CF9AC00E2DE650DE6BFB38017C2E5851A554218214A2A47DFF9A7F01AF1603
94A4657E6BBCD572B0A6A0228112011F5CDE11CC5284D4A6A939861D5E3EF8C7
EA2FA6C18D79435F53A69EF65E4ACFE1313D783C2BC76E25FFED33B192CABFF8
CFD924CFD804CB16C0566857C93C02B34D82F03A70F4AC6D1158EEA87AD11067
174E47BD24C184339338256A07C62E44B6249125EA311F492956B9942543100F
6A6661F05AAA40C583DAC3A0254C530D59450F526A84CC3FBCBA674B71F7153C
1773C4B9A21962EBD0E9D5EDADC84A8CDEFB41BA731ADD3C20B9FE9F780AFCC9
E4FA131A01D492DB3EBAA82365202F0532F78A1468FD7260DAB6DB280E5CC380
3652E53554E020E54C300F30BF572FF87CC88F4C0F33931463BA30F00B94FA33
70BCAE4346A167EDDFD66AD97E73F91C3DC8757C2AB0A4C3F910C3387BE15D70
E4A43CB4680F48696E70C71A239A8DC53D4AEA7E5CFE6C6549FC7650A0A94CF3
CDC202544F69839EA0E914D0FABC53B77FCA645CF41F79B6458995AF9C835FF3
20C47FCB83408D741376F63D67C48956B3121B1D8202AE31216B907788F78F4C
C28363CE8CB54B37655945AB1BACB7567AC7165CD95A8A2A7E3EF2FD6999EC0D
B35199319D490A767F24979248D03453972D5FA65D96A214E3614CC684507763
DA70EA33B65248CA88A19294211284F22E8C59110F6E7FAA11EFE1A57A0DC9F5
E274F810CB73421E4309CEE324888E6670D19967B5A426C5A61323779156F604
9B290DF99984F2BE4BFCF492CED8A5074548CB0D2E83D2F96F0EDC11C6CEAAD7
968FAC50C11681EE911625AC2AFDB36AEA067F25110B5DBB5835280E4DAC1AE3
979D42DBB33F66084B4B96EB130B5C441388FF27F4EF22BE7104F3A7381C5F09
9F706F0280BFD37113EB593027705BADFB276DE4B95DCF7A42FB2FE1965F4AE1
D53FF5A2438E4A43C20735AA3F111DF1A516724029B782910546E781C7210AB4
41A416BFD3389D43CF44025351940A9B4C146E164A77E13596157C957E2D140C
EFA96E559D7353609D9CC2051C2FDB9A455E8040D2A098ADCA1A2BDAA4F52A5A
411A112E61EA007DA21EFCD144C2594EFAC1ABDAA045DD4952D63431D6B9D978
CBB10264A58BCD37DFB355997C4697DED54EFBB0BECCD3A12144E83DAEADC123
51A63D9810AE8017B057B76D3C9673C394407C85D3871B16AC02E54E804A7204
E05F7D9DE99349BEA0C5BDAB5387474B635884F3FBF12EC948D2DEBF89F9CA8D
791105C243F4FE0E61166B3FBB121AAFC6FC6000C8EF8E5C982580CB9299C7B3
F404C3269B56C67D1482E9214116CAAC80D16D4C9A224D34C42F1B416A31DD6F
A017BB6AD1DE48080DC8A2765A1FABF88FBB0AD59E030686F20ABD163C936656
F06FCB2025CC5742B49A85CF19231C28DE429A122900C9076E2DEA4629A6B33F
FEFB19E1898E014F7557D883B277B46F2AFF07E025BA6F62B17386B73E8C31EE
A125BD8C48F7AFF22348085FC3295AA05FED12581BA17EA0F9AADE6E3A697EB9
15592FDA8CAA337887307ADA7457F7810F1DDFA5901D2A1F5AB8DE250ADB78B7
C21DF8BFF1AC4D50EE4E3BF59280BEC27EFF8D61B5039109386E3371E7CD9623
3B77CCE32E8805F98981E6468D05D2A3691CA9E7CA1891CBDEBD1C6397842811
3BDAC96018658C1970E7DAAA0E6C7C0D1211981E0B9859078DDD07B703113B82
684BDA81881295A5F58C28A9B573134A56EF464885E3F91F2B063B054887E74D
8CDAFDE493BD30AC8DB6B7736D8C2AFA2CA988C30D80E8C46FC6130A1468BB0E
39D13D4A746DF45E90B0C9F4873F8CEDC95629ACA6014A2F871D4D1B21F17DCB
57374C808D1650B8CC46558EB366CE230803617734F5725E3CBC7D4309472740
98EEFB9398ADDA9EA809F0DD85EE9CD6A0921691C2A7949C057FF564527A85A9
C9821119F5A9B6C3FCC7BDE30A43FD1254EAA08F024FFEFE78E50E9D165DC005
077DC81A782141ED6EF125ECB07A136A34964F981C6420EEE321885C472D850C
ED1E6C788E6A8F22F91951FB27B7F98C74E159C0735C9D531188A4830802A583
D2BB5FE01592822C3A356FF232FFBFC41530EEFE3C847CDE5E46F58B160CD71C
259F05EFC55F7C7FD4965E65DB533FA3BD9ADED201378CECD0A014E175D5D2CC
E0D49DF4FA70808FD4DB59E950C40E0FACAEE225DC43807F4089E1050DEC88CA
6A305CC112812B05732D55D7C0F304EF575A21B12BD7BA729FA2694FCFBBC68F
C6ACAA434A5EB3F27671E57FB69D588E8FCD99D4CE3C36FFAF2608FD9B65CB4F
00FFAF896D9CDABC5A18D95B850673CAF47E1674C073494F36DA302D28988B99
0C1362C8A4FF7A718F17171A36BF50AE5722C6091BBEF7DEDB9D7D644E70DB26
50AAF10CD9E09BFC6610F160F269C0462D508B3C9A9C4FBAFDE9345C5AB70ABB
6DA72847F82EE2D37B92CC6CE5F1DA6BBA0582D2FB4DD6629AB6355D80B254F9
7D946C00B391EDF28ED4DF24CDC1FF1454722A347AFE2445F1C01F11B0E7A44B
7211E61CA465693C56ED80C4CC3C528E46C94E61E9DAA92DB96C1A493D348A09
28BB9443FDBDF3BA606B9109DEFA8D684CF46BDFB6A8BB097DA0036EDD1B9A7F
35F69C8D2C7AB22B10BFAB42D420C231544F48877A37C1D64FD2230597F9F2C3
9BF18F08ECEAEBF2CF1FBA51CEFEBC9D57FC64CC99741039D98F192D5681B2E9
C5BEE3D3F3A1395DDADB79228D5158C18B1644F367F6B4AE2211F794A4986B29
F24551473CC72CFE3F0CCA48402C6FE579C9F5A6878DFCF2CDF7023A8FC3E4B4
A756135AF03D974E3D558281CF27203BDB9A62A8232CA1D12B23830F81C37EA2
61378ACF9E2E22F78FBAF47A6B0025A2EB3D7C1942CC5016A926E913D798A1B3
98ADC273A7A410D1197195A913D39598E0B4A1D2EAB67B256DAF72F05B39D01E
4200C46E6083909AE2D7882D5934FD60245010573E4B55A53E09FFB9403A1359
20C6CB84386BEA1ADA98BAA5F06EBD1F6365E5772B9B3CE3E32AED41E7A02F81
13EA64B419CA097CF504B5099B478ACB64F32BEF785923ED55D0E6C8915DC11C
D1C078A62FF5676C26E95B924B9DE982F78D2FE33CE967224C577ED460129F5B
11FB791E0878E769ADA7539BF0B1CD3F8753CBA1F5B5E07722ED9BBB60A954FE
8A0010C05B1C9BDC77F71BC8D397F5E3FEE123535C4171E9E5B0E381BBE12710
E02BBD07DCE764A37102BBE7BF3FACB8FF9F9479CD8D6465A52DB25D3FC6E65B
F422969FCABF1F7A265BD9385D91724EE75A3C89BF265915C3BE44F64EC42265
691E612FD663AA867B1EB66F20BB64F1783F79050A5B30D3CEB6C7D64709ED03
1F485B481CF1070AC790F273C3BC2435459A333E6BD2EF428A4F44270F1E72DF
A4AAEA546284AD7F9C4F6F787577AA545944B73A1216C8C31D0688833B2F12D4
40E7BF0D04AC32FC6B48589C30D75B8CD3B6B80B96CB9BFE657EA66A6875A7D2
2F0B994694AA1DA733A22970B7F15931E3B739C8E876784CAB470D0957D6FEA7
F732C99A794673B5C71191981455CC9B56E49586BE678831E4570870FD577564
0AAD5308C57763EB51A274F85B09DBB8B73AFE4F1B0B75EA1C88D216D29F715F
5927C9A3152562ED8ADBF163230F2A17DC1AC86C77EC26AE854E19E2C76C4B74
F71B1AA77ED1D01044CBEB0D395EDBA5B28CAB6E2B8242CBDEA6FD9D215E2640
DAAF4BF78C3128C1DE0F52CFDA49F770E3E5211124E475AA0A634191333FF95E
E0523F3E8282E568C861D7E53B7AF86E14702D9CBBB2F1690A2409A76D324FE4
420F41E9A47F2F44DF4A7C0AD5BAD7CE6AD0B7C1CE566DEBD2DAE59028801138
2A25D49CE88C33DAF1DEF3DEFBCB9E21312DE0429C43C0531771C079AE610FC2
554253E7366CBEDEE103D6A45AB653DB8B4FE1CA28C702F924803B5461F10202
6E4583F4849569A754BBBFFAF60F4316C37772F0D06E90F1624D87CADF017AC5
415A23686FB3A72B8896BFFA1A8CE072CD4BEF896AC99EE0653C23FDB4472A1F
03F3A97B7BD3401732102EB90F281014FEF2882947EA160C37152154E0073949
3805D62884CF6C6C16EDE6CB11704D01F5AA4F55692F479DFF5B35A00A1D6203
8B9A3413AFE7F3A4942FEF987E0464374A99F32AA93F79B344B49693C1F94F0D
A9BC9508F1EEC11F64314E8B27E9B0C5F503F89D3FF5BEC654EB23E5EEBBF065
F3697B37D706A0C2458B4A3547541323706F770F7E28AEDD8CCC03EFCF372361
245DB158CFBD0EF8E241B90893BCBB7A3FCF6B8A4AC1FA15403417E934B82188
D6AFA897626578A4F75E7BD0E699E64B179792C8D2A640A4CA65932A6331FC85
F2CBFF15A6BA10B20A1AF98D09CBBDFEEC533D3860A458CF2B55002FA9D068FE
935755ABDCDCA606D6DE43AF972929874B50E08E1AAF18CA47635D34FCB93495
A32C7CA5BBB8875C007C71E856B54FAF68998A02E72D9C9BBFCAA22F9D8AF2AD
2A64FE78731F0B4CB2D397CA55BBE696E5498F11FB8603DBA2E18685380E0C2B
D84F091111DE81FC93FB8D97DBCE8346F0E3618FF2F2FEE152DE927C899C95DE
4B9BD928EE84BD68F46D0BCDAC53AC8DC118FCCF8004D0293C82E4FFA5936CF3
35F57934CA654294ECEA23CF97F75B8EFDFFC5556748C6B51E5DF0BE5AF23768
6A999FB513F887DA1479CD44A2F014E67270390F3B67F58B07ADE90BF7DC6DF0
BFA464B9D7BBCDFC2EB996620CB2457348379173C6EAE3976296E4D2E3656B68
3D7A67462C751F0D40653517199B6DEE90EBDE582E3E2EC84AD1C3B2EE24151E
FFA37A662F9A9A905670520A7D04EBAEE3D4A94E4DDDD656EC4BF96C177CCEAB
1F78BE56EBD1D93EAD21B09261CC6E284BAF9DF6A28B361A97C4850D6B3D5BAA
80E590E2238AFFDC87083E768EE25D79C66F28FCBC926D97D921CF132B3DF0DA
8FD736634F7AB8BFAA1E02B2300257906D55DB1C791B7D9487BF227DE2CD059D
581BBB76E3AFF303F4641A2C9C4A565E3CE34AFAFC9F04EA5DBB88D6580EB897
AE908AD9F22625CCD125A3BB81AE14B696B6C4B919D2A752AF99C57F68A4A1EE
8CE13AFB20EE6BDE375BB85E3038022F2B46F781093DDB9B688C0851E853B1ED
DB0F5A5BF6B9F476F52DB69A8F99F60450024C869715F3D323E3C6226EABCFCC
A821C7241EFBCD7A4ECDF42E27D09D133605A5075C205EDAEE8638C3BABEE714
1742CC0D44AAFE1F7D63A93A40EA0DC34E4722DC287BB31DDFBC88A4141F5949
AAFA4FE7804237DCFB1EFF2E94965093831E6537B0AE9DE4CF974B3345D28D09
95817FA6757D2E92E36B07FA6BE05DC6447410B947A02F6BACD9F7A5BFD8B736
3A62BCFAB9C940E3A055297800A3083B1CDB34C3FA27D2FB9BE9082F4119A598
CD7815E099D460240B484C471D2A206353369CD1983F8C806CD33C0C7D653882
7272893F3BA75C6E985D094EE7B3141C603D5DE62CEA1B1065F16FA5DAA317BC
0ADECE49262F79A75322EA8604D369FC632AD117D1F439A7BB0AB5D2D15CB85A
648D802B3C12E81577BD286C8FC4F460C8B192162A630AA0027164E5E9EE2E7F
A1C00B0F428ACE8AC6AC86E8F81252B281AA40F8D527B9830C1574ECAEF6E613
6AF6F7A70490A68D63B6FD641A243538F8BC965DC3F22141059AF82875555375
FFFB920D11653FA1F75838C16E5ECFDA3CC02D6B9443201F683548EF774C0136
626F7275BC54E8CEAD62D7164173F918B962980870C46B4BE25031CFBA2AC1A4
C3E2D4C05185F1C20792F58DCD9FF5E3E0E316AA8ACF4F7FE28AC278155D264E
9CAC9645A80EA2518FC6540548B05680040FF5CC12A52E6289AC22DB0D819922
6C9C93299C1BFB510B0948C4C08DBF78893F1D7F403DA8370EB592FD7E36FB07
A56B573D59268C2B7242D34531B3CEC3CDFFAA1E571F1D9A46189B41E71F00F9
88EF8A0A7DC3A01049F1FC93EDD0FAEA90CD6C216E01BD1778BC326637088B2A
B2052FE22EADAACF4A7428473996D0B1AD38A97696CBBF6CA81BB33418C7EC64
7E7E0E0DD5BB4DFD8B50503D47D6799619E159900AA6A1BE3FDA1C170F805367
232256B46D7594AE0E8E2C35EF970B29F3F240DCFD60EB80E4DA660C1FE9967F
615579763454CBA912F5923E7BC087D187C84FC659B4513760B4F4D1F409458E
B92079B6827A90FB5C8CB27DD8DF4106F558A04C73A50D38213E4445B6EECCB8
6258976A861C428758EC91E4FC00A607BEA7C802F1E76873BF17993735BF7CC8
029D09040B5012617E46997A9350B560C64973B9F43B4B9E3C4B1E40D78063D6
4938A95F542E48F4D3017A21B9EFF5062F82CD3BF98DA86737423337F9ACAA05
4D7ABF7764A582840A154A516EDB1E81233ED3E121FE822A337148DEC6F9B018
137F51296E64A1B1AD9890F5F7E9B7B970535250C8A51D8260B94104137E1219
1FE201F929859262E04A0C214B9BEFA79A1E3B8BD55A9C4DEE44E2BA1C48276E
FCC3C84359C4E4ACEBFB2DB2F4D9ACF3B20886504776AE687FB7444593A93500
30C2AD7055B9152C7A1FA73605BA64C01B96189DA7B887E301ED0E4CCA20A6D1
F636436C4CFBDD3CCD3320598F5E98C56BBA8FC93890FC88CF605C8A36E7E394
F57438935E798953348635E57F4044424DDEBAE673C1C05B0601094385048B5D
49A6DED135A6B8AEDCCB94662CD731DD20A60F64DDE801251882EE404179EA6A
222A7E9C0A1845263FCB45A103D1808B0CDC6F1A2CA629AACD77E084C43E8AC3
554098ECF6875C48FCE786D2F0BEED07118F843F9A90FD423DABA48EC5BD4319
B08CB996290131A5139CDF7E1D2F3AF05E357F9508AC7B8618E3E4C71732CB60
1AD0C90CC2B4C198C6A7CCA1ADFE390D0F14407B863A4C1DFF4A7DB5094F347F
8FCE5659EE22583AE663A4CC9B3A307D780B8CA56D33CF4EB0222EF209A07FE8
9F66D0AB5947526A42DA264576EB7A764C5BB9F39457C41C3D066CBFA6C23FEE
288386FA0B7205B1BBDD1EF0CF9F965DD2A7DC2661F23640AC14B77A19632EAB
96C8EA5DD3F382B47671C7D4A1B901F51267A35C5A55708924CCC41D05D4CA2A
3B4FEAFAC3B13691C8E1FFDF7D32DE5D3A5657602F4E499189D9A4CC68161C0B
5C70FD4CB7CE0093F1563A204AC181423D529420DF55962C0148D1DB49B60218
EC90B2DF14F49AEC748593875CADDF2F83E7377CADBBD5E3C47AD3F30CD20E79
828502AE465D372653A99DC4C4AB909BD30F01D2202AB19644EB3FAF2CD6A71A
4F6C01CC4769681AE81D156486F5C6E8D2D3D86AB7D1E6E20CFD7D8C28B8C500
741CC0D1C34342E3965BA66B44C5355081887DF2DF8AD6C6831C04E5C0D45B2A
1913033A51AFDD95290BC5CF4F94B0B238A3B58E75EC1ECE89C56ABCACA64500
0F5AD0774F679D606882D23F0B27DE36FEF6DBADEF99F33C1037954591D0A9E0
85B328835163095133E88226E7BD4733503D4D1366FC93D1F56528A101927062
95E44D7351650B9D7D2C8609387D59CDF58385C03E6D5DBF225A090910DD3770
B386C9FC5E3208918432BCE2B91A10371AE8591F1ED61D8BFCAF191ECC0BAEA2
7A64714BE2E1C08DBD379D48D12C9E41C8340393C5482F06631264051A193937
317E410FFD4C847159C2B072364E96D7DBFFF5452E97E3A7B7E2D2370E3A10A1
4AC84FF820ECA15B43AB72265D3A0902D47FA30DC140444F8E0C40B04EBE8960
B6ECFEA8B4A69DE97E36600924DE455FCA12EC552982373475339B32C641576B
0F7635806E6DD71BCAF895C02213E6C3B890F667F38093B415A18D4B4984B373
1450B269739955D0ED6C3E37E58013E95C71C7B4CA32E05AAA5B80308C8FE4BD
85360364812FF76974F49A8903D917AEBA06D6CCD48EBFF2C5894909C09C60A6
F705CA78CD84F576E05FA8A7DD03062B5F5D5557D161C49B4C10CE3980EF5AD2
91258D0229FD70C335350CEDF5B524A1CEC4DBEAFECA42CC76EB5CEA34F61E4D
0E44DD21BE848F752EB23CEBF6CAE577343C1F1807DC232CE5B00BC24A859989
3A372987DD7FA4AD8B5F0E17BF1B97887F498BAB5E1F964C85253CF5DDB2B5E3
FBCEB9B6AE127E2C2F96C54D2E6E79E749F11986FE46DF5324D84206D750C1F2
763F6007373B13E5A5CC0230DF4FD95324852988EC46D712500636AC88B5ACF9
79440B6372DA31ED7733B62356164104C1D6E9382A54B9B16249D339DDD4BBC7
F80DC72B88C66FC42A56CDCC9D99C623E9CC4023AE55C2D713ACDBA47F3A2304
BF0E767A41FD7B622A2F7ED61B360F80F9F4976E37ACC07955650633470503C9
107BE0E8F0CE08A28E32BBB365380A849396E9FE3A11D9F4BBBA97221A835770
8BD71E5D6AFE677EA9FFE884F06E19ADD9546794242E70F377F7A761ADBF5511
9CBB4001F7D67F87FC496BB31C90D65015A0462784CE7848920296CF0FE71FC3
1DBF9D0F7893DBCC8A7E7DFA9FDFD46CCF68A71D5B81187FBC7846E35196CDF8
A48B6B42B7EB5A3C845B0267CBC5AC719BC8C5CEF75FCF8C70FC1CE078CDC6C3
6ED6A8438263350B3F6FA82618D462CE56031F64928A0588665659DE56331C64
13CAC17B76CEB2B8725402A18625EE1200FAB87B954D1659A9A45417790E04CE
A70EB0F5B7AEBA34166B1E8E4F23B796C1A8E21BD031C246BF60113660FB3834
3574C52BC3B5940DF35CB60CC5C37F004F126F347861F2FA9464F4E12E8661FF
29684953A8170604542AE3757838134AC702F8E3492B94C2FB9A576D080AC128
1EDA7DB4D90A18792E26CF96553A40561EFD8CC477545D8B4197D8C35DB076C5
62CD495EA60A9F091EA570898CB024F774A4AEBEA2C500513E61BC7DFE652842
0CEBE198E46ABEE2230EFD44E4AD4F6948A42D20188F6CE52DD8E6058087DEDB
AFE7AF4B9F3FDE5AC1B63A01356B140A3B803290C79AA4CB407231847B35541E
896DD16B08CE955B971CEDE30677FB85959441A45DF30840D44C2CC2CC998FA7
408533C13EFCB1C17A9799A649195D3D526D58F8A598380C1117A663A9DB5278
B53F564DEB0C3E0DA34F140CF8A84E569599A88B981C871757C5D1DF76760CD6
6452ABE5F356F3EBA4F1D05320A1A28D2DBE54F04A2F5BCEDA1CEA4071C964E1
FE5806EA2F58D95F355738DA95CB75C2B94AEE74CA1CA012917AAFF8D0A6BFB0
FF05CA2F02B6DB3D7DBDA42EF8E45810D603E08B4B9C32A614D9EB7C153C2C33
8188C8922A526C4CC6E7544710725B223A96F6D0BF0F16BCB37D68988D6A0479
BF015B0957AAEF1ADF6F12E6C4E356C03E5A63E946775AF5D13B90FAB2034F56
CD15AF55892F0E9537DAFC13D63A8E3593F753D17CDB16D8EDFB377C4B5A017E
6237C9A9360E9FCDDB96A05CFCFBC79123BF8ACA72ACB41D6B9168AEBB832290
2621DCBC2998074E76216CF5409C4716CCF9762D17D4C59C52DB4A9364C26FB1
8B5DC6FA0EBAEF43E9413B93DBB725A578B84D46938CE2D781A3FD58AD21A5A6
F67C6536B0FC3CF7104862F38F9914C8A8177D6CB8B22118AF202E92395E4B1A
2A01379E7ADA4284ACDAEB4916FB6252C1245384DFF27C33CF3018BA3960AD87
A5241FBB7C80218C17CA91C04D8FC98D65D10629BE173E8A34E5F6D9FFE8D1FB
A769CD7F4D739425E1F0AF7CCEEE0BDFB659BDE9DA3344A778A142692E8D77E8
25E0C85D736B7562FDEC9A819251D0D098EC4542BD6EB4D5AD2276B479D9B69F
F29AB061103EA3D1EEC0B48E47BF530D4B7BCBDC7782B357470824787E863BE7
023507C13574481F6BFB2C92A73208E0C8BE372B47D585508742C08E48EE707D
3E36F9AC645C13121198A0A53DC6E2CBF3D139C408A48E858B3CDB5C5C46680F
A95C4E96751F92597B3565A004EF5FEF8DB112DE4A43EAF082842BA7D807FACE
FE4DDB322702F06CDA7B654060653CE6245223A64C0F6F2C4810EDF4CA94EDB2
C453E89368C4346D80DB54F1F1BF38AD3C1B3EA692C4F7110735788C25C007CE
8F65B75F57C1AA92FD617E72CFEDAB0D5F3DBA6AF052059FEBD3F58281F1039A
F0DB7B4EE033E5D8C106645C6D82EFF7E2511D9F39E5ADE138FEDE297CECB77C
70888A01E3667968EA4AA35016ECEA5FD23BCD2509B153CA77098F42FD1EB5AB
74A5F5F8BEF989BE3A7CBFCDEDB2C470E8FC96A0E7C524384ECCB848AD265F9F
68F4282281EE596F78F3F7568E0508CA52A0EE358574A9F4F72C59CD28900820
533AE5C5EADB559091D76E950C3D7CD72140135DB77E14F6B4CB1C37677C882C
DBEF18988E753160D252ADFB56CCA61D4B67088BA875ECF927578B4CF660CB17
CEE158F0316890D16521D8628D72A171B0A87332C8AFD248EA9B7BC5AB71B63B
0941DC07C012E8FF137DDF79B19550278D99707999A79C22774119EE83B9E41E
57BA8D6445B4E4EFDCA28DC24D52D8915FB70BAE27CFE85B7ABAFAC5F0D893F1
612F98CD97957EB45D94EFE8FB9308E6BCA1E48A1B55DAEC7746AD68225A7030
0BFAB1F239ECD0FFFC1E275EE279566258291FF8EC9363E710DE856E450F1BC6
751F6CD41AC1F25794152D188DF3B917B76E9A166B04692E086E56B3295F6D83
2E3B1DD466E1E22716DCE64440A1360C27DA9D2525EB03F4BAB929DB0FE7A44E
ABA7BEA76577B75EC21062C15ECE9768FF120EE0FEEEC9125BD640E0476AABFB
5C259583DE42E2E19EEB94A7B67337C81268E6F989C1C23848C6F1D801DDE034
0C2C9FC95BD0217E941C9D9978D3AE84DFCE49F33A5C75AF38DFD07A1F199BB8
5370BE3249E0550BE51C5B8CEEB6739000E77BCAA203F0E6F4A93AC2E45C1900
A9E3DEA78AD6733A6580AB42577EF1DD9DA3D0EA2E63624A4F818380CCEED3FC
78AE4EBA0C416D8E726D582D8E753CE490899EBDE3415B6235C61B46599ABF56
B4909D151742E28DD95CC1FC544E7FA982D569FDD3856865CD2F864615EF0AEA
87F569E11199C179D9977F9056E390B740C65D7493019D01CDEEAC0FCC5B4A65
3845DB9F70548F66C34C9CE7F0FF17CE30D6384ACF2233BE99751AB2F2E2CF30
8FEDE4F364458DF2D2EB2457A6198628C162C647117FD1C02AC004512609407B
5CE74FF8FC05F6F7597DB49B8B58F307CE566AB8FD6F1D45C0B2A2C79F83EAEB
4D1A999A7E09ADC710B0CEB6EC17813E585E8903A703AC8CCC04B6030607A51D
5751AB82C542EEE3D5907EBDA89DFC7DF7F807E967D44B443A6D4ADC7E08BF12
6A1767A7458828E2FE6BB8BA49471FAED8AE06B3AAD9CAC777B78F137F308B2D
90FBF9BE184C97E8EE15027B1414558654DAF75E8516BC102E7FAC77DE4403D5
F5A74B8540BD6A2E2487C449D359551E3EA31FDEC1D3E1D4689FD2BE28374067
7F6A28EBA9DE5F79735FE0917BE24B3CDBC51A5860BB37499E698535247721CD
660A7366436EBB260A80179734EF77BF5A88A3CB3314BEA98865959712FD1801
99FECD827AED28CCFBDE0C5983C5ACACD160FA6B90D693B552B636C53C4009B2
F75F47F49F447C96DB2CF16CB37BC0AE0685EAB21A8DE060668F205377B4908B
2722CB6581212AB7C1A0387548E51A8E719CC410365B69DD1ECE0F9DC7ABD7F4
0B73571081DAA77A52F36273685B3E262E3AB04BB50FE9DFD8044EE28F01378B
AC9A649A75CFFD38A5C2F8889DB313E91A760FBBA973CEFBB91AA68FA444B549
7EE04C1F90FF7A7C02F85B3627F726C2DF5FD90FE680C71E28CAB480E7DEC9A7
E9B2A77AE8B84B201A0D4D434E32C19E65A0CAF6DABFAB9651175DBD794FDD46
4A8327B8656E35C328410685925F4A7FA80ABEFAAE6B70EA8E6441901F492680
0ED03BAE34E0BA33B41DA8D5FAD6A5A7D786CB64212B30B6BBBE08EECE7E1446
7EA23C0FEB7ED7ECC3C3C419835A867A17E7380B88B5C270A5D70DB06D87CA2A
2C646E8754DC206B193187F340940E509E5E0E137ED5B94AAE24BECCB644B2B0
434875DD1EB7267AB638812D91DCFDD8A29212B19624E4D4A971FDDD12CBD49B
B54E698E1604EB0E4F37B338C1F65C2EFC463FAB202A77E87B1F11A70D8AEF2D
D6207B8E23D8FC7F7B246E4DA0871AEBB71AC23D7251C3EB3421A68B570FFD6B
B4C46D5FD8DD3D8C4894DA12000195C1C3B5D5E7614B51771CEFE3005EECC85B
97295C01642F158467740D8118D012AA08D1A7CD4503D72816A87BA6EBBF4ED6
EE7CB41F7F1C5ADF0B6E73B9EA953776470509797B3E3029B7A3153DDF4A080C
64F444467819D25B80E3C35994B819163BF83B8B7B37842398AB331FCE0C990D
B6D8CCF2A6DF92BAE5C038367C5BBD6C033DE58A225053E804925B631889CF8C
F9C0340BDB638E61E7D741585731A788EEFB978E8DC1DC59EC09EFCD06D14CDF
11706DFD73397E5DF3F1704DFD3C23349B8292B014C9BCDD4C8CBBF8693F58E5
ED7CE20E3E89CC3A7A5FDD9122046AEAD4533FA6B695346B4A782827462A19F5
D445BEA249E87B61F84865AF870E7BFA41816D3B6FD8B6E4C8E4EFAF3A1DFCEC
ECF86A7693E041002CE65A528D6155EA1A61CB143195444D30F339EF236220BF
3BC9C8ADCC52B2A36355A8A83B1A948075CFE34F2E108EA3938518069EAEDDEB
051A7B2A2F6F142200C2725DE279309EA675BAB53454138CAE281C9CF8F7C0D6
A7C027EF5F896AE9C5846336D5E924F7F9839731134A13F1E21D99C16161C9A5
DBBAA1A0105B0703831EE83F90FB869154F2DE25F425880AF80A106EDE61BFF4
7E223A0A17812ECE92CCB99EEA5A3190D32B1DEFE641EFD7A3167F7EB6BBC485
A7F8325CDB4B5EF12705F6CA91B493869A1C4252157805026EB07168EE7E1335
564E3229940FFCA1BF2C2C7B1088583DE5145BD8CFED4AD92B553032A9C98249
47972BAF67DB0F9E47219B84096C33CEC0950607E34FC9E60E83AF9B9EEFBB17
F37B524763CA8AF70EB8D1AD8A40258CEAD83C1BB44F4DA29662AA8E2673457B
8CBDB28B7C2920ACB6B9B7877F824ED0912DD5DB7248C8D4D7353E86C4EF6962
F9C14A2199F32759161B27CD09CDA18EFD672B8B8A450A4FAA25A1690FF1CB00
A8CF863F2FBAB07BC277D1BF93B3799D9928A0F1A5AC01E0B00AF97DD48FFB8E
C01DE6176679BFEBC5EADF3B71EE1A85357A8AE4C9BD64663CE7FBD1EB2C84A4
C75BB543AD16A856678E817397DD1DECBAEB82A1279C33809AF49A42340E9E34
1804452D491455CFA3801A5EC9FB52104E0653DD70BFFBC3302D547A2312CF21
626D57A9A93103BE158186AA1131EAC5F1E2931A6FE3D6A47CA9FBADCA8813FE
88D3CA5C7A0685115E9CC8EC88008EC7127479588280073838866E97095CAEF8
2B51C1D86CEE0D0B43C8C419D13478AD3C76786B571698330DFDBB005656BDFE
84C0C96CA422C563188EA17706EBA46A99FAF516B5AC7EA2386A87B1D1A08CD7
0C30CFE5A62D9A7B99AABF22CD5FE94F59727DBEC5CB935379416E0CC70E35E8
8EB1225FAAAE583DAA9D07C8EAB80DFB17F0F68AEA44901F14BC4AAF0EDEAAB4
25E83AD5CB3FCE87B561313C530AF88B78A63838A012060CB9E656CAEB35A7D3
8DFDCB059CA835C6C1A20D9617932F436B50379162144369D4C4A2DED5D7CCBB
6255284BDA15D5DAB2FE213F7F42289818F3B6A279089AE334B52EF5116C419F
9C863BC0B0447277080D146B619F5FC2DF66E2EF30DB5565E46E730D2EBAE337
2112688B2A04D7EEA0727AEF3DBD23774F4A4868FA7D27B0388CA8E0FF526A5B
2AC37872175D523C3C2675189F460F9D9A58B6F2358C1B4086AC9E43D3E2206C
104192D2F3DCE24E390C76BE79BAAE82F29A5970CBED91A03DAB9989DD23460D
0FA41CDBA818F92C2C483A53EEF555D49926C400B03908012A76A4394E378CC3
73E263E8DB5FA64E257D8C112194A2C1623BE005BE9C009548D37C9E0B7A8C94
71FCD7EB0D0D312F852BEC1A845D50F76B5B8DD92FE496DF936603124B839ABC
B0DEB85BE54DAF455CC68C6C41F151D535FCBB2C2A5EDE0C8C68007461C91013
C03414DB219E8598A906F0A238485FB29CE685D7A2E980F1BB6D29FF9F56D89A
9FE72A7A699BFC5497B978C9E1136659EAEF9BEB2298C14836155A9ACFF08AB7
9F7D9511D365ED05B4640C930CABF3F84FB73F7821D84B148EF55F7E3687FBEC
774CFDDE5B16F168BF6F5502A91AADF6E1609EA0A335AD85CB727926B9366388
F21494A68FA594FB249CD0558B6BB868F29BE92FD8119F9214BCE62091A88E00
D19E8CD1F26EF3F556A828059EEFC61643AEA05124F5B497C012611F61F06694
CC9DDCC9FE659B41067DCFF88A134C8E72D17B35843A8C41ECC08F63B2362884
97354CE93539B9D00040B34993AF8467173387CE594EA994D06A9E36FFBD4D17
E7C5D04008D1B52D9017DFB103D517FD29B6418F154F4851EDC0A53BCCA5197E
AC777DE5998430552F3CE774F708ABBBA696070BCDA1DB055921DA1DB5B1FD71
1856A362E2C8B42EC2FB8C7F612A672F36B9DA28064BFFD831E7010115BA1C03
8B1176FED7D34C5399A22C57AE6DB39511A531AFE8C2EC50A77419D68F1C98DF
D16F88F4876E2A3B375F7D357274E201031C90F72E36F63ED26D09402B658C4E
5537A85FE76F47879A2CBE8A4AC6CEF410371FEF9E13EA338B8D1F12AAE7C0F7
509FEDC71B40A6160D1C91C5B5D1963CB99BA72E7A771F4A1C8350F5858B7AD9
197DF46E3162805C10B5F38FE6B072D38D17396FB6AF3567D1378C7BA6609C6D
545710C00C4DC933059A0ED62032536368907865617B07DA1174C7E9F58B9E7F
6C6949D9B4F71BFF70F695796B5820725671FEA5E2AA50AF363A62CC8F6D415A
1E8B7DB93CB27F0DF3978438CDE7F4C9064BAD30B13C149E8071CE038AEF6B23
1F1A86262B86026A35CFF33556C2257D57B6D888B450B691858519C80CF66A71
B99B61AF3D8689A56080C57F5B376AD70C80DE05C7515BF1551FBFF3D97C80FF
CE6CC04492E89A61248FFD4BA8B5956785A5EFA6CEB15EBBA26E53861DC4ADA0
6B1F9897A4AB10CEE9542E6A1CA8131EFC872E6380B0192677E2061C98D4BE43
7EA40D70F5DB8930BC9E0DDF186E6D183F90F33DBBB38730CF31F03A309C270A
821C31233F4586899C76EE9F2F9F72A818DC1CBEE4CD1CF5C8DBB7F2ADC85CE2
2E96233C2121B800CFA611841E8CA8A45F52FF6E7262B78FEE1743628ADC31DC
FCE1E5A978B9987095CC3BF477B93B1C0C1A15D26FE11265C92113A9BB5A81E8
98182F41608E670F63D35F8BDE4A0F0694B1D44BB1AA1A48CC4AE5EA39C9545A
C927D4536DDBCE62735BDD2C939B776B7A73ED6284545F59CDAADDD9CAFB71F4
DAF6C713A29DB515512553A99289EB05EC27B033CBD798FF4AFD983F0F898AB6
D7557753C77947A551F5FF2C5A68144D5D5AB41E2649DE454276A16AFFAB9C3A
E4902DD8431ED41D5E75D45E67F8125CA6C3ECD91EEA5C20D07F4EB052D653D7
4BD43AA4BB32FA5502C09E7DD92CED83A8ED9DAC0ACBBD631771FE58DFF9EACA
914D471C57F432B83A722AB931924514ECBDD62B40F00C6E1107A36CB858DEA9
FA19EF4458EAB3FB3EF95B5FA93F523F66D2A8070D6EA6468ED6A1C6E02744CB
21F364FCC71F2C69CB10B581931F1AD1282A1BD212551EA3A40993CF36984487
4EA823B7661EB10D346EF4BC67ED8D287B629D1C45A82BE7EC8DECB223B91ECA
0A3658C79B5161ABE896D26C1602F105BF7800BDAEBBEDD0FEBBF642CA3144AC
33B442142E0352DB82A48CE3DA62C1046D85B53B62AD99D93152DF8287F35D36
7F2825A48F5891DDE67BEA0E8BD38E9A5E133920996EB68691283DD9652027E1
953CFD49601F4C7877723F08D97FA1D7F247B50F27F40DBF337CB6806DCBAC91
61AE6E9237907942F4B45D2BD54CD90FBE0D7FF94A353BFB619979FFFD599628
603009CD9B1954FDD6596B300F631E3BDDADFC1870C59410AC5810CA2575BE80
0B6F9B6DA78D41D3F5EE176395305C52348AD93175836F2A90ADC34A115D4582
6EDD512EE62657C97169E45EDC3D2E0F61270EE434B38CF7027EED3DF9AC6CB8
F7817BB5B104DA2BFAAA3CE53CEFDC017EFC7A3DBD5D5FAAEF6491CC77BC9159
3BE837FA112D0FACBCD6A9C4B6E1DFFA8D1155860C36588CC848F115551551C1
F2930F0666CEEC213EFD0B4B9FF4B61F8451B93AB079E0003F8203C6A0FAC85E
72BF513AF1BE63100F2B882972BCD2F2CE184E5B0FEA1CC5F312339E2A0FCDBB
0A71EC033AB9CC2DD6E7C0B6E3FB93C3CCCF75F6EB0097F3DAF761DCA6D59E28
E9D4A57EF72EF015AE8E163EBA26532211F32021A3E9A016BBEA50E1E15337B2
06780BC6013E659EF07C256D34EA6A7EFF72E545C6A1EBDC18EC676B384D0F72
C7EC5AFD8E27E21D801F97F568B2CB03977D442BD8CF9AF3A9B4CB6630F400B6
70B4041C8470C1E7C939018BB61B0B57A484D3A8522DFCC9319D83AA1C0FC578
4DA6B940704F33D9ACF35BC93D0D9E988EFB20529D1DBC674A87F593A182D54B
4EBAE97051A3D3C0F93FBFAC318F10793D2923B5C7603782E1AB4029431ED549
63FBB25ED2D19815DFC104EC0839A5BD65A6299527445EE4B14865177534776C
2E47608689548856C1ECC8E5974A3F9692E1C876220AD96663572145AF618FBF
EB7DB6620A8B843A6CA3F824731B4E6CEBEA527CE4C528DA0C4CBB58A9C4A826
9381E394958C0197D13ECE9CEE061EEA4ECD5EBAED1E737168408E649D5626CF
9DFFA3E4B336D010F9A7465FD3FADD32CE80C86658E05724E72C60E9CE2D2980
D2989D44A7F66A2D643B8DD61162D85B8AC14AC75A308A5ED2640716ACAB0DDD
AC1CD0428EC941F4B89231545D0396B69128D31FDD2A7DDBB8A1994467FB5040
BA9F53140FDF51D8DF347DF48F76666D08E6B7345AD7C07C1FD29F44575A5919
4407FB26B0299C0A3931DE93E4F690BDAF2DBAA0991A0FBFD556C466A628166A
5B7F3E68D608E784AC52466773EE96144FB46D98E33198599C23432836E929AD
45993BBF3592F990E30A136BB8FDDA9E66733F6A2B217BF1A3DA32E35D96884E
460223D734EAB8C6F769F3E1155858018151C34AE62AB909C7BDCDA3645E961A
57CFFB39EEE8ECF06427288A70977928B4FFC678092915689D8F41E224B994C7
18E0D83E9EA18EB348EC6315A7223AC9721DEDECC743FE2A339FF8166B6CFED6
7C0268789046F34C59A18EA9EA38D06250F47BE43A79837E2B7A4DE7BC53D3A5
A99B60A35C0B20D85D9AB2B2AC683AF1E13BEC456E1668A36B526D5A1BD419DF
C9CFA50A56AC3AE7E23FF6810A300813B8E611C3CFB4EB52D1E358D46DC15E6F
55ACAD8B8D314DB394E1C28286DF5D3CDBE31E271849F296558AA0D16CA7CA3E
B9BE0AEC77BBE95A86CF9F685984CEDE882736C639EA02B48E07D49D48463790
5D38533E9FCCAAC60E35BAC8A9C38B52BCC58676CE3559037C2B89BE621C5609
4473C1B40AB42A2129DE1940719B7B81DA3B459BF2B6BCD115083FA6A8D8DCAE
9BFF8E3741E12CF5080C7DDC40A984414D4E92D2D50A9F347BA00B655B7D5448
EEBDA51A3CCD0C4CEB7E617E76A999209E4A23161B455214802A8C0E872A2BF0
68E986585B76AAC08A8DC4DCEAFD6EB761800B3425C9E40D46CC7C06C1497B18
8B20781223D0FDC53D40E0E4E9972825CEFCE7749F683442ED626BD685BE2CAA
4EBEE11AC7326113AA6D7195A0D09B350396C6B56097FC0A868883CB4537F132
D2F9F16C4E91923BE73BCC407B1163273846D6B869012F07BAFF4EBDBAF56FEC
C97FFF404CB178A2DD431A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1440
%!FontType1-1.0: SFBX1440 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1440, tcbx1440, labx1440, lbbx1440, lcbx1440, rxbx1440.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1440 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-218 -316 1652 915}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76EFC613FE56C
378A7118B0589B3EE5425457AE310AFB3829876138A59F58D965843B709A0F4F
D1AD54875BBADFC803A755669491D9E98262991B9634084E8E2BE46EF805B219
D18DE35ADE9A8DBAB7AB761864BFB6A27E5B421C32CEE4569624D9308A32B426
FCFA5CEB883444393CD7A58F9CD522BA73E17492DDABB7E00B2F6BE47F585EB7
FDDBFF33F1B5E5465287717D1580105BF3929C09EC621CEE9606EC49D7051A00
11935EE728A2FD47BFCCF00C93EE54910F77C1CB8622B9CA129D466746BFE1B0
594A9F0C785F6CA67161EA1480AD4EC6781B9CAE9536F5D3AC6D447F16821F77
AE2705279CF3DF4E1E9AED81A0CBEFBD61808E2D59AD970264A5B66D1F399DA2
55BA0AAC8EF1A1E16FD8240D577F5E00E0040EEBCC193F074FEC48DF30882551
E23D64EF84283F9640AC5F60EB1F26CDB79078AB0C0D97D1D6297D092380D4B6
6A2099F06A513A78A3C3B82A6DBD985A0DCED7150B19FA42991A3D408FF95978
15D309AACEA8C5C0AE812F50330CCBF47B4759C550D49173127DECF05D783DB0
978A366ABD3CA7D9BBB6652459A5E19F9630CE75C2BC7BDFBFE0EA3D8098CBB1
98CBE02F196C0A0C5E976DECE72778358CF8D0A79A8B5629A6322716CBFBDEE4
934E8782E716185235712845BBD03896BAA8126E2E114F06AA9A0B2DEBEF4281
1D4D63D49BC7C89CBC8170C17B5CE694EA3048E3B2431BFCC49BE06BC16267B3
3547F30851E3F7441B4DF4A7A4A0341CDB439F8D4CB53BBBCBF09500FBE703D9
617BF4ADE275EDBFE0C8692AFBFE06D320227474097847EC062917CF1B3F675B
C31AD512EEECFEC5D1E4B54ABC07FE1B9315946BEA6E4224FE51C7D95DE4A9C2
44845DAE8BEF77E829EB5FFFBDE155F7118DABA2710058926158DFB7A533AFD6
90A5EA2C36FC3CD9E2FF4118D9CE49F33AFA3CA306FEC9AFB59E5236204EC76F
7A3C6349DCDDFD47AA3C9CD34C706AC27CFDE15D9E907FECF478F490F54800DB
2C646DDA53FD1F267F5875A9AC8DEC3DF640D3C4C0A748426DBE619DA65C070D
9E7087C2755D41C6192EBBCEC15F12A4F8D9BE40B40335D2279A457822302488
31757D9168908F0B8E1952D8097633836D649941EAF86B33F38B8126ABF30287
322376ADB39E56E5A0FD3316D513A048F34512336F94DAF510498B635624B631
DD11B651016B20B867FEECF3A82AB3B967D549895AD2EAD722B6A3BBE8999D9F
A5A6C956FB2938A9F76ADD0BF43207DE7DE70802B98B9C81A16CEB19B23657D3
4685F351CC0D93D513E044CF3484D2F55A8DBBF434C5356276597C5EA62F5A4B
49DE2FAB14BD90C887E7FF33A06D9F312602B8711E6F7285D52F30DF1555B26F
62DB50DB237D0E6DFD301833855FE2427336FBA63171D385F2B42487CB337993
CCC0FA8B58D6237E52C61F0A22DE454F58801D5D00F150F6E6E69CA0E60E2698
82099301160C3450D2ECB2A8DA999047EDD7D4E25ECA50FE1EA1FE7C727B7E6D
D384F6035F04FDB35F1847A262C2D2385181E3F22BE45C2D6F1BA1D5C8038529
CB897DDD5B686826B5E89D7F005D597DA8D33C583E9784E90BCE05BC014C9573
6F44FAB37523E4941D0FFCB7BCC8D0C7369D870BB9976CC89743D9892CF379FD
8E3F1F9C639D860F9B4153AD3E106366D0B0064EFB9F8B01DC9608D9734D002B
66FD97AA86AEAB1BF32AAD0BCC80BB64F34C4D4BB7ECF5DFE249B29422A367E4
6B329F10813DA0CE1F394EF8AEDA1D0EF54BC676F41C5E45B3DB5FEE796C5083
512B168BCF1ED1E1CA061D66E7D2EB22BCFE8F1C5CEF74EC07C6D9EEF1911CAB
F3F0AE82682B251DF566D1EA35510029E1F6D3966CD6DB3BEC3E2D09ACAA06E5
907F8C9B1450BDEAC4AA2C54E46C2CAF59888C8509D8BD1E3C562DA6A71D08C9
DCA5C2B21B9A97FEF3E40F90713D4646CB913A984107090BF34CFE75D986E626
7088DC760225ED905D995DDBBB7205AA2A41A3CE4A3F375E7C5079B9D8FCF57A
797B5A4FD89A01934A2E2463B895CD19385C95BE2E86F99352A6DBB5512C3566
10B624CB772482920515BDA8A8D227D42050A292E989037E08EE4B66AA9EE009
B340F669190010DE80FB0750139C33AE368BE204681EF627A2AFDB8DEB5F1873
58FC661B65E3AE472317EFEFEE9C9F6587E3A5B415FDD84D1057688110340C2B
BBD50F0541F1E48A71BD373F07A51BB82EA7D1DEE101693C94600BC8D8854C85
CB053934CBE11F8DAE3CFCA2284643AC878A542DEBA7326300266E6733368FE2
ADD0B52AF04530708DD523440B8A2DBAA5A34108A018DBFC1FCA6AA3559B40A0
A0F16AA8317DA3CC28F936D0930547609A2CF40BCC511B0EE9FF31BEC789EA6C
73D669CF94668C6F1CEA5C28660640D7E17834F1C75FF76DAB5975CBB71BBF81
64F6EB0178018466DB240C916D04C885E161DAB614185F1634094D23BD188CE7
4175526415CA118A1F4A4749D1A83F4B69CBD26B5A0FD680DDA0668CDBCE4FB7
2BD11F17B6187D9C0F099ED62F76E7BBC0581A708D05C1DADAE38C484E22408B
A5D2BDB31A8646DEB041FD2819B1206900152705ED49D981E5B0F80735B7B7CF
4529F6CEB39281637933F587B33656524DCF4234D167F6AD72D7F7F88910A6C3
C2D6EBBBD5813BB11DBFF5980FFD9425AE6587B653647EB6D77A2302A5B81A32
6622C31D8B7BCB9D118DC089485C5F41E675B238AEFC6CE2A1D5A47A9DD001D3
BEF8D09021E4A0527BA7EF59C3DBAC5A23CF59D82F7AC7C3236A9E7346D2A576
EC727A9CE20FD3095D95EF409D065EAED9F6B818C252979D985BBE13FCF30B8F
99ACB72C1A7B738D7F1E99ACDAD7AF77AC683C0FF1033BE01CC8A21623EB7ADF
3D71DC802866F884EFE475A3514E5EAC226C5D6CDBFCC261BB5E3A1F0B038E46
12C777124B81A2269802CE4B7064ACD328AA21CE547EA714C7A45C4B016755D8
D7767F0D40BAFA9E4BBF3EDF079588DD8ED4ED552C1CA7780A417DA8B042CDEC
31367ACD446FA24B13FA6E1ADD781FA309DD3115141F83FFE6AFF937CEECDE1D
FC1F2E553657A2E0B1ECF9E32DCCC856673F261B5076C4E761934F7FF7100406
28CA413C1FA183BCED6066FA689388D94C622AB1762436E4276150B16E40AA75
E536A2CF9A016DFA6EF00BB3F49FAF53517EB9C4125203C8FF1D881F6C47B6D4
1A5B712F2C19A1C1AD46AA4BBD9A1DDB122015E288871EFE935178BC73218607
82E20DD6C2C2F1378598CC70B46CD7200BA7FAEADF27F850FF69817FAF97B361
2131A2B749B69AD4C51F95603B8D35E9C9F21A4881A77393B396B8C41A5FE69B
A8EAC0349294232EE58EC7034173999A6A9FBF2F42FCA76BDEE0439EA954766C
4C14F8F9B82673294E4CB2F8D01C4CD2B524B40A3AB641E189E59579642B5A8F
D71C6B6362466410CF64748FE373730C9106B03A20E83C8ED3A37FF8CB8AADAE
DD952D790E32BA259FC90B4EC878DFB873F1C78F4B1240A9D57EAAC6E1D00971
691D476A87F0F2C6B5D27A5D3EE7D57EB3DCD1349BAE395715DE7E2D6A60AC0A
C683C76A925341734F671F3FDAFDB62209B5E422CEFCE75946AD1EF858DC7CBD
CB8DA9F71BD2C5B15B89EFC6E5F571A5443EC7623805A56CC64B611CDD52912F
3D1247631B05263C2571B424C94C77342B00464369921BBE773CBC3661D002AB
19585E01871555906372E87B007B8C9A43832B289D180FD1FCEBEAB98AC97FEE
43FBFB8DD3A2FF2B12B53F77651229E66C594784DBA4A4B5EB472AC455667362
8FEE559E173E758E2B71CEE8A0C14CDCF2879A0F45D16C05A5A44EC01DC8F6C9
B42A3BA587F3F4A741EC8BF94CA94D8E9CA844C5363CC7BC946938E09D13FE9B
11ED5A5F2EEAC14E0C831B23E937A2E55723BBDD99B54127DD8B231EE7766F2B
7C63B4FF6F960A4A3D0225B4FC140CEDBC3FE04780589579481B79CE028D5126
AA8996645A84FAABB61775170FB57B1D202A3BE5797D7311718546A3B83C633E
455B11F2D86D581289EF8FC0A3D0A82B2004FC577B3941116088DFDEE316ABB0
B90E9F27EED1687319534EF40B0F4888B9B7859D3D9CB049D5D9751E11228E58
6694A33545F6D5A30B401DED3C0C39312FB475491A51AC4EB2DF8293E10BB674
6815D55F0490CF4F497485CB2F15E96B39725C13676E097E0671326140172594
A8DAF57749A925E0B59637B6EDDAC126266E30577836045D72869626C97D2F72
F982F54D1BD9126BAEBC8F81B1A93BD9CEAF54746AD6FB4289EC577E7D6E2AD0
C3B36FB082DB96196652FBBD224F0F02C6203908C0654DE042864A1D5AA1AA95
5CE2E21DCE5AE2D03F15752D5A8AC3ACCFD0C519F78259EDBBD7DE8CC24538D8
82AC1E0E12B521006DB6861E9B8ED51EAD234B163FCE3BE2292943A9A63F7AF2
93CADA80D830B53A27A4D686B8861527D71899B5F30480BDEB9BF805E0B9A503
91CD5F4D63D091A4B97FCE0FDB372E81360F60B0AA12D910AD4D791FA37BAFE9
8231807317CEF9921B7AF0EA09C422E19B220E561160918381A6F629B801453E
D2F28B1B9EDBF53FFAAAD954943CEFBCE832F6E57CD482A248FC5F6FE3C36F56
46D347BE048488706536A931F6AEDBB4670462BD7BBD55091B92B805F993F547
E9DEAA338D3A25D41F2F6062406A682B4164A1150E03D3A9755B9041BB44EC54
5F2ED526444E8468ED6AF03CA4433FE5239CD9931C92317C1B73D92B41C75E3F
A0743E051A5CD3E1C80121D077C8403A235397317C7F381777E4EBC7FE7488B9
17B97FA5BD7CFB60A8D474B57D63DE37326124334D45A5DCBDE532C9857825C1
83D793172A916711A88E09218A7C70E4EB6AD125C0F860110680663343C5E0CA
4A16FFE88896B571200B04D84F9EBD196B5B885308D39750BF0381200CC97A0D
090E5F37B5BBAB334EB112D075AC6FBFD889D8F47774DE3D9C87CA7435DC8A60
98EC6BE0A1C2BE7CC530308305F6D366FAA9C090DA827BF8D4020AF7E517CE32
D19CB928BB457D5BFDA268EC8B4A8810A60E695B6179070C904B4AEF25DC2A24
5FDFB7ACD82556A0D4E648240D867B65FE355B1BA190E9598324D4264B30FCE0
07CCCFFA67B1AB5C4EBF2C58979DF875048A6266C4D546B964067BE20500304D
B2DDA9EB39BD6D8F6FEE8F542A42078E49948BCAABEC0C93FDB81C1AADD7402F
11031BF8497B919A4816B3586A008D953CD802DAC1009957809D707330B27B99
9C3EFCC9A5089070BCF29AE4DAE6EE62A23CCB48B11DF340866C64AE58303D1D
353DCBDBE24E4E3B2577F5C2D65DF79D058B4C5C980843DD570C69B21715F5B8
AEEAFB7F864498386B6BDEB175E2A08152E6661195C76A6AD7FDAAA04CF4BE21
51B9CF180178D6574F6C0E054EDC16A1CF2926C4512B3A1FE9844FCA12E984C5
EC7CA3EA2DC880335E0F5ADBE7BAE83E8010294A833875F9F16E68C2BD8621EC
7F606B995A1260A131A29D7F2D8B1927CEF503CA4D3AA63B737B0D57E5EE9A4E
108DA9F95CD51AC5C115194DB0FB0DE5D7D2EA35510029E1F6D3966CD6DB3BEC
3924D0575B231CE230951B3CEC622EBE16E77A5610254578FD8D13A390A174B5
CC902A26F3194A15D90A41A0E5069DAB9B4C1330AF1C41924FAB1A539C6BB340
8B6FB0408AE375FE01F81532D82928358821227C1ACD82EA64BB4C06E86C8E9C
9B73F278CAB016465F2B940F3B770B61EA9AB08355F6EA76502019A58267334D
91D2D27C565961C2A6CB8B3DA74EED74340262C0226C0464BE31B87B5F33F5A8
0361682F6D838CEB488F1448905549CECBDF7BDFC6FA4F7B74BEE20165B1BB1F
23EC79C6E98C1667EC1E0A7DAAD1AF7A9F55093F0FEE24ADF9B21AA9AC2DB5F1
95AD62B913E904C32606A118378485D9F0823D18E5A48BE1A09347E448B703AA
1319B431882627F9AE3E7E279FCECD3C4A7A66B2B9DECF7FF83F811F901B8625
E957F252516023043CAC25A630DC6BE62BC7B6E4C62052FE17FD87D3F3F3EF5D
2616577019B7E1CE74F64A01FB6BEDDF2E6FF27F4E5C64D1E455A4D8FEE85D7A
927412507703081A06678C107DE82D92BBDD30D76ACFA2A960141423EAF95326
93EE058EDEFFC19252B1B387B00A7C75ED147E3CEDB29547486C08845014A958
7212FCF34FA8F2153C31836BC871FC632957F373159AC49F917FDF768098D4F8
322AEEF5EF45A81F2D3611183D9645B9BE5281CB07EE023427A92F9CEBE8F0FB
3A1E91394F79A28BD7C8016D0FBDFDF72A31037A31C0021332427E3BF24E86F2
F2D25B5ABF17A2BE196E5E1366EDBD5F17A4C1AE79A217A315FA7B7962AAD680
2DBC923B64DA48C4B5E6461B2C08438D5EFCAFD05FEE8633BB86D3F4D7986CFB
BDFDDC313CF6AEDBB4670462BD7BBD55091B92BBAC7ED5D22FA279F7A15337DC
A7EE799611BCAEB8A76A224EC7756777361FF22160C50229F089A3FA319936DA
C83ADD89BFC13FE85E08CD504E139862EFC2E9BF2B469EC9F8C3463B64B5CAB3
DC4F46915CA708D66F43400923A086014F3AC293653F266B625F849650DE4CD0
EF63194EA7DD0415997102444E678664FFB7F6FB120FE56BEEA38DB06ECFBB98
4CCFFF49945CB5D1BFC428DEE3FBD86BA09E43EED36C94C45705EA9242C0F269
9B53D5C79BAC678AC5C650C13A327C0BE41F26E4FF8ED3F35B5FA5BD6D0F4E85
EF831CF3962A1365C82CEFE71E20E6D98673B464F07EE376D53C51E8BF0DFE03
973C696E5B608F03B4897CE7461AD5BAB068DFDA6FC1A01C741A7FDFC47D591E
5274917C296FD50D42342167AAC20DA932BFA4FA7BD4BF18922CAF80ED45A31F
9FAD5776CBFBFE5EC6F4D52659D651773A61074778EBB7DECDDDA512714A6757
AF40686EC196567E5493D4D82211851874AEF49E764E4677099905EEB71643C3
FD8AA1471AD4C65D9D000DB55F8FDC46F8C48F4DDA1A1A2774E6824DFECE6C7E
D659BAB9724D3CFF9805301EFF41F65D8A739ACC35A8556C09CB74B3ECFE0BB9
BFBFBB1AEE5185ADC53165413E192BE83486154ECF786445584414BCA564BB29
7A44C8824738608192947FA453D0E8213B8448B48CB160EA6FF57DFDC72EDDF8
52734CE64A98091CF24DCF30AD3A4AE79D33753CFD9C66873C4480C5C6AF4935
94567C69802D799A6160957BCD0824CC86C82450C6617D07D21ABE6A6BD288B0
F56017059EC9951A1D8A89E857B9BEFA21053402A292D894300A43AE8D2F22F6
D27A4F1B6F97A736C9F204946097D6971616F961E9C9893E830164CBD170EAB3
0AACA3DD3940EB3ABE386DDB1ED2A57CE4D3F81A8CDDB5880CBB21B066C69358
F1D0335F30D1644512270D93EDCDDF3664B9A39ACC72FF67FFA5F6BEC5080359
27C341829C8A6B3CF7B639728F7693C47D32D22AEA28075E1690E46D14548683
16FE992916C3693E991C966B7777EE360A5D1339D57AE2E8E54549F31D5077D6
80A93F55BA712897BFE86D64C36B9E9D45B9BAAEBD9C17B06FEF1B6E0C007D93
BBAD577CC106B509850FC71815DD87A8CB6D276DBBDC6B25216F2FF51B1F716E
C92EBD330729C6CBA08F11CE21CC8F69680233B5FD36B6F9F46A436B59E50B60
46A1ACCBBC65B12205D3823EC112A401CF3023013BE17358B6BA20646BE94E15
F0770506D1F8055063552AEF8D006DAE7825C584A613FACF3C22CEB47AB1EC47
5D3B9F70574393F754967785F6E706B9CB919E9B5F60213A13F982EA7173EAF7
7A490E66977BB510FA6AB55E34B6CE756785742B9DDBED0789AC6FA67A39670A
4B2DA57B8D8BD2219FA91E94F85FAA5B8333A83805640C5D11312C7619222427
DE74E3C08FEC5DFF59923C54FDC1061C240E587D642ED6A9767786AD8001ACFC
1DE34BC4D9085F046DB06BFF336348ECC3B286852DC98E7DA8CA4BD28D84AB34
81D797C461B037CBE443E061DB9AC196CD2A10543E0273B2F0ABF4C6D22C48F0
08A13B1114AFA5F9F3B4A0DFC6CBF1C53BE0B858CEE316FEFCE1203FA0546707
7ACBEE1DE75176CFA62F5B90DE89C75B291BDC9BC3E979B308E71A65EC1F8C05
ED27462DED06BD1290191CAB7590C769C11568228B87C6F187B9386267A4A669
01948F13EBB01D01195CD56464B9DE8BEA1505C82D2278615C223E29DB45ECC8
E55495FB8C61AA3DD150735524FBB355183066983F1E8E859A28528C77903539
2AD8D7E20E0C21A50F0A10BB20BEBA9AD6C126A72ADC4D9C52257C6D7F359C24
DD9CD664B2ECAD898C714D479DBBBF5C4607D942630FDE180346B9CCB0A3C17C
1E493CCCE654E82D2393AFD0200FA5632C0FFEF90A864DFC8050FA52A1A0B296
1B6585C3BC8751B9BE474406354ED9BF6DE93E5D88DAE112CB8F8B6686EDDE00
95284F4AB11866852B317967FBA3AECEF052998D1329191EF93020DA008F37FB
D25F70C41922433255B67FEF5FAB89C5CF15C5AD037805FBFDA5BD16A85C447A
D54A7FA485A5CED218344274B02633B5DFE694A457A6FB3C500B5BCD65869D16
1495BFAF8E6A598D940BF1B7AD109FF63AF99AB72D456E19DACC83FAD1EC0ACC
92473D36B94DF25A8055D7489FA91679E7FBDAA18888C8FF0E4BA40500EBC372
F1CADB5E3F384644DC16DD3CEB6BB8E72446E57527CD28508B51CF2E397D0036
0AE5447482F8AA8DAF25D0FC8C512238ACDD24422887A74EB43265404CFD39B7
6FA60AB1CD339143A15CB7EACE2B71D116EFD5E34D4AB550FA879014528A49C3
A85A094864E256176574204A324D1EBB4D96AE65C95385D13F09AD6B4176B3BC
E132113F1FF8D019DBE38EEE5BA19AC90D62EED9FEDDCC30DD10354FF52062A5
7BB4AFF8EC01EBC403429F54DA01E2EB6615E7CEF35D948C7EA4105A252E3AFC
EB539775120828C56224CB5AB241B70626C45A3FAA8CD2C9BF94EC9399A01A44
5CBEB5DE33BA733039C040E4C728D45B67153BA19E77E0F3C735E7C196F25448
616EBFF6F4AA214429684775529B87C77A5C154B3A5441598B9E783717952000
562A4443AA485D6A574B0800368510F6B3EBDD8FD5A25B6D22FDF75266DD860B
99D577AC63CAC4E41625B6CBE55BB39D8EABAE1329E588AD8CD668493D553E6D
1B5FD0E33CDA1C1701AECC58B5FA0DFADBCBAAB3E2FDC05E64C08215013ED6A0
E3C7CC15E15F57CCF8BED277B49B8B609CC904271FAEF7A8806B5485CFC38A25
DA7C49F7B947784E7034070E228B1095657EA887A929B5439EDFDB983C046C1F
5388F3A98525FFFCFC3E6DF11B19877F54B6215F9FCD5D52260FCFCC05398702
81C7CD4FBD95358912D9C12702B485D892C4ED21BA378561E191E5C55EF75A55
4D89E0F81BC3540E3A44B516E7FF088E0A6104C033E27BAACB4739CD9D68BBE0
BCD5C7C394077EC4BB3D3AB192B77D8C34FCE000CC1DD412A4C16A689D4B5070
0F35D2AB41F11A8AFEC093F99B9B5B2A3126E556968304A2CF16A4EF021B951A
01447E3440FC807C0A5BC2909AD598E76193EBD894600CD3A80DB185F0DD6CFC
D9CF65A9C5CB55BF19962DDBCB0944F1E152127ADCF05101C1AFE4B1CD5ABAD4
3EAE696FD1F74780394A5ED827EEF0B2107D86241C4B3815B7DBA0D648748146
83DA17825376C9770275C5C5AE70093518AD9000E3CE315A4FC063D7F91F974F
AC8F8ABE7271617DCA68BABB754902AB5BE844A1E9211117A3C25D1EF44EF145
684EA1C767537CFC73F8C16AB15AE90C8DCE8DB0A4651CA48A802606D8312C98
34721DFB6960AECFE0940D21D6438C6CCEA778EC06B69431F782052BFB3EDEA3
11792CF3C551FA207A8E6FAA5D81530060B195FAB3094EA5D90F56B6F4CD1075
1A5DF78908BDA220E005A5D56924CFC4BC866EDF47BC7BBAD48CE6D00A8CA9E1
4D48B3DAC8BC23B0EF15C9E26D5A4C0A304666E4D844F28DA1C8299697388256
108F0B6A9A8086548A8FD6D6D5E08A1E0B004534315E9D355618B8706C500032
C68593E7477A7648190CE11362E560B8D4008E222E0A626CF2FF4DB50714E8B4
75D660F9249BB09E25134D709C289E50E2941925326D792E33A4C2C1EA29EA44
F2C80792FA072996E1CACAE3C922AA636F3CEE876A43B9B03E1ED2A26A63633B
06BBE169031A51B8058E984B0F2E9E610CFDBA8CDC9C871BD38ACC4F2B176F78
2DABE3FF87355A20A1089D1EFAD7BE9460ECCFB206BA746FCEEE52CF0393E64B
4239C1A9F1A8DD61CEBCF3F895A194912DEAC61B7606A35FBACA3360FE005D8F
077FD71D34B257F660329C060263F20D840054AB340E5B25A741531B4BACD58A
D35AE01B71A87D810AC3FE330BEF6188FEC4341FEE546C0AAFC0F22EEBD93739
D8E4962220E44422553290493116D89CCE7756E5E5DEA26470B231194E9E5CF2
6BBD72F77A2A779110249E2405110ED483B57FA1AE8A5313E6D21F67FB6D16AD
3AF93F44CDE174513001FEB070116A145A4439DE39CF1BEF6F2E9B271BE67048
A14A8C77F8A062C506DE9DBE039CD4FDFA838AB2C66D106F4637FAD83B7722B4
8B2CF10EF35AC2365E00CE5D57BDDA64417C84F84811D0244595F85A709F3A49
CA746D4F16601485F88A1304E2429C1DB52B9433D8898229CCC2EA2C6CA9D786
F6FC61B7C9EE627110379BCACA2CCDDFB59E5A4D9E2C9CD6BF1A2F4533ED76AD
49BDDDB099BE09D7BBD6B7E93769A7422D11CE5166AE50E83A29592C4FF26DF9
999E3ABC94000B2D142F654C788EBF9A743B0CB701B9A7E61D4FF95137CFBA23
D50494BEF4E78183DD701FF0D0FEB1A54F1A9315E7B2BF432EA8E7D4B123937E
3B033342843C926F5F6AB373701920EA766CA387A291D3F20531AD5A66967B75
9680130D5993DE256BA78D04006F2F8F49324F52982D43E149892E0FE498CB89
522DF1DED2405D5E61D09346DD19DB4920F0B8EA191C3D23E2AE8AED6936D722
72005CB758F813FD2E290A3AD2D506C4A096EC4FE387CA73F20667D72C6D0870
F26FBC32EC4FCDFB89A6C7E064F737487EBA3B72784952D2B9B5AAE2E7977438
493A069B0818419B36D24E39D4AAC4D717EC0CF408C2874107E98192CE84B986
F0B881EEB1CE3E3291CAF8766C56BCCB76FA07ACC60C6E686BAEB417E8BAA7BF
FEB16DC6C92998DCCF24992B4B7297D1A3755BCCDEE4619834FEB79BF7629297
411CCC42204ADEDE8735D67AAA555AEF58FB5F0310E89F8417FD6D1A6EEC67B1
2E22D00A2EBDAAA501F2F8E7F34A78613F7A37FA0375CBBEE5266B223C04E3AC
F1A86B1C60BCEF3D1FA2AFF09F46B0799F4EA4B2C0F747F2EB76CA2268CFE94C
0D95CCD9E67963016A1C77555FF8EC6F39CEC9BCA654CAFCE39B301A78FCE233
A82D98E33EC36120FB8B7436070F4ECFE8B485C8712BB9E89BC5D93EBC44101D
873F0A7ACC029595A5EB24F77E15540688334556AA3455F2BB789B99A1961517
2210979FD7473840F05096A631A68842B689BBB4F12FD99C4EE4D91362310C65
C89EA63CBCF0FCFC526DC1124E63873EC91A0E12849C48835E155B979FD22109
BB7407BE820084387B52C36F1D0A27CE5AFD43868452DA35B2569AD0316D494A
66B790951A4D0FA732022D38AEA44E7E8436F5B998263C2E8DAE94644925DC68
9E6F25277EF472938F522CCEA4ECA5DE02CE1AAC1991DF0505EFFFBD41365DF8
FBFEC85F1C8B37C5E98DFA8DEF6706FF9B6A9127C85D99135F7DC66858D3738E
A82346C4B0D098D8660D4118EDC07595C0A0E293087CF2CB732ED3104918890C
67B2C9138289439B3952088F8E0B83A029478DEE4DDEC9E8B7A7AF5AAA1B1E22
C2614EFC317B3FF406B88FC072D4124AB2EFC33FCDBF9C3DC947B0D1C8958091
21D331D71DA9FE805CC5EA6F908A3A13B4DFCCEEB0FA4D0BBEE4BFD5AC5B90FC
438503492AC7CAE0A87EE783B26A8D2DD5275FB3FA83FCB1D46F0F497CE1DB12
B498182632981E69E8726B0A8DFE3E71A6975060B20CCE5F2336A552C5FDADC8
DE9665187EDE49D9E78E6C1C10E37A0150FBF1CF6F5032AFE3E4B5F3E4799B15
77683F0C7DA33FC55340CD04C2DE46FD812FC2711A85B837C5E3FBC13A8676D3
77586674790A1B2F9E6C34B777069467418A8069BE6DFE7FFC870CE8BDA6CE24
7D126B5A01E634D9646DCBC7620536E914EFEA3DF2EDA82B36134A54F5B311E0
DE436637256E79BF3DCF952690AD87F4FA9E22055FB9643232EA1E30B2C50CC4
B41C3770CFCAAC90FCB042B180A1F830040478283F10CA8969734E33B06F7692
EACAF559833E0A23E1A058467B462DDFCB354525EE444D7A0776F6C8D1E0C67C
FE049B3CE15E8A86C0C6A28589D166537C0947BE0B039C7ED47D4D0754C8B563
875A87EED0E92345C82BA543453604F8F3ECC5098589DBAC412E1E0D0D7F4AA3
5E8D3D960BB44C0CC26B453C12B7CF56529624E0647922AB01FF3DB8054D8F46
D6AF5DBC6EC985E2BD0B769C72A98B22095EEBCBB2852721CA177D8BAA3EFE9C
88468B45A37AF0E86E6C789BD291FE42CAC47150AA9D6B2172DF32D7A3218C24
3F6333BE317CDE7B4C68F1B314143ECFA727237BE9BC324766C3B5AD01AF29FB
97C20A05C913DFDBD6020D091D74AC176563329B372521BE8A6B687D3E69205A
002C9113C1E484AF802ECAFD0303E4A07D0F381A17581FDB00AD22026E9695E3
EEC28DAEBC206B0418284D5ED121AC4CB0590EBF24F3EDF88B48967D98106061
9235C69E8F810547AE0CF5FF1511C290AA7356492198AE43798448092B8122B4
76F6EA40AA660A2EE89525A46E5834B6A1DBF0187E9B04A251E2E0510B1EC281
3D39FA5B8EF4C44AF44C3545D00ED61C921E918DD9DE2A4B9AB48350AF290B06
BCE8388458DE1A2AC116B008BB7774B07B66F5A9C193033E2B2C3E923B26BAA1
825319592035168EF6A3A226CF6F6A5CCCB9ECE98B0125CE3A724DB4B2A59283
4603CFC5678F898BD22BF0B24BB80ADD8EF06394FD1BCD4A9D6E3DFC3A619163
04C380B2B3406956A4E58490FAB15B2F28A4FE177904E2B2B4D868F1E69F8ACE
7D99CFF0C9FE1B91D174453F5F6D7B3B30333FD989B85DA4CEDD8B299165EE08
2D082481A5F5F70EEB67EEBE74859B7DDEA93951D727E649A390BE9E2A6A2DA3
188A8DB5D7DF41434121446336047CCBB83DA702AE4F7285D2A1496343A95A49
D35A80CD2B220E36381C73876CB8361EFD8DCDEF3565C9F1E36713DD24616D68
EF12176667977DFFB2163C52A9D5D459D0EE6936969A3B5532AB05818EF0A13F
E9254BB5FF17EB88207EA18ECC5D63DC227B87DEF8BF38A7FEB52B1237376988
2F30075D9E90E828DF4FA0ECE6B33F8DA47E155354B7D787603AB3BB7D6B6DC0
9D95BE57882CF60DCB4C8C074A4B48ED64C48EBB8D937A2320BAF3DD6E116079
4EB3FE50C43E34FEA35438D0F1C6434B5B2E8599474ACAA32FFA2D2E286B76D9
032D70437E9EEA16E85D05DB8D8FA17DE4437B3C5C54ED95C4DBF047801E0C21
0AB5411696EDA3BE0267AEADAB52A99F827710C24EA5F457B365A1684DDCFBE4
CD6E3CD6DE10245CFF9F27E090AA436776796712B7CD47EB1DF86967505BC0BC
6EB318FFBBE63AE3A49F1A1D0FFEBDAA1EE4D01B6ABBDC91262BB39519388374
3CFB106380A57CBE2822BBB4B7206C040E39F8460C3D21E3396D9FBD9CE8D78D
989675D685F42E5390EF6B2B46A2EA7E4DEC8CFFC75910E171A49136E65F2D5B
A3B4F6917269702608740D0318276D4A7B57C1BE8BC5E1CDE5BB247F4E905687
8B6C77E9FC6CA44843305602E68920BD14483042AB223865DD7CD747EA8AC328
EF6772A5AC6E7336600582AD64D12F67C55CFA99F62A2650C162FC45189910D0
510FF570D3BFB08054094286A01D1669486647EB10B7BC4A46FF260D30B83DE6
6DE5C1AB128B63963BFA56B84C0D6CCC4F1F79BF2781939004CBB3420C67B2BD
400774CD5B3E7BF995F2A541F391FDEFB85B9D548E0BD9A6A87AEE0535EC47AB
F13114C351FC9BE6E72E0F860926AE6CDF832385396F368CB09D00ECBEA1FD1A
6398945C074B59A932C6D0F671FD4D4006984970567C93A89876D0A7FFFCFA90
2EF3BD536054F9CBB9A97F88233CDE00335064C00738E84F69C76E9DB3B26521
DC85E97BE3FAE362B7DFC87484172715C6EFEDA875C77876C07C71A30EC634AC
DB521B42117CE4D9C37731C67251008F1552F1D7559193FB9158B84032B70889
C6D1D2847EC57F1ECA612B25462AA107C68F5D73E88E2312A7444149B4CA9D69
A790E2BA46030CF555CADDA30118E50564CD3049F78E2D1BA7DA673E10614070
06C81C5BA0CBAF5403F0195B1F41B9DF7FCE761A342EBA078ED1E1EFD543E7D3
F1F436D033846B0FBC30829E2E45F9DB888425B3C19B124331C85689DCD1C742
2A58BCCF984263D9D2DA26723BDD9D8458D22CB66B1565C750B35545E000E06F
8BCA5690218ADDCDF1FC01BDD71830694A75BF9CB52149A96FFBBE3C7957F014
8F1DF401D143AE11BFDFF41290D6C1D3EC495EA4A8B5C2D26AD07E619836FD14
4C9C591A25928331D76A5E2900F4772B9A98569A36289E5F2183864932C94CB7
1DD07F4A4DC16D36999C387B6935D743F13FFACC71A4C138DAF2B849AB96F077
6FA4887E199C1BA2FA086F857A7108C922563C84A6AEA18B7BA2F7CBF5F2E410
B99361AD967820A1B18DEF6ECCBC2916AD905E1E4298E59B27D60DD6AB18C18C
233F847828EE753ADB5B4175E3393C1FE759BD41CF1EA1B0A4418C3899E57EB5
65AA36EED5104997E7183FC0B8EA03E7BA6D523A83DD9020A30D21556FA5699F
8C004D1D1737829AE8BCC54BBC2A6A539817C18E0030EF1F10989E2DE11E47B5
621FC79931B1889C50567B0E12A40750C214C5285EB47ED82EA81CEFD98F06A8
65F550AFF1C90914101DD4EB60047477123A6AEBDE3036420D6F33234C1C95AF
E29261A12E82BA6D862557289CC06F011BB5C1F17DE7DBB3EE20D42F3144B328
A7E6CA8E4DC23CAB8C57EBD23178E32E5BC9FBA177881B1BFE21E3F80C83C308
9A82137A2AF9DCA53B73350E544E61BA4BCA3A659401FB0D456A7A2A1148F45C
56D4AEB75794056AD457396C79820325BEA6C9EAFA55ADBDCC92B499B1646AEE
DE02BA1C9BAB5B254DB9A942C1B7669AB66E0773E7E3124FF93EE4D5666B4367
BFBAD79E21C40A509968410E66D8A349554D03BE32DA19294434126B1758D584
30D5866958105F34E860F289AE9D20907AEFA425C07209C943BB688FD48B48DB
FFC5724E04FA5AD46D406DD835424607D6C0132952813A044D938B7089EC6285
EAD2EC4977CBB0FC9AF4D0CF251E00ACD6EC5AF7C83B3BFBA500DB6C1E4FE3A5
BD26A4C7B56FB81358848DC57B75F166B38F05213EFA62A613E40B34B9099245
A50D4296272049FF8DC16DBBFB36D1F8F1C1616093F4DD79FA01A07EF2C16AF4
D76B0C40D3DCF9D436BEA25D08A545CCA497F327C0711760AC017812281353B1
A8D6F347490864F698BBA89D9A2E7AE5B919D9432875CE6CAFC6BB0B3A8DC9B8
DC4D47FF1D6ADBBF5095A341738C7C7D1518B8B34F9A083CCE84A6A0BE0081EA
3360795BE27FECFBE3C16BDDF3607E19572A440FD1931882A2B129329D21AB4A
466DCA51382419D5945AA5040530685B3A05184AB906E5143C5DB480C4992E45
C1BC01307957266FF64BFAC9005865808AB9C04B9B1342EDCF101979860082B9
AE1E4070A566E6126FB39C9BAB4CFDBE41CA2BE094E59E9CB3B96E2846167E63
705AA7C141CE731FFFE991E77846FEA9F21B16A574A9345D35E29F6B722B8EB1
C66F8ACAF3D4D6B351E7608CE4719223E329606E61154060FD4988BFB928191E
F420447A02E77053C6C2532AA694E4FD0994311AAF12B6F1B9229AB52E06FDA7
E6BD3EE403C7FEF4B127A1886527CE80CC6745F5EA61D49F1D2884CBC3EBCB35
6EB08633D0B9309B62A02099BA8D95EABD766507FDBFABC27FFE9C3621ECC79D
8C3463C3BEECB45BEDC24C0F928EFE647F21D4438E945705121C352AE6E027B1
B946ABCDEF75
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM2074
%!FontType1-1.0: SFRM2074 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm2074, tcrm2074, larm2074, lbrm2074, lcrm2074, rxrm2074.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM2074 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-170 -318 1322 952}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA27F17EF728D907CD5850828C1C55C5AD4037669
198CEE3AC1734B07F3433998208DD3A27CE29A6720CEE5EF66E55493DBE448ED
4F99940D9162F2E9FFEC633D5497757C2125CE0A30E7CBDC12033414C4EC1A70
B47FAC9EED41587D88B6A027A3E1E8C9B08309E7ECCAD00C560447BEFDB76F5E
7FB24430C5DB1832A3F063230C193C642D3150C44564B544B77B86FAEDB809B4
E2BBEB234B2C495F5532CB1E888FF631030541DA9012A2365330BEF9B4BFF21A
F8D983748419860DE37858A729EABDF1C517F2CE123529BC3A7A39957A3E8585
E40B5E3102A03D8CC9139157B3C8C0A40C8CFECA9DA7BC8323F7A029EFABC472
6D8540FADC75A1E92854DD0D67C0E775AF45F9CBE54E37E5D4736BD3D86067AB
D271667F64FCC73AE886F161E980733A74048ACCB5E35F6C71DFE41E625BA9C8
6BB79D74B02B06A31B67D93D7EBE78B38E3F7399BD0AACC49517D670CABF25AC
FC2610D973E6566CDF5170D42C834B26AB883D301F001C5FBF2026865D2A4F8E
2631831EE06E782623FCC0EF350D463C3CC4F17115E5078CEE62260330FF9ED7
076F3CDE0FE4DD8490F95DEE035D5332EDA53218CDB17AA0809463E556B6D824
D1651A993262616D4220761FA13A93409D79F84AD9CC63442261D4E39F08AFC2
A004F2CC9B8E6D3744EB642EBDCF1E0310118912A0BDA615D8AA6406ED2DDEDE
3072C7E43E80610F9FD73764240EC57F5FFCFC05F53B4C4069749766A4A3165A
06A51197F0363061CA3938E6FCAC99188D8EAC513F00DBE0299E0CA30648778B
2E2DCCC007660D60FE40DA24AD8B1C890B582C702A53FF0FEC7F2F66F99FE903
C160F9508ABF3FBF5769918BA18B0799054BAFB9A41F708E9E60F5222BFFB935
23D9F14DD01459FD1BEE59BDDBA38FB775EA73A89A446696282ED7780D167813
7BAED6B0EFCD800BDEB77768F3349D2B3D6E3AA6A3DD52017F412E6D07B7877B
352D5C29DDEFAFC5893F59C340E2EF78EB9C2D99B6C2BE6916DC44E4C4769E04
99592A55341A10182866123A23F6642B6CC22020290A1A7982F4BEDDF4DEB366
98AFCAE54E6B1552C089E862832D6A288DB3D1EB246A9BD9BCCDDCF18E61F20E
2DC1311A4F0DB541295437078A698B892C5344872B64EC307C8EFF9CC60D884B
5C1C483720EC38E6DEBE668FEF19FC1BD465E57001C2E1A15A834E3C3A8AC36B
8086326F013011F77094D4EBFECAB2F1BF8D6EB6EEEA11347881267890AA0468
9D319AE8C4AF100F18777E49E0123AFB9FC61814B14C93F707D538C691610500
5C6AA22FC8771FF12CFF0B8E8B721781A112CE6675C83AF1249119FBE806BFD9
87609F4E2AC1F6C8A56903F69D3953D45C9F5B7E947CAF49A78B6A357CCFB241
F9E56E957A8DC71DD68168B9A769DEF6CA9FDA0B21620DB18015DD70F75D8883
F59C4C51FCF85D95A918E2E73B463FFE7F67B7B94666906CB151C571BFA5D479
869FB018ED4756894A15EBE754837E57FC5F0F887D0DA522E238AC23A1060605
6DEC25449E2FBF58CF0A2489B02F40DEE7EC1084B57CE522758E0766B01BB8F1
D3DCFFBFA86407A133C239FBF72141059A468B6257E5748001F7E9BAEC09CF1A
C5E29F26AF6E6B603C0B2180DFDF30F8EE55412B5FCB35CCF79460357E0621B4
D4BBE9539523E1DDB68E8787E6C0B31EA0DBFED0EC4599BB37C91A6ECF2D3C29
28E60FA592CBDEF437D6843D0624A7A3F86B55CBF0206FF63B641E16CBB6A93A
5F188A3CB8AF2A2A4F59DB48A165A439409570DDF9A03CCD801D701118E05D5E
165621881D0EBC56994F2E87C87A32533618ADE289BCE928D3332629690B6E6D
B809270BDC40CB9AB16470FD86549B858FA331CD50439D42F687498A8A019B48
16EE913C18CFF8D23E9DCD5E4E2D1A6B9A207C73D6FD34403357966270EFD297
FF314F27F38B70C87E5ACFFBF825F5C4E35ED3D1504D95C93436394E0AA8AB12
2335FFE9453227D0FC8A53087F9425CA32D5896A1190E7A68004143D85FE62F9
DA6DC4972C27A19844ED508CA9FAA0C3B48BBC89550CD9DE284496A95B7C0C0D
3060AF32B145FE7CDB51A414A21AF94CD34E06C7700043207D007C85B337C9AC
F326028B67DA69B10DAE3ACBF609A6B8F3897472CC01C22DF26E15A5EAC78760
06E6C71C1F5FE888E5005F3ED893E679B394FFCBC3866DAF29A8DDD94AE84C1C
AE3739D925B0DD448095710AFCF7D7AD660B63578B3BDD77FCA6FEE391AD5017
57248DE1175D665E6915CC81604178F8ADDFD73F1131AE570FD8E45A6A8B33B8
253276096DC4F273989CC9F9A2E61F9BD44C03668456F7004A97DE5E1570AB1D
7C6F28C8D0D17C59E6548EADB2ADE8FAB00EB7DB84D22F4AEA4E3B96152FD621
61A5DE8C179BDDE6524B3B4BA99B518351664F5DC709A9B2FC115A1C94609138
2677938D2AE2DC994A20793DF61AB8F22FD1CFB4E40FF4068BEF5AAB077249D3
7D425D59B51DACD371FFB2219E5FFE7400A9DC725ADA62706D481CAE8DF3C898
1C3B26C42E52DB5332A4438D6E0AFB268EDBD12F4B3007E7EE62527246A1193E
4F7F602CBC4BA7BB309980322F7C270BF4FFCFB3DC83AC5354BC03201199E185
997C0225A1B9C4792EE042A261FE03A622881304EA68EA1B38CFA0E9B522317F
B66574C90451FC90F48C5F8B4A92C9CCFE4A32800835AD03EECCEBA213FFE6DE
190407BA94DC462DE35E5449BC4CFC0B8AC511620588A8D3D88AB046DAC1EEFB
DAC0169101B7065295D53BDB0F10672140D49C7015651FEF8ED948BEA12041F7
030D2A06C44FD9C742CD0E5D8CBAFAD5B8A89B0BE1A6FCC9B30364D11FE03554
9EF1A5BF254613210FD2ED7B765CEF6E40FC21F02925630D3C60AB50103F49DD
7BD01F6292FCE415AB5DB2BE8EA62E5B91104C7E5AC05CE70731FBEAAF9B227E
34D7A56746D4548DF0A3BA4222F9AF72422123BE874F751383AA10FE433FEACC
A5707FB215F7E4497542E4DA80DAEB9AAA37B2FD4D5C3A2FDC1E84820428A9D3
07CF356EDF826023011442E18815763403CA120EBDD79275E7BC827F0BC9549D
2EA8AB43DFFCC5B4000D5EB8B49D8A8C7A69B8FD123FABEF33D1211DC14F8F6F
678E1E0D7FAE48AD7E695C960FBC019A6E3A33777E2B5CBA7D7E7BA2AE76201D
BF5848EAD023DCCB9EA474CD30D94A4DAF402ECCC26A80223DAE6F2B4E61E318
983DAFE2E5AA3547E80386F048879E8D1BB3A543DAF0D913BB798B9D8E86926B
DB4D0003E8B8BFAA8A9C9653D2EC5687657C6C15C1BACCA1374CF8E01CBC690B
43DE3E63B9D6786D12C8E29D5F1135956DDDC963A29D376C3F075D96AAACA6C8
16C74756898049DF1F338B4F57D32072924E411366B97560ADE83A17787E9506
E4C6E6FE9D656608E93E80DD8148F792D200AF577494DEB8D94CCC799E0AD5ED
E46024816DAE80EE6DB3B8BFCDF9657C416A2FBC84FDECDC879CDAEE4350BC7A
D1A7CBCC867CF4C02FFD604C9E59C63E5B07DF0562DFA951B6DF8853995DDD33
DAB881E9B183765B71717C60C5A1E7AC3B74CD541C9A9C9873D4D6C55469B74D
7B418A019F2AEB94773574AF92355B0A1D31120724D07CC224DFEF5DFA13FACD
065D420887F59536695FE68516B5714C47FF06D8336A7F8C638598DA8F2F8CEA
8F268031825B386131CADF19889B0FE75B3F6A9EABC234EC1C90BD38CF875512
A503C57BD026C9DFE4E452611228A8E64D8F940E9E81893D13DD009CC4A4D8E8
0FA3A1C5F9D6E0E1FB9698D0A362E044212F8ECDF6B2C78A1A09E3323098099D
505E55DC55BA939DC0FE8DC8226C4D07D41A3532DFE1B9659046418DE08E2448
440F87182531481CA96F8CE094376635CD70999822089200AAFAF0F92083822F
2CDBCA87A1533DB0EDA641E24BED061CCBC6842F947C2CFFE7112D02DDA2981A
EC782E66F22E5ECDBE484B0D2198BA98E393EE5B7F4D5357992F6D8C8B9CB0CD
B2282EAC89791D14214728D08DDD735FF81AA5CF9717130F86A3D4B669BC65C9
5942EDBA512F4312832B7426BFB35CDB2C7824173D4A52477F7907480874F1BC
3549FF43F7B947784E7034070E228B1095657C34CC9C8BDC96E8ED9671C2B690
1B624923D8095BAAEC0D0CD678F58808C77D206AC554DE7AF5D246A419CEF2AD
E8AFCB58655A8B80B93636B2DEF8AF8000A248A366D5E2DA814270F397CEDFB5
51159F13B93D9B554E0F4B7AC11B4B9058FC3163A362DD4E26E39678E5350B76
4BF253D65E3C8FEB7D7C3C8CE9042701C5D21607C137AA64ABBF518D0DAE46D1
17F1A0394D0BAD6A6D31803166703107081122372BE22A047613EFC7DF2F128C
1D07594157372F8AFD21F1AADFF54B889D560EA0F8B9ECF07E1CCFFEE1C28B54
41F5313441AE0CCC52493F0D102D2B7A8B84BFCDBCEE624606E5E1D3187B1C21
9AF602AB1690C585E00ACCEC9CD911269076BBD5DA76880BF6DB5AD71040ABA2
1FC0FF4009ECCE9225CB0D22FBF974769188C0653D10C369582C494BE5F0D320
CC36B4125CDC30182DAA7E5F6CD18BE115536F59F383B831C12D34082E155820
50B54CE2DC59D09946040D54A112DF5FC3701AF9ECA1572124CC36C43E424917
0BBAEBB2B7A6A708FA627E0AFCAA1030503742C21D38F2EA585DB1BCD3F82E41
AA559382E3A39F91D15856248448B104B403BA0DE232C090BF144C48F6CC3A82
0849E6F7F01F5DB6078CFFD8AC4E9722B5E1D2F2FE872176B234D6994EE251D2
ADD6DABA249D5C62B397BEAE8D2BEA472D5EB211CB7266D74CEA3664262B0DF7
21C519E8B87F7DF228F406F9770E51EC9807DA0CA1A99EFBBF8103F8C0D0E719
A41B09E42A6C454362CE6A6BB93EABB831A757D8DFD8230157717DD125A41079
1D8613A84CC302A1FD52CB879392F2CDC3E77C89E360B61FCAE106241C80A1E6
85100824A14E3C51AA5AFA54450CB339B1085BF92634D2FE92D3112E02C4A789
AAFC59C53F7E34F97D93C94050F2F840E014CD05C467F05AD8E0F00AC68E7C2F
44BCEDE581DD1A51008BF7D817986D962099921DB40F7880873FE7B5C9830483
D8BEB1F5338AFF9EE7A2C46F53E04632B9FCAB8F189B37FAFEC3EF8FC6BBDD54
F5D9EAA48B5CC8E9F77FEB379544260BFBB2832622263DDF56F1B865C905F110
0CBF13ED3CE631E200296EE741F16B11BC5298F87100E30E57A7B9FB492D5FEF
944BB0222EA07B8F13F316F30DCCFBDA67F6A51930258F5F31BA1D80EC74D92E
17607F303DAB2374CAF3D159E9776BAE09E9DE0C7926FCDC963190AD8E08D111
40AE66D2038C1CA39384062FDF26A4B467CF3BC505F394F989296C41EDF8BCDA
576DE358244C2FE9396581F3ABF926CC2DD04CD766291C7F357A7851BDD2A6CF
3898D3DE82CADE3494E5DA0D7CD81F84507C9CFB46221311D99635FBEB2D9DA6
8A01687952B260B129531BA7285109F043E3C8111E7679610367CE444787F7C0
D42E9E10F5D1CFD1B577CDA4DD9981FCFA1CE7710407FB030F6793A4C18E853A
D18B9D45680A1056CFBBD6B3B90E5315D03E507E8171007A1BA31A59C40A5884
5B3F5BBA8B1DD5EEA8216F6E7C68C48BA1D5C5D3D6ECC7F89EDF2800CC563462
75627C25A456501EDE77132DC2589783E9086E5C8A3540F3E17C0E75420A27A0
72AAF76AAB0DBCB2C94093D449C83C1576B49CE7F1DA463533269ECDC99B6075
5D87C2F5FEDD2CDE86485DF69A347FED5345530C20E87E16704301DCC4ECB822
8A7D9FC213A1475D25E02814814E4FE979638DA804EA935EF44341681378D38F
50AC6B514AE2153E761A44DDB646CB6B5C6E85EAE6A39A649CFCBB30FF2FE40C
F82F1A732792B0F12864B22FD9D0B7A27B364F8E151CFFD75466F1B50FEAF53B
89BB10DADEFC3BC31D3FAB9CEBF96E17F39E3E7E2953624509C98058B68C3B20
6EDC78FD49FD296135CE7EF30CB0A492DCA5A9529192B990DD89155E893486EE
F92341AB03B6BC17A2E9AC54F1B90CACAB302612C0890B99274322BC4E616E14
D4D40840E73E36CD2D9FBB84407FBEA91A5C184C35BA911002DCDDA2A93D4A86
8A69A3A550FB73B1F410183BF2557EE386D9C2503E2CAED6CC4F7AD8D48761D3
13E7A34FEFA561F6FDA229C74A98359A4DE63DE27550A675992966FA78AAA7B2
0AFAC4C8572A5A86DB9627440905B6CA64C9AED4DD342F6BD1F4DDF6FAAE8BA4
181A6EF2D2CA5F50626F221C5304D38302E0FA91517F04289EEB21388A99605D
5AF3CE465430054DA4B303547E51ED23CD9DF9743F2ACE02FFAB67E3CF895C3E
8ADF8B7C28796CF3B43FFF4ECC07C7D0446971DFC9BBBA66F227109095DB0ADC
29786D764ED501A6A18C229FA83A47EBD600D5F46F2F9416EBBCBE499CF35B17
0D1664B6AD1354A821E79501DEF7A1645E6B68560EB842C1B7669A227F1F250C
EE38F35B1C5D522BE4AE1C62CCE9402A35FAC32CEF6BFD6EB833FAFE81CF51B2
9E4A7793BF69767B44795D506C1AE6D2042F57F548D73EFEB3B999827BD4387F
EAA0AEA3A6093176FECCDB3C581B65ECE095212C6951438E3C9B477825E981A7
65BA2F5F259FCCF5FC85930115BAAFDB12EE5FF2E189BDCD75208C5D82D475D5
1E04C0350A6FCD1A9EDCD1754D5BDD5340B90899896DCE39B7882556FEC4B240
7B24BB45C466BE5C1BA03B7B042C7E60BD920B71F4F18582D541C27426AFDAB5
05770A5E115E07DCCFB55D1280C93ECDCDB997555C452610015B9AF8A110A06C
633DDBC37976541FC9AC57751D115579FA38610073B1394479513741DE60091B
FB9751C0CDE6329C4AFE0360C8DF501977899347BF80F83D659FE32441F58688
54274B18E8D33364A67063ACD0897A7CB83AEB1553E6A934B4979BF5E2BA0169
B709385B88D9E5BDB9BD531D4E1C1F875120AA80B3AA3DA84603B0609AD46F23
A1F4322E02319BA2F9CF573F67906A9D5FF819FC86629220B4238507EEB6943E
6B2610E28C6BA71B710CDB4DBF9399899C7BE315B4DA7E5ED0D362702AFE0FF9
6C7B4E224D21DDD473CDB0D161A4771C74FC66F7E93EE453A8AB3942D6C6806D
199C9A4665ACC1CB1BF1F33881825DE7BEF92685589F36F15BA84639C5C1AAB6
55265CCF4D5858D6836EB69CAD543DA05A70AE0CF96EF6FB23F304CA1D98797E
793C0F09E4B92ED2DA625BB3315A4FCD68E1033E90E2E2FE28E7EF6933B10C9F
7CE20618556C5470FFC3A43057EFD79F875020231B2EFC40571E02B6C0EF9C76
91424DFC328A3D925B58685A8AE8C38AA279C7F00D9788A31DA45EC8D45A2434
7DFCF897F0E26E28C6016DBCEF3A65E824E2CD98D306F31DF9EAD24FDFCE3F2A
0300BC063E0EF740120EA87DD146316BF9BA0AA77BA40DA8E0AD131F12F42E4C
713D963466FE67F4977F3147C4C973F5D76E7DE461D8EF9E157567538CDED61A
AA407F3E0678C703BA5F08E67DACA1642A021D293D611E7FDE61ECCF041294D9
30535540689F97C2EE6E8F76E7AB578F8C5569028A7F27D4C865DAA62EC2D497
595580A64969C25B542E0152F3EAC944D97486CB96F4C3C84359790EEC08E7B0
8F182C6E9B72D2A12C9D36F7CCA0ADBB4D53C5BC74356E74162FFE244E145AC8
D65486384988B6903AFCA30A62F9DED806B9A1B84FDE01B726BB915C39778C46
34D3DC68E1353A2D46FED319AC2B2B54BCF553F70268296FE8C9F84629E33AB7
1E0328F3254E39EC3FBC6B7A0C7ECFB241F9410999E75A980096246BAB4511C2
1969FB622B09006C65ABCB6364E90F8AFB672929928111AB11303FBB4662EB35
1B94E37E616F295B536310135D5B701B490FB7A97DD67D898F8AD19743939260
21FE90E5558D74924F793122ACEE9E3F2D770BC248FC1052ECF35616C6D30991
F8C909338F0E2E2FBB0524FE08422226264B3597186799A0761C9EADBFD6E682
3E197D35C75B1D3629A090D5A7E045608100C7EEED52FC355E51EC38408C465D
903B6D5C7E6D61595E1C88EFEEB184A519C3DEA6889BD8AC3EC8A7D32EA287FC
BD67994D589C290FA9D4BF33AB8F64956A1DAAF04FE0920F77D6E2BDEB7663DE
09062DC1A5CC0B61F07783AC5AFA01DA84C0E0258366D4EBC86AA02D92F00A68
A98796CCC53DEE5AF9E6B5DC937CEED25E9504725C6B2935F85E54D12BE35331
6002B4885791CA91048469BC48896001A5C76F54C285DDAD4E7817C6B93448DE
5E437B4B9D16FA02FF29B64C360D5CB97B4884E36A477334067545B6EFE8BA2D
77EF3C1F1B5A5EC17562CA7EAB5D466A40CFF4EFA8001A233C534DA260722DA3
45507B2131342FB036E743209307CCA821138892F481C1F629D7775E7539EB9F
D141C754EA86877FB03DE4F6A1EC063077F3B79975EAD0E1E488EDC1E9DAD766
B0BC808D629F7174E95C100291DE144D0F80F79771F5DDB909B9F806D663FE01
DF57E50D28AC946EFC2DA71A21DE55C4F3FD1421296E49561CBC7B1433233CC1
B2444C04CA2BBA3B85BB230DF886D7B3E89F899799A6D881690F8976A6736551
F265417EBC5E09206749F67164F034B596D564B5F148C8933DAF38098846BCB2
7C3E877E7ABB81D4B4B19D9D89D9F437A6648AFE9C667072530AF552EB6B877B
91791CE73A7D00E333B16AF9706E0EE6A07FA0CD11F6657F47A58399026F6D1A
BDC3EBF36250F8C6C7499D1751E30525A4C86135D198ED6EB48408AF0DEAB658
543B3403BE4701C03B2EA8E01BD618F6DC6A84B1D55E381C8068EF48CAE68E37
EF8928500D51ED21119CDD48615BB5FF6E7E78A099D21B332C0ED330C80A2994
1CCBB52FC71AEC1836F2DB2536CF6EB61AEAC0055420B08DFDE19F6D3AB82516
DC854CB1A3062167ED02D8D5534607EF930D1492C37372CDE5A52A19C99A1A2B
DDB76EED55775FC965F9C9AE0CB17C6E9484ADF80961DC89143256CB36700987
B80E7697D41ED3A847160EB87FE3614D0290A9F0E7831D53CCFA3B54A2E80DE0
DB6B4ABA57DBF6BD4E39413FE191E96140B320174B923B7814539E6D297DBD2C
462F660E5F49B7449BE2C6C8BB8B9202B542526855165E05511207FD6E7F5C5D
8987D32CB1AD7E5BC655138672BC538EDAF11286148665430F343080BE57AF5E
1A194F88BB05FE430847DF61DC24119F43E096CAF95105A2C27D949988BBB9BA
65711E637AEC878C29D04A4CE4BF9C26692C2A01EA6D07BC9BB8FD9BA6FCDC38
89AB11398CDDDC1EA9AE9711F980E50F055FCA7D47DCEBBC7856F667C9785895
5E2685077F066B5579A4C94BE608904CD7598D47E8EEC552365442CFEA7C457F
C63C4E17CA02396AE809F8A6677FC8EFFA9FC9B7C3C2BACB269329C468F87096
0051BF0381200CC97A0D090E5F37B5BBA95277FA2684744B44F5201B0D9352AF
4574EFDF25EC657F47DE02CBA939ECD8418F4B7C78D148B686A87D1758952ABC
0E14777D4050A633A3DD3835E99FD03ADA152A9B3D11FD7A8F697A832BC2B4EB
B6EB1C817BBE205BB3CC9DFEBE09C0B794B6339B610662E3FAD3B545FE312970
E0F27BF495FA39FBE983282E0F6CF621B41C6DE0AD92E4D5C9098AF52BC4EB7D
BB4C4178A29B593E6766CFDAA430396F44233AE7AE58282175C08178D603AE33
CDAB2B6EE046A58665C549DEE0E04965B2A769DB0FB950E7CD9A25393BA57D67
9909F9AA65BF6C8CED3E1145BF1285C490E6ADA4D11D67B40EFF47B876544CF3
8A0820E8BCB4EAB40FBF615AFBFDD29F58474E3A51F1FD15B89234A997054D54
BF656C39850E7B06EB19D5BB48D5AA92EFE854F3CAC3267AE9E99F65A25977EB
3D8811E9EAFE5208B13AA70D48883F995920915582112A13BD69AEE83F66ABD4
BC7ADA4DCE9FAE5FF8B22979721E2894306D923FD97EB230A2B20F4C03FBBBE1
C4B0B00C0CD028FAA8779F56A0902A7EBF4F8EC88A57C2D8A8F27F0650F94223
D4EC9D5F50FD125C5ADCD90843C416D38C1BD3EE71781A85E66799FD4C76529E
02A585AA57E38AFBB5932BADC93CD610B00E828EA0B352F70D34430373F9F46A
F28A864F5223072B4CCCEAA8C53B3A042D12CEEE002C87D3CD39F92BCB734F5F
CF97C1875C4FB49CDDC8B82758E41FF4F0BBA9EC0FDB41D0A2BB7384B96D8466
526107B6583E27A73ABDEE0E240B3CA97A73EDFDD8D90055D3B32DE73A07B648
35A7E1FC55180A3B7278E957BAB8C4EAEC254BF95385BCB265139170DC8FB429
4B006D7937B4A57AC8BF4B02534DA7D2AA4BE6827A3F77CC91D0AC4101C0C99E
23ED1F8B2996F4B9AAE1498BD007818A0CC23A80134558E15C8695B037098BC2
51B76D734A5F5934FAD1928000C339128F166469162DE96A3EE70F068730BA1E
F24E036058014E8D0E43C0E275728D604133A44AC91D982CED26A0047533598B
51D81420F45BB03781F648468C7CFFA8806C6676F19FBE2656E41D4481D8ACB5
F2A8293FC766579DAD52D0D86B8C0A774181777C58038966BE7DBB6D66CA69B0
BBCF26DC316E770CE4916C986D8B058B90ED802F3B2BA838826CAEA6AD44F186
77F9EE8093D42B7D9519CC268421257581E96C71F0628AE4F732A2FB854A2DBE
CF9D0AE4C0813D3F2C7C06DF18FAD297153DB0302C3ECBBE0366ACC82555E3AE
A000592B662C830C94D0B1769C1B381CD67759E76ECD0311A258437DA23BE351
8B1AB94E770735FB99BBBFC51975F4A1A2CB8368EF95DEB287DEC20E8099166A
7F2D0B98A3B32CD55DBD66CABC5A5320155274F5BFA1980C9AE51F1967B7AA5C
C597B1217B4897539A4580891FD30FA7EAEB53A13E11D7D8F3E627F1CFBAB57C
A53B8DD6DBAA636062BE86EEA6DFEEEB4DB5D56366A10DFEDBF8493AE47E4B44
8C38F357A70FD078B01E937F3FC83778772A58397A649C1FA759A2C2AFC1328A
5AA0F794AFFB60DC6EE10130CAD993887790BE12AC33A4B762B856C9DBC188AD
9FE5E26D37E7D4788597DA369608B10B7BB22770E246796FEBF7555BCCB8F902
6660340338F8B46AB83F14E8BE75D228F8265A1EFC927713188C53D71F21419F
06E566ECDF2BF5ED6F858253DD9D704D69460C55141CA20E1F05C03F4CAAA996
5CF26763D95CA768ED5ED031E20EF746CED9201017C947DA5826799100F015C4
9D2486A320B76DE80BFB55065AA25A36A575BD01B1BC41E7E96A563BBA93B260
563AAE404FB5E01A7A89FC722F116215DB66C0829E05F1F8FC06CAE77626BF22
ED858A1DFB2D0F86DF639CE8D1C7A306E506BB45A32D37658E35FEB62D26D1F5
87AC02AC0738E6CA5328505742344A9904CAC4675224FFD9F070482E897DC67E
AD0B88C675A0BC56EE1973A40C771F45D0831B570C36600A9C1084F5F247D634
E4BF6AE2A815085ADC70DA0617EA2465467FDA6BF34F3C2AF75DA16ED42F30C4
CB01423908B906C85C2F35042BE7D81C2F542F52EE4EFF7752187DD524DB21FC
E5DC5C3C38B99A2C6446F23414B4E13A89313075D86451A76DD9FA0EB2AF2296
A1FF449F8D7A9B6DD41627C3B09A14CD32E1ADD433EF42A58CCF638D8C21121E
495B477D09B0DD58E97D0A4034A25F36751C8C145A6F29B75C8B55F10C031DCC
E9F9B9C587CA569E597ABD1FE71711536BA0FA380B71CF1D9384AC43561FAE3E
2E485E53E6061E36CDF8B26A72CFBA6F880269022BF65F37521F43505DB8A9EA
100BA307F515A2CFF3B33084EF1067AC3EEE8B10D78F467EE0776327D591C815
FAE6B592250DA992FC6B076E1F149B65921F98789ABF8529CBF8D1E41CBD0742
87F42987FD610AC2ABD31A5EAE398CA7E339F0C9D253C49503E66110976701B8
FA5EF60EE6DEDA2E722E4B2946F7C6870F669DB36EDD4D0450188BD925E08233
3B21EC5B10557A56B28C9F8F72D60AF4AF040FD49748340A1E12C0DA0C9C6CAB
E26458DCD7252C2E14809F13C8ED8BA7C9FBB3384AC3D1CE0F433BC98B1B76F0
C0F2C587AC5D34AA47197A97F512AE15B1550626E4CD334D0A828745B83FC46E
B29D589C976B2AD27DEC78FEA0B730CF1CB2645F26D6EF133E87CBF1B5081CB7
AFDDF1B01EC7C1DC308155EE94AC577668E8DC1781EE8952E8714B767DA04FCF
E5586181A2F71CFE70271555185BBF188735EB8CDC02639755F9ED22618E5EB6
53351B3CDAD791BB01F1A9D76E314AB91FED70CC9691A792079B19D6F386DCAB
A6C49DCCD3B8216F9F06CC7ED9AC7E49F59E1BD512A0DEDFAAD9AFF788CF7B87
332FFF4ACA5EC6426F8EA3536274C284BD646FE186CAB3E2EFDD2CB2A3E9AF10
0177967073F1DC0B6FC7E6C5757CBF6CA22CECCBA6040DB5FDBC010A6557F179
6A5865FEA3E48658CCF7C11C62FF73C3444B6A15654EB12A575FB4E5E374617C
34468E71B2D4541E82148D3BF2567DDAB936ADC44DBCDE85C2ACF8136AE4A085
64F4623282F44548358F01DEAFBE56A820B8DBBBA2A32D2D5A08CE9845F4FCE3
6358DF8AE608CEEAACB00565A9501685D12D0AD615ECFB05FC91638AE2818814
880DFEF8AEA47C0104BC022D241C57F8F19364708EF8C934DC5496B562D80E58
3428F4541B755E48136106479FA0CCB2CC2377723C1D5F46144CF7DADC4B48E6
81287CD8C3CB4CCF9F5707C3046CF763B33F37402C0322EA45513B16DA809895
CE9E50EAF13ED872A5DD1DABD7351E928C93E09584288F97089A4BADA0618313
C09D96CC29AA777C8A2BDACCCCF5EF113073BC548D37B62DA4556134862A093D
677288AD8BD8EE35C035B1356EEC3739E85C45AF15D2E4CB0BA117695EBB3A4C
AF015407FA1440E7BE0995042B702AC566F266E9E4FF04E34737FDE44D6B7624
6A0FCE611D91FA7B5CE8F47EF00F6610D28BF60A302950471DCB04E921511068
953BF60A6BF2D982272FCDE825394FA1DABCF2A241E2DFBB097728EA6F066A27
8463258E6445D9A8403D7DE709C376DA8644C1498EA456394D6BABE45476DC57
F0C9853B59B6FB51D77AB2EF95DBBDD7A036EF1ECA8F576AEF306A4AC4F511CE
58E7FC51626F5A15D5F529E39080E80481C95AB06A67CD54B4CB5ACED94397FB
60489DC4CA6FA3E696BBF8F59953D89E81D510896BA33942C81F345572003046
F5E14FBD58C165D3D746A62BD7B5BDB759086799C77F396F156E0B4EE80D38AF
DFE3F346A6ACEDA902C9F06774D5C622B20C8A119E68F317FEC25497658FDFBE
1C57C1A829C4F3ACF26EB50F3F3007E9C42FCE7C675849443B44B9BD5439E96F
0D1068F1160A7A0A6E64FE442D6399ED1D419D94BC9EB031725142F1854C1212
87676AF6A8396242787A08B7BB940E05CFE7D94C8D9224169C975581E15033D1
DAF8EF06F4B90FF985297A2D4138038EA5322BEBB70EB5ABA3188E25EFF04623
70B77A96B79A7052530A03C64BF630E46D41EC9DA359CEFBD776DAC491DBEB4E
FA9B3B7EF3A9AE3DAC17E70411073DEADF7420B55B3E86F3A416D0C78E67E386
2C44BD37BDCDBF7121703D63A1AA98C72504FCC1740A31FF1EBC9716D4F5C2A3
867510576F8BE82FDA8E3533C9091594A6F38BBBF359C7161C13D33E3999DB02
18571C365FD6D2C19F1BDB14578716F5064660CB1A77964EFDE098C5882E7364
2B29F44EE1A79356B1179843CE8A2335BC6F14231BBA7CA8C5237E9EA13E09F7
E7CC671C33A736EA2BB7DBFF79B5126EEA7B355C29C14AA40AB59C074FC3E0A3
A9236075DC9DD1405450A4880C592A83EAD49402E36D303B23AE7E363B202F11
83A745C50FCD450500775E6C5ACF6D42C630A9784570B05482DFCF6B20F3ED26
D4A1C91F59909557B03D85FCA45A6D9470972C0C45A03047B0C62E088B55C346
D895A84235EF7969A588AFA94E2CD27BF1FECB94FA651F02D4829C379AAA94F2
5465864E9C2F3AE868B1C295BCE5BF28A9CA23E0A11775592D5BD360F83D748F
2DA2B3F5A0B448133B48E0C528A97B1310B36C9DCAB56228E91634BB77DE4796
A61925188BADD539460D051CC87BE2864B8184460F93765946B210A3328A4BDE
9A770D29E8DE9CCA321C964338E8CAEF93A20DEDA23C0C5EB5BD7B9D6F08AE28
F7898594BCF3821802610C37831998A06151A7B4D8EC1607E8C84F46225C3A3D
366DDE3661879944F31090816B4202B402358DF6FB2C1C3291A88055E853E042
D2CBE66DE11212941024C8ABC124DCD0AB8CEC678CE6C4C4A43F8754D2E10AF9
59B70D392248AEAA07B3558B89B1F191AFC2C8F91DC72818CFEE95E2E87A59F3
17208689072323E9923CBEB7C7408E8771B6C09E0603C2D65C8BC5985E9B7114
D5B008C40D9779B811CF352D48F8716457585FD5C458988CCD13FA6871506336
C8E80E773EE0E714529D5252E2EEE6E3FBC9D58BCF4A1E1FDD8D1CB1A199BA6C
0B070D42E88374EE70851ADAE0CD12D739135CAF5D8E49CD1E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX2488
%!FontType1-1.0: SFBX2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx2488, tcbx2488, labx2488, lbbx2488, lcbx2488, rxbx2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-205 -316 1564 922}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C19889DE21E60D1FDB2BFE19ABFEF06059
8A659CCB607015182EC681AF73ADDE4533A86C8A88DDFD99E33AB4637931057E
AC7D9DF42B614C752A4175AB95C7E0AB2A036E2E0B49EA8205ECFC2290E6E927
E0CDC62A1742FC8E59EA1532BF2721235ECE5FBE40A9DE5411F785DD21009E4F
1E0974563ADC9CF62D37819E39ED65120FB9C870C1823C3F96198B4A88435968
73AD99EF27B2E0BD2FEAC130296DEC42786C23651F4199AF1251DF159B7DCBE2
4E2A7B6A7765F10DB0707FC84D49B021D432A4B6DDF145E8C9604BCD081997D8
5FE2A113308C11753DDB0301F572C3790B7FDBE0DA142487D27CBBB1228B7FF4
5990EFE9A1AD38B9FCBAACC2C3FE78B05D3C597476DD1BD6BE76B78BD875A91D
E61C79D2049588978FFEE57606CE37B4CC639447FBDA179E5D657AE76C1350A9
3E4EFC7D003366F550F2399536AD7722B1C17AC3C973B097153F3F1FF6DF7CF9
8AF85C0631FEBB48E1C783A623F53F382BD88C41ED9A1F44FA77F70816BD99FD
28A71AF42CFB86401E2D85B555E493A4D4923D3E6DBA45893785426343E1E646
925DCCD302343D6ADEE9FDB3D9C91835C7F94F8904D69AA567B8E7538C486958
DE83E2EA48EB8BE7F57664E0011ABC707B5A54E833D8DB9266AD753ACF844536
CF63146D84D930F5D8F7A409CF367D6959098343CBBFF2CCAF91733BF4866D33
44A1834570C725D827C424B12F1612D6DFE6B2B61F652CCE4DF468C10D6F1AFF
7B72EB8E8D3D50BA4D8655E1B3E13AC6C59BED4F8624130625B70FF892C91A8B
E6628FA2639E7A626555EBC2177FA2DD173F952369AEB63C70A402BF91895A41
3C6B889393D35EC332CCEA3A2700F7FAACEEBFBC1EF383ED675B468DC7C90B12
C563147DA0C2C7280BD9F16C27D3CAD458EDD9D2C645D8959C5D61C5AD81A37A
60C5FD340E4304BB80E2193D53447D1108E05547B9533973DB88816FDFCA8931
8A4133B97F3DBE73F5B59F1D1FC0384018C2D56A3990EEBC4C789A633D343AFE
7B1556CD70D31F2B166B41AD2A69E71605B0C7E599AEF82993A628D21FE703AD
75FFE8029ACFC032BA9997D7ED3C0269A83ABD396100AF2173087DCFDE66E549
8C93424C7C6ECA114DD2B0A3F4F48079FC8AA22BB75B05774BDA8D61B01E1B20
C30E7C216E5571D4EF121915D1E664802F8C6C3ACA0F1BFCF3E15B5539494B42
176BBAC6D0078BFFD5CF7857B856F697589A602A3C65B5636B666F6F1858C2FA
D2E577520D5C9B7C3D6FE8149C2ADA6B6D93D1E88439BBBAD6117472F3E07CD0
431BFAD74BADDEFB530B5D5F87A46C7C8A598ECBB2B36E46818F21B7974CC9E8
11E864F2425C2F627DF5EFF8F3B5842CA6BC1490E98AE75735DEFDB8791E55F2
77AB9E59215A540A6425689A96BFB38A5A0D2C82D2E717A506A683F309D1E1C4
46E5F32CE33089DFCC124E937D21D9C9BD6D9FFFBE976D4963BDBF79076258BE
982439823EE9281603453209771B0BC003F7B73FA1B0A55054B510AFE6F78B04
7B79560A33CE56BD2E5A213E405F48F339DE67B23AA4C8B47CA6888EA3C60575
219104394AB80C5A40BBB390364D42369CD443C844C0BD672100CA32BB7CFA94
083E1630C801CC25791D1CA12ACBFE5E76DDA26BD8216A3C4555FF6F94B98034
D3B7E8C35A91CE7EB131F535F8E38D2F5A92F0FEF9A4742DCB0B33EE468A916F
68A80C5C4D2F749380E865F967B4ED11864FB15D89D45A4CBFE4EA149AF3A7FD
4FCA041CD83BC8D134CE7A90AB7B3AE1CD2B31577B14455E226CDF5BE46868F1
FFA303409F73279628053739AE466EFC185890912DCEBCE2997C948106FBAB4F
5C4C8A7AF34EACFD2A75FB0BF1F7B314ADA53644A8187484FD95FF9C9446DC77
570773049CD1998D4579834CA1D634F32260C663899A2BED950C96FF3F58C546
33157CD36BC19A289A9252700F2C9D202E84FDA75C0305C968B952C4BEA4A2FC
232165B98CB98BCAC7C0E77BE76A5641058C836A66C276AAF9E91CEFC422B7FE
1306951C0F284B0149B65884432DF7E0357C68BA95130DFB445070A725FBFF87
CD4F8B0D9C63DAFFFF812E3A55BDD02AEB87889763C0BB94D948225650F4A06C
B5DBC871D6FF0C002B612E2FAADE11879DCE89B9ACDFD83095F1201FE3A898E5
A21F6C1D5BC4454F1FD0F4055FD8C51D100D85BFEF9FD51E984C6AC042680EE1
6BC22104C54ACBE6E9B5838ED7C49BB923BFC1D7E5AA32CE2A3243EB62DBAC95
A053B2A38C80CB0D55225B589DD52EE8C8B058BAF43FFD6487CDC43A9F9BAB01
2966720269F5EA83BF81548F0BE22F7A4FB3160C473D6FAEBE7427D6DED47F0F
852E129736A10B51E962D69921102C67D59915DE021415355646F83E3D422593
02FB6B3FEB02AC3AE5CA0467AC626BEAF721C36FA673DDEF254120336AAD4CDF
A6045923AB9B445F3D26C5757DB075231895BFEA46C6CD3518B14B479B36011E
248411E326DAC5A3245E9CE79922AEB32958BE1E8A677A7DCEFD8DABAF4492D2
47A1D5231D5C3C481811F9CAC02048C9489F0351D6FAD0B3185999C3D1922E0B
F8BBE25D99FBD237359BAB443EED9A4695037306109DA8B55B5649FAE44BF772
BBAFC4DA837DEB39CC7729D454979C1FD5F15848C3D906427BC1AB8A1054AB69
6B497F17CAB589A886481ADFE8AD164551F58A49FE2896541CB5E7D0EE515416
7E425DA499E17FA0F908F5C13F0A220054E262C4EAA12D2FB811D5FB5C06E94A
37D77BA61F010A0D2858F752BD242CC5B03E2614541891B78E06BB50AB82D476
77C28C69BBE333A7D1905DEC8E64AD4BE97BD8F0A189C24257B8419C02062A92
9AC32105E167AB5A5F73737240613B189DE9691A0EBB285D67A6332D3D74150B
C790BBA1A4304B1B63A7E02F0095466099079E88A67715A2F46EE0D4785D51ED
13DDEDE1D9529393C604FCB23901E0EA7EA2E94B2530620E26E4BDEE7F1F6FE1
6F8F1C76C89D1266566FDB154AB6C223E98F831309B991A8B72033CBE2CA618F
023B03A4E504180EB98040FBA466E238DE2431EAC8B494B7A486B1EA3005A5AC
335FB48EA262E128DDBD098550592E300FB6054FA587900E8FC53CA307ABD3F1
3FD188244FA98D9BF0A92113C51CFC8186F13375DA27297A8909B63BBAD79D0B
44A950D2C85395772760C2CC267C2BD4636CE6154317EDEC8B6A2A70537EA4AF
071B063971B6AB749676BC04F01A86646EEAD71C8C4D31C5CF079017B3E55D9B
C5709E95316F40CC82355D942A7CCAB32DC10AEC6FD335481D2E1DD4971080F6
B3C4ECAFC7C0D9495945288E2B3F57C07F43AEFFCFBE7A8CA13E32A51D5E33F0
DEC039DC701E8FE4F8CA73CEE4E4340353C781356EBD7415B5064C8D0B8323B5
363F879B50A9889B31AA88D7A7D6574E8217A7D2BBE4184493FC6CD67063682B
8E28F6B25297844C1A663BBF1D4DA9317CD10962F6BDEA3B09E1A3FA4C1A8667
0E0304FDA2F86AD45761383E01E64F9A86467DCAE43C484D000601419CC24502
827A43EECE9B0D610D6DF54ED07F5F983DBD2A8DDA3F06B60FD2064B5F9DEF3A
7853E76A277040BCD70780090B81610A7D9ABF918615820F5ED9D06669974F5B
83C2E21F5AB768B14E9B37D3464A3ACF26E00CD63CFBB74ACB77531FC60DF9E5
E30AC4FB02F118A80F3D9C39763163E56C5E1C9A35D8B4D265E2864E5BA00D84
B4A6D996C6E882CB250FBC1F2359AA02C33FAE1FD33EE749D9CC2DEBECA7D5F9
A4F997A5668F4C3E845794B802F158FC5E78E55629228EC140AFB2B83AAE87C0
C4AB4BC1164FBF23EB2C41857A548D341837CF1F79512EF598762196BBDAE5E6
DF44AA45A8CF48F425AAC0866A03186CC65836EDEE9953BD8A70456AE8507255
DF0487319E7372E4665FE59E91D2B4E6B4FDE6738B3B4879DAD8D22F960F9C8C
5FFEA9F896839267A923EF2E7ADD1C24093E254AA4B5C6E171F657319FFCE63E
A6188B120A4E7C44D5AD6853F315BC533CF7684D7D3F8DBC1FD1CFA6DC325414
C41B3C5B7226965AADF23F2C763CB339B5547BD1FB64B96B27BF4CF6F0D3D3CB
71D04EA02FE17D9FA34A356F9EB696AE4991B5DEEFFFF4DDBDCFDAC0888255EB
2097333127591BCAB1C8EADB36183486CC9D63D99B1C2BB8D58DC629DC033451
BD6A6A518777CF2E2BFA2FA86E38AC10A9087E1E4585E2A6ACCDF43120A9642B
90A7667FB7C484ACAE902CE9F79D0D6B86D4BE1CBDE47EF5E1393586EFD62D73
F8A368F7267F027B8DA169D9F8F2887871B6DDEE32D6AFB654763E8857CABBDF
7AB34FFCD31970F8CAD34EEB68EA6DB150EFDBA3A69E30647BE908ADAD503BF9
EA7096C44CCDADDDDF28DD4CE68FFD0BB013E8A98BC0A9C95AAEAA21ECCDFBB1
207A970FEBBBB6694129DB89AA7158495B3075A43BC90BA73A581A994C4AB63B
4B920E187FF35CD96C3DE28FA466A5DB2C47C7A6B6CB3E63FFD1CD43E5911082
F828276B7C9BE5BDFFD3C15743C99BFDEE1C06C98575E4DD40FFE847FFDE663C
61A365910693A324D5BF24145EB392F28C39F30E19E89AF71192ED36223D39D4
204B6D246BC96A5C60833A307C57446107F7D88608108350947148EF631A7F67
9784F63786842CAEB6294A4C6827C40EE87440A3E6197D5DFE27452051462AD2
361393B031459AEB6E4343BD326DEF7A7820B211CCC182F477837E0829DDDCF3
B8DE3ABAD92FA6754E925262E680E5344B96E08E29DB3439B125CDAFBDA90E38
E1552ECB157F3BB600C62DEFEF495378CC4B76FE1548FC3A1D8DB7E6EA57688C
97CD7C7C9EC5D07B1E35CAA83AE6AA32067DB113812C11B85F2C5118CF6526BF
B304EE0B1474CAFCEABC3DA9A200BA7E005F8325C89AB1AEA6909275F7590823
C6821F93F96AB10B508C9D7CA04798EB526091B48A469C72511E1841DF73495C
A295BE6933B1441A82533BD79946923EDBD87F29FA12C31810C74501955A7ADA
8656D3464B48CD17F6277FFD97ECB1F9579554FAE69C7E6C89C6B147D975CA2B
99FC2CC90D8161646AF1B4E859D84E0F83C3BBDC875A1C25527B5CADC036837E
91868F63563690FB763DB09DF2B07BBE67EF6C4DD664CEE2D979748067DF9ADF
AE70DE31E05C00A965B44AD9300CB1DBC3E3A79376C35A6FFF0BE78E130BE08D
A99B91A25B35819D78FD90E2F0142AD2229CC525B13A2524E7A76734F256C0B0
D1BD0F941499F6F05D961161E94A493616376CBC741F18240985181C11CB1CA4
ED936E00591F7824AC19111321F27A9AFB5A70FE8DFDE7F7DC3FE5ECD00776EF
9597EA3C105FEC8DBF2489DE4FDE4D34758503D858C464F3D842055345CC83B6
47E54B05D3357D4A893A5AEDCD6C9C1F995B88B2024A55A408C9BD1DD5164C29
FE78A82ABFCC1B25B95856713362D1FD1E7C7240C3FEB61D52F5F0DF3BEEA2D5
734224D49598FCC751B525E31B3424D568958F949C6FB9F5D313FA57353EB568
D825A4743A49497AFDE231616B40364AE0F8A824C5042E17EF20E8A173487DF6
44CC77025505CFD72C726EEDA77CCF43C301B4F5A7C077B069B1D220E16524FC
2F4C014C16F4216520A0D429DF279816C67ACF82AAC21DA969759AB6480F82F9
0CD02F460E2C2F231B9DB67A8F742F59EE9F3757A3613D68335FFED41DC0EEEC
68B404081F09F426B8A5582303E35D5DEDDF919D446165198CA562DE5FBFC571
1049CF44B1C7CCA5CF8B0D017B2BC21B3F12A88DD8305E833A817403BB270992
903D18E152E9C5DAB2CE7AF67CB0DCE087D0F5233126B164DC653A89EB1B3D3B
2572B80F9A10853352964BBED075B78F9D56A18260ED02752519751C717DAFFC
72EF21F794AD7E6E82B013C1A2691FDD8DE5DF9C9FB69442DC88166575049E84
F39640925CE46704D6CEED368AF9ED2ED65CE1C63370E18BB42FEB8654D36073
48DAA1C40BA295BE053DA38E53D23F15A776E257919854A5A59965A81CDE8EF2
1D2EA1E6F34D30834FEE6BBCDCD6DAF7333487DAAB5D9DE82783BF6CB49F5D46
1D1AAD02BB07FD4505C16F67E1C066EE2A075F32AC97BE9EEF7A41A0FA36CC28
ADA868EC0355E52AEC86D77D881696F75A6DFF3BBD22D3D13C1BE7CBE1CCB597
456453A6B0A9B5D572F1CAE51C9231964219A459583C32359B28940FB6C37D9C
FC29BC48F0A621C3052E53560BB2B7B7F0B5DD3B86CEA518CED1B66B2150EE25
B4A017A5046B7E8907393536DAD78AFF2852EC232D476FA1085CDD0D66BC78DB
5BBFC1B2282EAC89791D14214728D08DDD7033482F5E4D6D0578D958AC590D68
0C5E9A84FE551A41DDF3BE36D3D9C3ECA837029100B904A9738C2801FEA6F661
1B948CBEC8C902C5A6FF9F0382E9B09FC599792AD66A94197B7DACB165BDFF0F
AC337A4EE5A951A154B3319B8BC536C79FCCA2C9078D48881ADD916F676D481F
F9A3F617353B47C7D9F570454F5357BF4EDF82180F7DE81B8E2077FDDCF0DB33
F32D92892F8130A9819A5D4AE6108365B1ADDC3799E89B06F5B2166CBD8AF8B8
B9D6EAAE621F12179C9E46475D97D33027B871B106FA8224540313DE75E1537E
F69FEC1D35DB8B49B1CEDBBE923AD5A4DD597647514AD7FBE3B2A7C8DD95E068
49A365F9A832B6E6042A52B731A64E0E4932D25E0EB3AB4E561E3D3CCC1F781D
6938BD8434FB02C0DAA6B73C464726A4E028D2232734DD98EEB455F11DAAA8D7
8574C430939CEF9EF8AF7C7F8BAAC930DBC8D268F7262128F936AEEDE1F22A2C
148E0740578D7CF10A3705B2AC0C29511501D37606B8B96E0E045835D5A9BFC0
C8FCDC9044694863DA19BD085E75DA191D8B926A05FEA34BCD805EC5512533BE
C8301A7E20BBD0D266770520FE70666D448FA1408A02FBBA60C2A50F61F4C707
1C7570B9B2B5B0E0E5660DC9507357B0C0EFE44CC7BAA2ABD786A8890D1E287E
00529B7DA7F3EE96FEBB2B6B25047497982E10197CB140DBAB955C25FEA98274
79170AE306B675FF8412F670BF8A614812EB1E27AE13318C46D63C82A7E0B87B
022674455EBF7D79FE1ECD4EE473BA4B658651C5705B1EA177CBB71BBF8164F6
EB0178018466DB21F9C5A7CDB31D2FDC86A528623D54F22D07EBB1838BD46934
03A56678ABEE8B8330617E489E578F1415F6A48EEE5523AF3CDCDD1503E71DC0
494E8CCCB90C2B185D5F50143B8D1008C268C635704A93491A61ADF484A70008
0F89CF435B82D192A5AEE7B0ABCE2588829FAF7008D91B2AC18F29F582ED8011
3902D74030883D4F9DEB15ECD75987614EB8B11A47CE2EE8505578BEA826E96D
9F4A7CF80E328F92B9DC3E20D0246E250D2AC60F12DB57354AFCF4D7D97069E9
178CAAC1EE3CB12C36612D0E9F1DC7BE4C83A073CDF1436972E1A7DB4EF36F5A
DE6E0E23BB8B04DE2C6B2D298ED89ABE2B26CE562FC840B0B8EDD899E447AB39
0772C8D454F050DA86AA053C88A17B2E392E8330F91062E5CA65108B0ABA1635
BF1A520B1B67BB5D6681B484199E7CD2BA6E629E9471B2C7A7A109FB97B099C3
0FA5E9AA8CA87029002556593E45C64A59DB0786C741F9C02645D73C2D86BD40
791DEAA0D486BFEE84EF32C05C1B4787296DA5087C9B2907DA7893AC78D07FA3
42EDCB4B69B574DF3FC37D2D5497774866637763C1085CD88AA8542E9A95EBE2
9A9CF6EA8EB5F9410D24FB6CBA16B7A86544CE7011A15DC9332C69ACF9B3FE83
67D333CEBF5553F811DD16F3D031D10C0815C456C430653DE9F59D4C43F4754F
BF01CDFDBA8FFCF65F04147FD95384238471AD59C0244EEE939D4D4AD7157613
047EAB4365259C39E44A9A76B9FD5B535DC1CBCF567DE01B3A83D4A0BA520611
DA305812330D6A3482B1F8CFFFAE6691BD37E431CEA17602D94F98478C1B7FF3
E059981A897E7EBE013CF67060AA2F58CF92EB80447FEC13BC7E494F1851A30A
CB1C432E3451392FDDDE2AC5EB07C5DB7FB60F9FC997023C014372A826C63CDA
7CC86EDA8D75A982B8C95877928648BA6721924EF1C33D6AED291F0B78C2071D
7FB376F6244AA161AE4F201B00F833E4F474396A1C613D7BB9C514A2B70DC090
8984D63678C6226DF652F4F8BE97BFC28D2A542D18120E0EE9275500B1BB08CE
4B28C5ECAD8682D940369E1D74F535D8F0F5EE3332481D5DE9438D984A8EB9A9
7E7AB80C191CB3721E4935F08FF0FB12C2047174DCE70FD711385E014F297F01
3CD4914B8AF9A19B4DC9F017BEB0E3856599C2BD542B3D402B26877ABDD9EFC3
CFFCFC13A1628B63E056B22F5B12D4F1E69881A8BB7FF25E58ACDC7FACDD4FB2
1863EB01B8BCCF6F2793AAC00094CC539B86EB3339DBBE3E2111BF05F35DCD2F
D6B1944B2FD5A4B4225A1C231C36226C5E093B735437323525054A3840BEF7D9
864A224200B7DE4F47BD97BCDCA95F03756CFD9F6A414486768DA51F760827A5
4BBAC19030A1329D807AD24DAAC81D82AB2A8A50991F9B45BAE084DC5A950632
0FC5734650A35893F485242DB74C0F823586C330D0727F3697AC9EC0E7C98310
BBA39C6641CDF15A62AE472F4982A3EB22E3422EBA719907DE733A8C0680572C
7CA581759DB237C5B228E11C4EBD847FFE7F8A67E78A412C9F98D7B0A81E58B6
4B0AD171F646510E94E845A6272D970CC423D0477175D39630F7FFA8369C49B0
92B04B0495057F1AECF0FFE29F97F0175819F780F4E7789EF9899F90DF0E265D
5D1FB2064C536FC41DF4055C39418629A45162A316A12F60E741D6C63715F8EA
68936B1D82D2282BCB0AE1C78ED2CCA9F420ECEAE79118B4AF7F49B9EC22CA69
F5B8D71897A90C5D697B73BFADEFD92D2AF9B93929278F0211C20555C129BFB0
0788F71F97FDA06C18EB432A5967F4F2485C49B7449BE2C6C8BB8B9202B54252
68551332DBE09824E2A2C906F7063F245222049364F9767FE9396FBD2461D974
DC68D20F3832A2A5850A6926BD37E1C7C43CB9D843C37935D4703B161A665ED9
68371521CEEECA03660DE4D0AF44B4114E9819F846DF6EFE49C8BF48398C2BD3
295A425583E66614AB55FA4B03229AB8A7F4EFEFF6C02E50DF36B4974E31F83C
A27E5D796A23BE194524476EF330D96DA22BB0E345D1A4984572156F5470FFC3
A43057EFD79F875020231A7E9EB8C19BDF47AEDD61F124CBAE9832EC08626485
6395865C8283695BE35668B0A5CA8ADEC2FD8D26CFE7882696273B951CE1D829
A51FDA9E79AA511BAA6E382568846B9D5A421973F879D2C32DD0F3D25D9CC5B2
5D878C800487F71A3D2EA29EED4DDD03ED2DA36F04FD211DC5E7DC5A08D027B4
FB3A960B40041806AEE0B726408567CC9606DC827EDE471D4290737DA53BED79
2DA48B7A36D5E037DCF90962F96C215CE9B0DB507CCBB4B0272C619E6A3CC8A3
F602E7D0B63C77563E0AE050076B69CF2F4852C673ECC2D3FBA22790A020865C
CB496A756436E98F1B06FE18DA2EED9BD5C5B5A13F6590894314BFD1A3707FE5
4290E51550DB59E4322AB3FEEACDDE73D0E053DE0A0782BEF672182635D3721E
56EE70492E3C8F4166A65976DE6C31A06E36F445CBD959E396C85116A825DF57
59EBD859CB9B1E4B540F38E107A077DEE082932182F83C4BDDF163BAF4EB9EE1
084DB1F3583FD654B10DD6DFCE20133D63B0C583BB6C2BBE75C0B371EF1D05A8
77F24EAD272EAE06FE8AA192EE2639DF9419845977CB6B66763EDCD492A71B39
1AA41A145AAC61AA4FD6DAC0A4DA6CF1EDD53C5C4D25112B855FDD7BDE936481
85343BDFA3F2A3F61176E5ECC2A0BD0EA85D9C7B241ACBEBFDDB91B9474A8A26
496D574C1887F22B4A5912C8CC8840DC8D5F07444395130D803ED8F46FD5BAF7
5730B4AE0AE0E053DB70205EE894F413C4914BBE06F15177732CCFA2B6857738
CA9C54F44F4C5F8E12D8B80EC49BDC20454E7C79565507AB1C2EF74F500D8A30
5FB7D7F4E8F1110AB5C3DC10D35E3CE5A0163435FD0C8BC9894BB6597DE21C8C
BB0D807CD51725E283D0E4B4C9307B6DAA21384C28631A43B722839B5D76C73E
85ED8898EAD58C01DF56EB0E8BC41368FBC9B597536504D777AE66762BCEB8AB
14C8416043EB935D04BBCA17933E808D983730DF2DE3577E856D9722404D999E
041ACAFD01B3DD28B065C22E160EB74339C799EA817DCEB2F7C891FD5FDBFFB4
994ECF216FF822A595EAD8986BC258CCDCBD76D78C10C6FBF49FAA16EBB4F87D
7A9042CE0AE98F7B0BA946729AB105EB1854B29BBFED7EFD695D49909A8EAA2D
1A72A61D56B4B5722E189F67F62399421E0159FB4ED2F640D9972836CA8C2D26
97BE017F0AAFD64EA6EB8BBF22B59756A042DF0F0C52DECEFD4D785A44EF28F8
1F9F443861AD4DD42B5E597B9C20D16F4CFB1F46DE36655B7AEDD51EAE4684C5
FFC602A80BF9C4885A3EDD1B17A8E6A8A47699B0979A9F14B265ED2C78DFA328
110650C984BB12A1A9660B8B10B0E857532D22608EF313A78EF9FE4B498DA00E
281EE7205FF1D9EFA7AC8CAE9DC52FFACAE3089A3F8D62ADE6F2342367F748E6
8AF9FE2FFE084C96C1E049001979E21A2503CB2528C9FC46301A62E47FF0B741
B4B256E229329E8C6933F47679259B1445DA68BD3AE4E605926F9121EFC301FA
9DCAFA49053FD29385EB4F46BFFDAD1988300EAC3064219D4264A274A2BE42F3
D6F5144C7D2DD24979B3B9FC9F4F0535BA6E591A90FE37A7CF0FDCCB68CB1121
89AFA7C2C8CAE186DB9A10362064AD18CF234F5FD5342140D5055CD7F5258DC0
8490828A95123B87DAC7272B77E36FFCA380F3A95B9FE864C3012431411F730A
87FCE1280021B01C0CEFE18FF3A61799D391443177A09448146BC96FA23F6767
3A8173848BA3C7BC03CC0BA24D42709DA99719ABD9D820493E8381E631B15F4D
96CDA0078DA1ABAB892A6E645EEC2019A802A795C3F58D7D37FCBCA876AB2C50
6097C7690E42753520F15552E6B19178606A6DEC9D5D6307C124E1B4C704581E
4C2976D274C172B953701D6D88535603A22CA53B5EFD6019A0A8D301F9827444
2DD458068A685ADFDBC0BC72F02B15A90D1197D498923EEE9B65C81369141516
B7EDCB56C83FCA0947C4237DD159EF50B5AA3589953C1AFBD8CE3FC5960130CD
7EE221D49132B08D66902C80C457EC65F7E34AECAB27A1A571B1D127B4AE78A0
90E91DFFBBAEAEEE5458A0D0A9ADE7806C0DB7680C8678E1C3DC0FE83EC18C1D
7067FE27217FD4E5124E42DAA2CD4992EF241BD5D8A0D812DD750DB2080B1F20
5407839A0A6212AFC9FD8FA3C180D7A9BD8A3618EF47DF11CFD4454117EFDE14
5AC48315B859508A44DBA88752B671CEC70EBD953B9D030DCC018B455676C325
EF3E2E360F903586C9D7FBAD76BF54D54CBA24201DDC5D7ABDB7B56C17365BFE
90E4D975D395E48445DDFE77141E8068339E0DCF5E809993A7CCB5E08DB1982F
D8710D66C719B294FC4166256A81589B07F25EEF7E5E48203268CA1A42CE9AC7
91C6FE0393817E1063E35756EAE592EDBBA8EF04E6AA8D4FE222D7E66A439BF3
6A1F2F1FAD19E84794C814EA3AA0B03B9C0BAF7F99E05D60D0E6DE8D3D6594E8
45A411E9DC9AE02AAC9338FB849956C8CF0D3B8416B3A4E8868940494258DAC7
46A1EBFDE6C2B27C2CB693167A0995AFC3B3275CE3E086F116C81FEC995A254D
1A9DAAD1ACB551CB6F0C1419B7DC2E7B353A232DB7D65CC908855915DA417B65
1D6DE07434D9AF25395CF43DF116CDC089B5AA2B22EC3CB4AAAE838777682ABE
AD688962A05D6AE4831840F03CB691E2B9D440E667A8236806F0682E4884FF4C
10C298D7072F54101E2A5310BE9A414ECD28E5F0D7B83885FA6103D4A4F2F935
F49E81AD33A93F61C9267F7338C7716B807B67357FB65E1C3EDC2A86A103CF42
479EA7388D721B2D23B5F894F5701655BA04B5C12DA50B9337E78F24EC008D3D
6396340A5A05067C541E4686B5DA6592C87FB26067839782BFDB1627F4BAFDEB
F235BE0D685B55F7317046A8A9627EA96325A10C78E78FE1F3816F1B408FE374
273639DF7C8FCBCD80EF65EB97EBEB5C31BAEBAB8DE03FC76749517DAF1FAD86
AB7840555E6B16ACC099C2C5A61FE910A3063B2C935647597B2817E685D39455
CCCE4BE8FB681CE5A806CD08235E4386A0F26F5FB2493DD293AF5406C3B879D5
5B2D252A9CB35E1EE32C2FE693BF664C56491780C299802EEBAFA2228756A702
C69D427BD53A0289758911500564058EE40EA17DCFDC9D257CE3FADBDB90C318
61AAD2E1541CC803BA4255255C11260E5A9C246247D60508ED968BAA06B47B34
0CC9B306A8F6FF89850D3B1849797A9639327B3A68051325520571657F8BE0BF
08372E89A380E64529D36D9F69DD8ED26840B5303CCDBB3EF0C5CEC6B758F6E1
968905D343F35211B197887A0A88837A5D7D3A655A72DED4C29C3349EE6E3276
F44930E2374A3FE4DEC3D66E6235A901629D252DC09341D4DF470E15CEEC4016
6651B9B61925805E480AC8E8B25D79E663E38C6A50283D836D4535855C6C8BEE
EAED75C92B8954E7402210582B8F08664EA2916428E432D4576956F08D1A653B
8A2384C898CAC110930FB0C45EC37D70EDAC70340E689F7613F9DC6EC0DDB239
83AB77DEFB6B8ADAA1E94ABC31D70A30886781C2E1C5AAE89CA4360669C4E7E0
237F369B0B172D82C23FC7E3A40D834294319D48419A10FD412EFA3E2EA19FFF
963ABE5FD562F59532E8EF086D518AD2BFDDB8182E0B8665C5C437D5C336E491
444C43ED22F7A64B4382D2072235EC6707616A0230CD3F4BCD70F272953FDF05
20D64C7E78E5ED3EC8BDE74F496CD7E9281B06307CB46876C46AFEB576CD067C
8AED2BAA3679B80BCE5FB7993299B3C5178C05A59CBC321865452BC9D38C736B
16EC79BB71DA8AF33E94F80C6EBCF22E421738C2C178EA7CF12B956C015A4ACA
E6C7242B0F2E88F0313CD91DF20B9F3C5B5F8E2776720EE73FB2F1E4CEFCAD7A
53A43A61A115
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (ActArchiVonNeumann.dvi)
@start /Fa 134[41 41 61 1[46 33 35 31 46 46 45 46 72
21 44 1[21 46 45 28 40 1[40 1[43 1[70 13[67 15[60 6[25
10[45 25 46[{ T1Encoding ReEncodeFont }27 90.9091 /SFSS1095
rf /Fb 22[51 115[62 44 44 46 1[62 56 62 93 31 2[31 62
2[51 62 50 1[54 13[62 6[67 36[31 39[{ T1Encoding ReEncodeFont }19
99.6264 /SFBX1200 rf /Fc 139[40 41 43 1[58 52 58 4[29
58 1[32 47 58 46 58 50 38[29 2[52 52 52 52 52 52 52 1[52
29 4[40 41[{ T1Encoding ReEncodeFont }25 90.9091 /SFBX1095
rf /Fd 11[45 10[40 40 7[45 22[61 78[40 48 48 65 48 50
35 36 35 48 50 45 50 75 25 48 1[25 50 45 28 40 50 40
50 45 10[68 68 65 50 67 70 61 70 68 83 56 2[33 1[71 2[69
65 64 68 1[43 4[25 2[45 45 45 45 45 45 45 45 45 25 30
25 4[25 3[75 6[50 53 4[90 22[{ T1Encoding ReEncodeFont }66
90.9091 /SFRM1095 rf /Fe 137[69 73 51 1[53 2[66 73 110
3[37 73 66 1[60 1[58 1[66 18[103 1[79 10[99 14[66 66
49[{ T1Encoding ReEncodeFont }18 119.552 /SFBX1440 rf
/Ff 138[89 62 1[62 2[80 89 133 3[44 89 80 1[71 1[71 1[80
10[119 7[119 1[100 10[119 19[53 45[{ T1Encoding ReEncodeFont }17
172.188 /SFRM2074 rf /Fg 22[98 114[114 1[84 10[60 5[96
33[163 6[60 58[{ T1Encoding ReEncodeFont }7 206.559 /SFBX2488
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372 -561
a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -372
-561 a 0 TeXcolorgray Black 0 TeXcolorgray -364 -246
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364
-246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Architecture von Neumann)
/OUT pdfmark end
 -364 -246
a -364 -246 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Langage machine)
/OUT pdfmark end
 -364 -246 a -364 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -364 -246 a -364
-246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -364 -246 a -364 -246 a
SDict begin H.S end
 -364 -246 a -364 -246
a
SDict begin 13.6 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -364 -246 a -303 -103 a Fg(A)-6
b(ctivit\351)72 b(:)181 b Ff(Arc)l(hitecture)51 b(V)-13
b(on)53 b(Neumann)e(-)i(Langage)e(mac)l(hine)p -364 10
4489 5 v -364 260 a
SDict begin H.S end
 -364 260 a -364 260 a
SDict begin 13.6 H.A end
 -364 260 a
-364 260 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -364 260 a 149 x Fe(1)131 b(Arc)l(hitecture)46
b(v)l(on)e(Neumann)-223 612 y Fd(Les)39 b(appareils)h(n)m(um\351riques)
g(comme)g(les)f(ordinateurs,)h(tablettes)g(ou)f(smartphones)h(son)m(t)f
(construits)h(selon)f(un)g(mo)s(d\350le)-364 725 y(d'arc)m(hitecture)33
b(cr\351\351)e(par)g(V)-8 b(on)31 b(Neumann.)g(Celle-ci)g(se)f
(d\351comp)s(ose)h(en)g(trois)f(parties)h(:)p 0 TeXcolorgray
-272 869 a(\026)p 0 TeXcolorgray 45 w(La)g(m\351moire)h(cen)m(trale)p
0 TeXcolorgray -272 1013 a(\026)p 0 TeXcolorgray 45 w(Le)f(micropro)s
(cesseur)p 0 TeXcolorgray -272 1158 a(\026)p 0 TeXcolorgray
45 w(Les)g(bus)f(de)h(comm)m(unication)i(p)s(our)d(transp)s(orter)i
(les)e(informations.)-223 1302 y(V)-8 b(ous)31 b(allez)g(\351tudier)g
(cette)g(arc)m(hitecture)i(en)d(v)m(ous)h(basan)m(t)g(sur)f(2)h
(articles)g(du)f(site)g Fc(h)m(ttps)35 b(://in)m(terstices.info)-364
1340 y
SDict begin H.S end
 -364 1340 a -364 1340 a
SDict begin 13.6 H.A end
 -364 1340 a -364 1340
a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -364 1340 a 0 TeXcolorgray -274 1446 a Fc(1\))p 0 TeXcolorgray
45 w Fd(Le)c(mo)s(d\350le)g(d'arc)m(hitecture)i(de)e(V)-8
b(on)31 b(Neumann)-364 1484 y
SDict begin H.S end
 -364 1484 a -364 1484 a
SDict begin 13.6 H.A end

-364 1484 a -364 1484 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -364 1484 a 0 TeXcolorgray -274
1590 a Fc(2\))p 0 TeXcolorgray 45 w Fd(M\351moire)h(et)e(unit\351)h
(cen)m(trale,)h(un)f(couple)g(d\351di\351)g(\340)f(l'ex\351cution)i
(des)e(programmes)-364 1834 y
SDict begin H.S end
 -364 1834 a -364 1834 a
SDict begin 14 H.A end

-364 1834 a -364 1834 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -364 1834 a Fb(Sc)m(h\351ma)39
b(de)e(l'arc)m(hitecture)-223 2005 y Fd(Dessiner)31 b(le)f(sc)m
(h\351ma)i(du)e(mo)s(d\350le)h(originel)g(de)g(V)-8 b(on)31
b(Neumann)g(p)s(our)f(l'arc)m(hitecture)j(des)e(ordinateurs.)-364
4138 y
SDict begin H.S end
 -364 4138 a -364 4138 a
SDict begin 14 H.A end
 -364 4138 a -364 4138
a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 -364 4138 a Fb(La)38 b(m\351moire)h(cen)m(trale)-364
4181 y
SDict begin H.S end
 -364 4181 a -364 4181 a
SDict begin 13.6 H.A end
 -364 4181 a -364 4181
a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -364 4181 a 0 TeXcolorgray -274 4310 a Fc(1\))p 0 TeXcolorgray
45 w Fd(Quel)31 b(est)g(le)f(t)m(yp)s(e)g(d'information)i(sto)s(c)m(k)m
(\351)f(dans)g(la)f(m\351moire)15 b(?)-364 4821 y
SDict begin H.S end
 -364
4821 a -364 4821 a
SDict begin 13.6 H.A end
 -364 4821 a -364 4821 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -364 4821
a 0 TeXcolorgray -274 4927 a Fc(2\))p 0 TeXcolorgray
45 w Fd(Quel)31 b(est)g(la)f(capacit\351)i(en)e(o)s(ctet/bits)h(de)g
(cette)g(cellule)15 b(?)-364 5437 y
SDict begin H.S end
 -364 5437 a -364
5437 a
SDict begin 13.6 H.A end
 -364 5437 a -364 5437 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -364 5437 a 0 TeXcolorgray
-274 5543 a Fc(3\))p 0 TeXcolorgray 45 w Fd(Commen)m(t)33
b(est)d(iden)m(ti\034\351e)i(la)f(cellule)15 b(?)p 0
TeXcolorgray 1858 6310 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-561 a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -372 -561 a 0 TeXcolorgray 0 TeXcolorgray -364 -246
a
SDict begin H.S end
 -364 -246 a -364 -246 a
SDict begin 13.6 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -364
-246 a 0 TeXcolorgray -274 -154 a Fc(4\))p 0 TeXcolorgray
45 w Fd(Quelle)32 b(est)e(la)g(p)s(ersistance)h(de)f(la)h(m\351moire)15
b(?)31 b(Commen)m(t)i(est-elle)d(d\351sign\351e)15 b(?)-364
356 y
SDict begin H.S end
 -364 356 a -364 356 a
SDict begin 13.6 H.A end
 -364 356 a -364 356 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -364
356 a 0 TeXcolorgray -274 462 a Fc(5\))p 0 TeXcolorgray
45 w Fd(Commen)m(t)33 b(se)d(caract\351rise)h(la)g(m\351moire)15
b(?)-364 1414 y
SDict begin H.S end
 -364 1414 a -364 1414 a
SDict begin 14 H.A end
 -364 1414 a -364
1414 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 -364 1414 a Fb(Le)38 b(pro)s(cesseur)-364 1477
y
SDict begin H.S end
 -364 1477 a -364 1477 a
SDict begin 13.6 H.A end
 -364 1477 a -364 1477 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -364
1477 a 0 TeXcolorgray -274 1586 a Fc(1\))p 0 TeXcolorgray
45 w Fd(Commen)m(t)33 b(p)s(eut-on)e(quali\034er)g(le)f(r\364le)h(du)g
(pro)s(cesseur)15 b(?)-364 2097 y
SDict begin H.S end
 -364 2097 a -364 2097
a
SDict begin 13.6 H.A end
 -364 2097 a -364 2097 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -364 2097 a 0 TeXcolorgray
-274 2203 a Fc(2\))p 0 TeXcolorgray 45 w Fd(Quels)31
b(son)m(t)g(les)f(4)g(\351l\351men)m(ts)i(principaux)g(comp)s(osan)m(t)
f(un)g(pro)s(cesseur)15 b(?)30 b(Quels)g(son)m(t)h(leurs)g(r\364les)15
b(?)p 0 TeXcolorgray 1858 6310 a(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-561 a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -372 -561 a 0 TeXcolorgray 0 TeXcolorgray -364 -246
a
SDict begin H.S end
 -364 -246 a -364 -246 a
SDict begin 13.6 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -364
-246 a 92 x Fe(2)131 b(Langage)43 b(mac)l(hine)-364 -57
y
SDict begin H.S end
 -364 -57 a -364 -57 a
SDict begin 13.6 H.A end
 -364 -57 a -364 -57 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -364 -57
a 0 TeXcolorgray -274 49 a Fc(1\))p 0 TeXcolorgray 45
w Fd(Qu'est-ce)32 b(que)e(le)g(langage)i(mac)m(hine)15
b(?)-364 796 y
SDict begin H.S end
 -364 796 a -364 796 a
SDict begin 13.6 H.A end
 -364 796 a -364
796 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -364 796 a 0 TeXcolorgray -274 901 a Fc(2\))p 0
TeXcolorgray 45 w Fd(Qu'est-ce)32 b(que)e(le)g(langage)i(assem)m(bleur)
15 b(?)-364 1648 y
SDict begin H.S end
 -364 1648 a -364 1648 a
SDict begin 13.6 H.A end
 -364 1648
a -364 1648 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -364 1648 a 0 TeXcolorgray -274 1754 a
Fc(3\))p 0 TeXcolorgray 45 w Fd(Commen)m(t)33 b(un)d(programme)i
(\351crit)f(en)g(langage)g(de)g(haut)g(niv)m(eau)g(est-il)g
(transformer)g(en)f(langage)i(mac)m(hine)15 b(?)-364
2501 y
SDict begin H.S end
 -364 2501 a -364 2501 a
SDict begin 13.6 H.A end
 -364 2501 a -364 2501
a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -364 2501 a 0 TeXcolorgray -274 2607 a Fc(4\))p 0 TeXcolorgray
45 w Fd(Il)30 b(existe)h(sur)f(le)g(w)m(eb)h(un)g(sim)m(ulateur)h(p)s
(our)e(r\351aliser)h(des)g(instructions)g(en)f(langage)i(mac)m(hine)g
(\340)e(l'adresse)h(:)-137 2720 y Fa(https)f(://www.p)s
(eterhigginson.co.uk/A)m(QA/)-137 2898 y Fd(V)-8 b(ous)31
b(trouv)m(erez)h(des)e(informations)h(sur)f(l'utilisation)i(de)f(cet)f
(\351m)m(ulateur)j(sur)d(le)g(site)-137 3011 y Fa(https)g
(://pixees.fr/info)m(rmatiquelycee/n_site/nsi_p)m(rem_sim_cpu)q(.html)
-137 3190 y Fd(Indiquer)h(ce)g(que)f(fon)m(t)h(les)f(di\033\351ren)m
(tes)h(instructions)g(\351crites)g(en)g(assem)m(bleur.)-364
3273 y
SDict begin H.S end
 -364 3273 a -364 3273 a
SDict begin 13.6 H.A end
 -364 3273 a -364 3273
a
SDict begin [/View [/XYZ H.V]/Dest (Item.14) cvn /DEST pdfmark end
 -364 3273 a 0 TeXcolorgray -73 3384 a Fc(a\))p 0 TeXcolorgray
46 w Fd(ADD)f(R0,)g(R1,)g(#25)-364 3777 y
SDict begin H.S end
 -364 3777 a
-364 3777 a
SDict begin 13.6 H.A end
 -364 3777 a -364 3777 a
SDict begin [/View [/XYZ H.V]/Dest (Item.15) cvn /DEST pdfmark end
 -364 3777 a 0 TeXcolorgray
-80 3882 a Fc(b\))p 0 TeXcolorgray 45 w Fd(LDR)h(R2,64)-364
4275 y
SDict begin H.S end
 -364 4275 a -364 4275 a
SDict begin 13.6 H.A end
 -364 4275 a -364 4275
a
SDict begin [/View [/XYZ H.V]/Dest (Item.16) cvn /DEST pdfmark end
 -364 4275 a 0 TeXcolorgray -69 4381 a Fc(c\))p 0 TeXcolorgray
46 w Fd(MO)m(V)g(R3,)f(#45)-364 4774 y
SDict begin H.S end
 -364 4774 a -364
4774 a
SDict begin 13.6 H.A end
 -364 4774 a -364 4774 a
SDict begin [/View [/XYZ H.V]/Dest (Item.17) cvn /DEST pdfmark end
 -364 4774 a 0 TeXcolorgray
-80 4879 a Fc(d\))p 0 TeXcolorgray 45 w Fd(STR)h(R4,)f(72)-364
5272 y
SDict begin H.S end
 -364 5272 a -364 5272 a
SDict begin 13.6 H.A end
 -364 5272 a -364 5272
a
SDict begin [/View [/XYZ H.V]/Dest (Item.18) cvn /DEST pdfmark end
 -364 5272 a 0 TeXcolorgray -70 5378 a Fc(e\))p 0 TeXcolorgray
46 w Fd(SUB)h(R5,R2,R3)-364 5771 y
SDict begin H.S end
 -364 5771 a -364 5771
a
SDict begin 13.6 H.A end
 -364 5771 a -364 5771 a
SDict begin [/View [/XYZ H.V]/Dest (Item.19) cvn /DEST pdfmark end
 -364 5771 a 0 TeXcolorgray
-64 5877 a Fc(f)10 b(\))p 0 TeXcolorgray 45 w Fd(CMP)31
b(R3,)f(#25)63 5989 y(BGT)h(15)p 0 TeXcolorgray 1858
6310 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-561 a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 -372 -561 a 0 TeXcolorgray 0 TeXcolorgray -364 -246
a
SDict begin H.S end
 -364 -246 a -364 -246 a
SDict begin 13.6 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.20) cvn /DEST pdfmark end
 -364
-246 a 0 TeXcolorgray -274 -154 a Fc(5\))p 0 TeXcolorgray
45 w Fd(\311crire)32 b(les)e(instructions)h(en)g(assem)m(bleur)g
(corresp)s(ondan)m(t)h(aux)f(phrases)f(suiv)-5 b(an)m(tes)31
b(:)p 0 TeXcolorgray -72 -10 a(\026)p 0 TeXcolorgray
45 w(Place)h(la)e(v)-5 b(aleur)31 b(15)g(dans)f(le)g(registre)h(R0)p
0 TeXcolorgray -72 370 a(\026)p 0 TeXcolorgray 45 w(Place)h(la)e(v)-5
b(aleur)31 b(7)f(dans)h(le)f(registre)h(R1)p 0 TeXcolorgray
-72 751 a(\026)p 0 TeXcolorgray 45 w(A)m(dditionne)j(la)d(v)-5
b(aleur)32 b(sto)s(c)m(k)m(\351e)g(dans)g(le)g(registre)g(R0)f(et)g(la)
h(v)-5 b(aleur)32 b(sto)s(c)m(k)m(\351e)g(dans)g(le)f(registre)h(R1,)g
(le)f(r\351sultat)h(est)63 864 y(sto)s(c)m(k)m(\351)f(dans)g(le)f
(registre)h(R5)p 0 TeXcolorgray -72 1244 a(\026)p 0 TeXcolorgray
45 w(Place)h(le)e(con)m(ten)m(u)j(du)d(registre)h(R5)f(\340)g
(l'adresse)h(m\351moire)h(125.)p 0 TeXcolorgray -72 1625
a(\026)p 0 TeXcolorgray 45 w(Place)g(la)e(v)-5 b(aleur)31
b(10)g(dans)f(le)g(registre)h(R1)p 0 TeXcolorgray -72
2005 a(\026)p 0 TeXcolorgray 45 w(Place)h(la)e(v)-5 b(aleur)31
b(sto)s(c)m(k)m(\351e)g(\340)f(l'adresse)h(m\351moire)g(125)g(dans)g
(le)f(registre)h(R0)p 0 TeXcolorgray -72 2385 a(\026)p
0 TeXcolorgray 45 w(Soustrait)37 b(la)f(v)-5 b(aleur)37
b(sto)s(c)m(k)m(\351e)f(dans)g(le)g(registre)h(R0)e(et)i(la)f(v)-5
b(aleur)36 b(sto)s(c)m(k)m(\351e)g(dans)g(le)h(registre)f(R1,)g(le)g
(r\351sultat)g(est)63 2498 y(sto)s(c)m(k)m(\351)31 b(dans)g(le)f
(registre)h(R5)p 0 TeXcolorgray -72 2879 a(\026)p 0 TeXcolorgray
45 w(Place)h(le)e(con)m(ten)m(u)j(du)d(registre)h(R5)f(\340)g
(l'adresse)h(m\351moire)h(125.)-364 3148 y
SDict begin H.S end
 -364 3148
a -364 3148 a
SDict begin 13.6 H.A end
 -364 3148 a -364 3148 a
SDict begin [/View [/XYZ H.V]/Dest (Item.21) cvn /DEST pdfmark end
 -364 3148 a 0 TeXcolorgray
-274 3259 a Fc(6\))p 0 TeXcolorgray 45 w Fd(Quelles)f(son)m(t)g(les)f
(v)-5 b(aleurs)31 b(dans)f(les)g(di\033\351ren)m(ts)i(registres)e(\340)
h(l'issu)f(de)g(ce)h(programme)15 b(?)-364 3770 y
SDict begin H.S end
 -364
3770 a -364 3770 a
SDict begin 13.6 H.A end
 -364 3770 a -364 3770 a
SDict begin [/View [/XYZ H.V]/Dest (Item.22) cvn /DEST pdfmark end
 -364 3770
a 0 TeXcolorgray -274 3876 a Fc(7\))p 0 TeXcolorgray
45 w Fd(Saisir)31 b(v)m(otre)g(programme)h(dans)f(le)f(sim)m(ulateur)i
(et)f(v)m(\351ri\034er)g(v)m(os)f(r\351p)s(onses.)p 0
TeXcolorgray 1858 6310 a(4)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
