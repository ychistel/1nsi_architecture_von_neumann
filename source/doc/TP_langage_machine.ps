%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: TP_langage_machine.dvi
%%CreationDate: Sun Sep 11 07:41:32 2022
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFBX2488 SFRM2488 SFBX1728 SFBX1200 SFRM1200 SFSS1200
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o TP_langage_machine.ps
%+ TP_langage_machine.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.09.11:0941
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: SFSS1200
%!FontType1-1.0: SFSS1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecss1200, tcss1200, lass1200, lbss1200, lcss1200, rxss1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Sans Serif) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFSS1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-197 -321 1455 895}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839D875E65955260BEE4FD2EE46C4CF0F
EBB56CF719D83812B0CCCA99506907D390244B14CBFEB79D52658E88D4D4AAF5
6EB24DBB527DCBA8F432EFDC13764823BD046DDD10F18279AB5535003ACEA6F7
EEC7F9EB81F17B0B61C2AEC870DF108219795AD73918BECC47853CC4D192C4DD
F0C94E2D477E3737D801D9F1238820CF0AC671EEA2BF41A027E2C3BB420FAC65
91347049BBD4B735BF006DF39CEBE0FF4A310B1C70D087326C54337F8EC36C88
7328908888D67CE61273690B2F7993F5BB0DB7593C96273BE448D924903CA1E4
1CEEEA91F50683773CCAF7073258CBFCF2E671FD0AC9C2F147FB3A2AA8E4F4DE
C64CF9127209DA3742C8FF678F053BAE630E1086520BB2B4B29752224863BC52
0DDEFDBD6B5FCFAAB31E759E604DCA487EFFCECF5436FD74FB29B56BB903A97B
CC0CB60B12F82ABF3D080BAC8E1E951424F93184B9451505B8CB4549E58A8429
C864A8F4638DE32E3E1B9DC968EE31210331270FC86FAE7634D396CA6B5FC99B
9F6975A218D55BE8658B383BB613F6390B7107A5127B266273E7B4C69CB3671F
BF6742D64FF368CDB22924D4DA24B1196585A2E525B2BC49C0ED21AD8727797B
708A13CB581233B7FB519C78E166E7894E1107FC84F103977B9731140F397F41
09368A85A614F300424150A03194FAA04DE41E7F73C25D7AD3FB1871901806DB
6EF6414AFB850DBA9A949FB818B723E073A3812D6F6E5AB1E4AA91733BF4866C
6468C8C17CC542A078E326CD7926BA32815ADCC0FC1B46FD20EE59A2C9C53371
DDD0804355867739963C97E0F570BB1321CA1B86709EB5BAE0B4B18CBF56FD05
694756638C8C23F84C7B4F3F539998850C090A3126077B5076D9F513164AD228
F1FAAE99F3A7FD4F604CF1983CE4EB62E49BC277D70D05AEA2DECB03964FA99D
CD81CC6A8CC0F2C45AC019BA60984E53DF1D4BA61A91B741BB4E85D301D215AD
30EBEF83F727F04311A3C54C8049D22C664C7A6777F03F6DC16BDD95625D45A9
46337E128E6F1B45473D4B9080E3759D343D96ECBFE607727EBFEC066FE99E05
99B2A4CFCF5990D7D6BF6A3112246806E0B9F63AC3417C526541673C77151E35
6F6AADFAE256888C9059029C5449C464C9C18810A6C4B29C19A73CDDB01EA1C7
DED45F128280E2D8CA8C2CA5031ADE35C2E6BBCE3B73DA616E20B52F46EC9E3A
8A391F570610CDF0042C3205A1255A9EDBEE23A55FBF6108BBE0A31F812A245A
84C7A836A58B084C9E52E236A27C5283E5BAC2B1873C725F3801FA9C157B541A
ED1C18AE420507DF9549317921564C2694703B6374248314A08D9F7F1CB78B03
B7DCFEEB0888F2896FC501490094C3F3ABA8EF6EC61443591A8845AE7CD4F6B1
B98A404B11FB169C6A80832D1CB442930E3C44F3F57B22DBA3CC1FC21E757270
B831B28E117FF22F8337966F12D385A7D5DB986A59AA60664D2B3CFF2DA0A6F1
998EA598EAAEE257A200E39A0DC9A0DBAC0ABC96648FB0C39B1B335ABE3E94B4
B85CE075FA11C29AC905057A9D4D6FB975EFD01ACC4E0A0B808DCC5C70B38AA9
26FD2AA8F081143E6545B566CA3BB3BEE0D31F87301AB39C27F7636E06C828E6
8883E1DE18E3262F9391A0ED0E7E7214FB1315BEDC7237A0B69DCD788072E8E8
B3ECE6BCD788A66D08CD8FC01B9B2CCC0D94D6E7032D0678E1E37653F6907444
C8824738608192947FA453D0E820067CF1C8ED4E3F5DC53EACF21BD0C30647BA
59A0422AB6EC3FAA5702779FF2EC5749E9FE986CD9C46005AFA5269D4358150B
02D379447D36A772DF16A009E3EDEB668F1E896F1F9E1E4F6839CF10752D6F64
6E7ADC1CE27CEFCDE405A7ACDF252A82E10483AF93D9CB22452D028F4FCD6086
7ABE3D7565AF00908000E49A10A85306269C920CF3D64F952CF68A50A7578334
3374A117F305E3191948D03668F7A253A58D39D20C3855DC34CEA604CDF8D1D5
F5F25B8002907867B2CF6CEE942948D8A515D17BFB6F0F79BEA87379F2D5A37B
5B6A8345CD0BA16991B5E31A70DBCEED6C88500EBF8AE6FD21001BAE4419B280
588D2D0A2C740CCACF6AA5E16CA373EF9E01759DACD674B69869D1612D5EDA6E
BFF4C0080EF1A47E4614BE7C953069B73C614769B9A71943CC6A294A54C857BA
16ADC1AF2DB165563CCEB320DB0FBFD83557FC980B86C490813963E719A412D1
9AB6E2D76A8CE584F9C4E5CE065EA0CAA4C451A2C28DCF5CC88A911433E26A82
297E6563D3F4A31EC6C840C47DFC64176ADC20CA64D698C013B424A6311CCC48
F8B90156A930A328415465705C6AB0224772F81341C40BA382BFB1F6B493ACB4
AC69B3DE59C3435AA0E0DE20E6C111559EE4868E42EC5CEAA467E942B805109D
5FFECDE2B84A9473D33FE910261C1095C6E99EF82A6F8D46D6AF5D190D78906A
CE661BF1DEE5EBF4290C1CBFBFDCAA2AD71C12CE515DB15C0DD50628C840DDB4
9C4A6C16E0EF1F326A2DA07DB8ABAEAE92E4880A1D885DB8A86CC7A26FE7913E
39C859BAA547821F4FEF4408E58C550F3962934ACB4327D9A307D37585442E39
8A105197D9864D9B5B8FC923D294E8B18C7B8C4563F7B1D0E78952F6FD8D89FA
44CFEE3C4800EEA3A5FD9DB16A14CD271718777C4447CF35A448037ED5E72DF3
175DD672E13CB17A8B2CF58042F6BD6C8150FB4A651C7AEF86EE41DA8665406D
37C55A9D359F82213E9D5046B24B2888605828A5D26D4829E03C39AB702BA6E6
908560BC102E1EDFA79E25FAE4B89B4B6A3297C54D460EC33D5A2EC5ED25EC38
5D5B22624177C62E5336385A8FAFB82EC62BBD3A4B5882B92407F0C2F7247DED
F5DE86353AF0693EF0FB94DD866A1701589D901174BBF278F7C9B55785FFA7D5
D8E4CADB920ECA39B970DB7C6032F887E36190E5E3971AED5C83E61A5ABF89EF
17F259F4E7EB13C2C229732D1773238EC69B6EB6D03E55BB557C491E30D11813
801BFDF5FC442F026D1CF852F314912EDF4315E3D2F3A9ABB5AD0567AC878EC4
4A7215454E54C9EC681F0854829DAFF653300EE2851E79EBDFEAE5D3ABD54B73
ACF1F7DA489CA0AAAC6268440C2785DEFCC5C21890BAF641E2469EB036A248DF
FBC68DF0486EF3E2FB47F558AFF3761709A6B6243F1065F40286D62E664D818D
CDDD6A218C0136CBE5BD34E579CED7EB6B950A9A17040D259548E1964FCCD1A6
9C81621E5B758CA617A141E3C84C587EABE8B76CFCD94BDDDCFB538B2446C025
4F5D22642493AABB4EEF8D1F22FAD6A28B3F0E4EF0228A38C69E2488319CABD9
3BC84CF44FD1B87D50FB1BFBE806BFD987609F4E2AC1F6C8A56A3AFCCC163FC5
B940AE85DC45D1F128CA4550BFE55AB8ABB51A8F113C338E7B485BDA3F1B7AB3
DF62F406D0571EC5B35103B8B031D01A7BBF0194CD537FC38BF44E611E5AF530
CB2B1BE8C3803C8C57941FDDCF672ED8542BC80D89C422C502FA0840A71D8CA5
5AB5E6B67550D0E418E59EC82CFF4F9245DFAE49D563E47FA3F4A3EA4C38EC16
B2D597B7BD826C662BDDAD707963C88D594B9129AA0D01CE53EF4923EB983EE2
7728E64700B1EE7D271919B1677A8B26505067072D01A40774A4E92675717819
4E2A5A6A5291F77D83AC94301774B2DB39D6C3E8B60AC5C6D5EA53BE3465E613
AB18E1CF5D31DB19064B7435D7D06BDCFBC55F756808F49784B9AB89369F2965
4EFEBCC565FFDE0940AF305CF8C20A78B8E5333D1FCEBB85B1388B13B40B930F
48BBE05524EF350C83B7284B6A43E520792075672344DCEE4F9F1687F0FE3CB7
782BDF2C80470532E692C31077AF67BCB5DBB7BF5ECB9A2AE9F50100F19786F0
438C738496AED573CAB3D00B0495D0DB39F3D7C08B2F81E288E56A2B6341D637
A99A87CB9F8869029925BAD6B32C5EA6A242E4051208B4960B9E7CF2782C2F3E
67AB8E1615FB1C98234F24963217A389CCAC656215E7CF1771C0E04EA7347E8A
840FE39FB96D9BA174D8A84F5D696D871D7C735170E554AF5C192D59FFBC51C2
E3684FB04DCC95CACC2D539CF52CC6A62CF52F5B354E5E0B57C73D922475A7A0
F0E934A6BD6E4674AA5BF886475B74A8B721566EC9A7373C3A4646754DBA6E41
EC4F6114F063574D9980BBEC8C42A035255964854B67CEA126ED773D14B2E0D5
26D61ED37D34F703E622B86652720F40D079D654E76411949786C2F6D9687A8E
1551C995F9378F5DE92439DE7BB6EE8413613347AD972595B0BFD0746AFB81B0
9AE576CEA6BC2152A52F5531BA7412D4FE34E46F95EDC4010AC0B6B1D7F33D5B
4AB2124D67842DDA6AC4D3AF190E84241DF409972364752BD89C6FE4B519B9FE
8F76F50500684DB837BF357514B42B6EE6BE168337715A9B5F093B200D63EB2C
312665A8DF22AE05E35FF643E7BFE8302FF2BD47F24845E3FAADEE2381E5F6CB
5689F1A9FFB71AA45B0E7CF094AE79594D5BDE7B8DC4C5D8616D4C2B82EC0403
3CA63A88159F644CC8D89074FD5B02277BA53FFB06AA8D65134C4B4C6318D0D5
3C3793208EC0A3654EAC3D7A2D5774CC234EDE48631B956FB5FCCFB1DE17F8AA
0D66CDE5C5A13DEA2D839B35D9902C9C9276AE0982B334B2ABFF27B773081D65
98709C30C7DDF45DEC276109CE4ACCC2B527DC1F0627C4F44BC75AA0D66DBD90
42DC80FF5D783A91D930D5576025CCD21289C4F6826A2F2555AD4BEC747B6CAD
29EC5975175CCA0FF72D2093079A2642CF23F4014F9C84E8462D20F60E926E8A
89D6B762991A8BDDB6346D78857274D766EF79E0BFA409DB281DBA7D07185C4C
BCD98E4EA24E4DCA4A33486B5F50A95E167E3C5FD5ABF3D87A9B85774467E823
88122039392E35E658693D3691805D10E2094A521908A83110204143DB097598
F65DF36FD0B8FCB635C4EBBB06F08D1EDEA2AC078B18E50243714D42FA341CB9
1B69CD4A10C37D5EABF66B268AA319DD67DBAD61C0A0BFD662794496BF3AF935
1A62E8D0C45713E455293A1C911AACD20128792AFA5E26ADDD5BDA325EF01592
6C681FDB01E5FE6537DFA58C52BA94D85386D6640593C8521C2217BCCFDE3C61
BAA6F0B5827F0BC9549D2EA8AB43DFFCC5B4000A38048E279C576EE7EC3E97C7
925F24BE03A8AE09A7949E371C682AEE776A4C64991281ED7735DD0BEC77632C
BF640BE1A6F4BD2175615D5535203307BF0047AD1108AF7B3BD547B097347022
B082A46E0B4ECD8E7F4D42E4D3CF24F552F5DC6B9FBF62FB113DC2E0514DC9EF
A8531FEFF6298C4728C9C66556FC81C0187AF573194DD1A3995E44669D260C1B
54206E16BBC9223EA5D9B7141B5CD0F503B4B1FBADBB424E8DEB9AFB5E669792
C2E678DF07F6E5F7F9DEDD098FA3DCA837DF0CBD61A8D5F5BFFCA8CAD6BD2A9D
4E9F01011CDF5446B0CE9745A69E771097C4BABE4B5C57B445E575D535567B2F
7178778A9C1711C64987F435CA0D9FA5DA0F71911286CC31D0752A8E21208723
1C485A1FDBBBCC4B1331F826F2DEEDF42FF7D1A5BE8E5124BDCA27055484643A
E830BE0C1734504DA3590A8A207923FF154B85F9782D79679733C13131037597
224A80236EB3D41DD87D87EF573A000487DBE37CD04BDDCFC758F6F132564C5E
C6EC425F903AEB02299C84FF584841E420EB974A671D66EB451B0A2C759F58E8
07922A0069265D1A8ACA300806510C607DC9970677A28B65BFFB4F885B77390C
9FFD39FC197D199C9A1A89C9591FA9AD66595135270BDB46B39B57816991B24E
6581F74FE0DFCA2F9426A104D9601F647D3B89066A22AB02D1216A040E021389
E89D5B697FC8F45134F901C992626F32847D6C49896D7407CDF9F779C69FD95D
9DC299FCC6F293085CB54BBE51416E3275F986B160C5F7ABB5727BD52A3A7D2B
89C956B029ADCEC97172270D3F77B5CD373883394BA9DCBB99669C4436EF69EE
2B518C9F5A244AD46DD69562D1FF2E4D93870B6C5212F5E944F2C1241158F4AA
7F454810EBAB46D8E86756BB29F04A93EDB7B6F3ED6FF5C84DE86168B62C52E4
EEB24124BC32C822768363EAA491DB3D9E9C9E53EEECE35313545246CECAF3EE
1260CF3AF1721C4E728A9D9818B2F7E1C11398FE31DC936F3D24C7266EDCC8F1
A91300222A02DF36EE9320D6DD1E293C067815E2CA4A60E428582BF853C5310D
A6851EED771BDE14ACA25D28962F2E0A441C1BFB73C784A53FB40DA422A553D5
CFE2C08C47F05D37C5352FFC60597E226C4A6B34F4C9E298820FDAC00241D48F
C6BAE78D2DD58B2C5537F8E5596DD0A835FE28F9677247C6E3D7322B9B66DE54
826E50E6F3C6CD88EE5CE7F6CADA6A6B7D2A919CC50B0EE4C75B3F8CD9989BED
C9464E4156B1A1BE99B1B9853A8B013892BC89C4CE320BC34D948F0AB263B405
B4722D3D0F89CCFC3B9534BF36603F3F77935F24EEA6A9F0EFCFFEAF39F9C9EC
92F1DDB6F6D1B96DD4E11826EC6D1BF0D3D7F69020B67A68CD3A51C28763E7C9
4595CD7FE4F2F92BA7E292951B674C4DC9D1D04AC9C488F12EB41B9E7C0BC8DB
84C1619AECBBD05FB825597503F0D6049EC3865D3E82B989F287F5C3808A18CB
50A0FB0952D9FB1384001656413C74BA66D833D6B666215006C95117852836D3
DC2CB700D889272CF24C20A0D1C9E8F4DC2BB6A5F2456430F6FB142380C6A885
E325B7D69765823B05EE8604E044677F5F150BB195AD7D1232978841DA122921
ADBB9C3774099E1998D648A6B50506B0F52BA3B0CAB9547A683D4CA6293C66AE
DE3AAA41CF1C184C912450CCFC02E2FDEAD12F117E85D2209AA1F63AFF79D762
78604A4002F8850FF07329372A93F35E5CABF73E2B90F5EF0902D45D99FD5F0E
A4C01DF06B25ADB91358DFBBD0D87A416BC082632679BD0E5BF8CB3C3D845898
7A3D5D5EB6E29888302F4ECD1AFBF6774E20B2FE3288554515B9F4CDA6A0E9FE
11DE32872F228F6823D5BDF786F3074C4B4777F1C77ABF8356F94810960FBDA8
69DC79D8039DA68E8E537444EDE4D37EB064E9926E9589D61F621B1C51CC63F7
7D82B3E4B62D54BB5C196B3AD2436169F2F24403FF6A5ECD9AB3C3FA395199F9
3356DF7581346B2254CFE2AE6F4E4B0F75DDBD0C3F623C6ACC5BEF7CD5C08E42
C278470821D88DF40F5A972DE89ED911D3F64EAC2AD3726252ABC9DBDD7F0BDB
6DD5F91ADD802F1E7C65809609E967D03B2C744BBF7DF614F6780A9818609B04
176ACF399568028A8D37C9B547C6C1F42151470579E032E2D31DBF97395BE81E
848CC7B7B079DE146728D18F9E8BDEA2E1B1D3F8031887C7C784BD5B47926C68
5D6301301AF68C3091412B49ED251C550EF94E603D88211DE2C1E99565B911B1
6D34E5AD11D7A028153C9F7CA039E9A5E9F53F559C88E400E64D6E9DAC8F796B
912B9BD5DE96390DF4283DBB777C5F985741536B76EC6C5AE447C99110D016D1
E500653F2599ADD0094FAE8251AA982510C7391787A53DEF4DA314F6A3F41664
0716FD4F0D5DFA1D41B204DCF51405BA1DCEE1A932F2B581572D98F18CEEDEDE
8D9C8AFA59B5B96B911CD7BAFF119EF9DA7CC3E2D71CFC1AAB938C32790BEAFC
C314BF3FDE3B534D1676FAF8121DF0C1C992AD4E9F088B5D6A6385747AE505FC
9C5EC743E55E2F2590A31E05E6C8076D2B8A73C45D047AEF9A926F650984C432
8ACE4B92604A96D970F6DC344171ED17296476FC098BE5FA088F14FFC524F196
21D2D81176BA98DEA75403F6C8964057FBE2F2280688A88611151BDE5E329E27
4322BC4E616E14D4D4084AD5831F91D29A5B3F5C8723F594259D7BE49617EC75
6C93B39DA2D7C6EE668580DAB560523F8B25756BBCE55EA7EBB5E65B3D311D68
6ABBE6D30D90247E2FDC407FF8B08279AD371A7D2482954E1CE0BB20C6CF5DD1
0BA06D335B1565CCE8AFB0BF8E4F105231AF603FBB995B9633E1F10DCD828F68
9A9065C6887967948579B01EDD51BDE9E8549AA685DA9ECF353D02825DD76B34
DBB969ADFFFC10A3D9F0DB24F1F9D8A1DA540D8B14B9B684F5969E36F0DA34B7
87A38CD24ADCA6E3D05A213CF4CCDDF342E184BCC24A05FE3731ED716A24CFB2
1FFB688FF4C0EB784B4093D1B68FBC0D53C386A53E3314FF64D44A2B43E0C83D
FCF33A9EC3F61908781720E99C1BDA54364F2F714B5D0F78C69098B27FFA404E
685B2C3A10F483FFBF44E364A6E4CBEA21292B85407F0B79150E4DAFF59ED280
AC966A55EE4C859CBF3D382D4B5DE1C6A5FC39BC31444CB58AB7612444953DB4
2464D1FF79615304A65FB7C4DADB77BD09843A5E0713DA04D41802D11CD481B9
C4740BD72D25045DC76E9A9B8068D5D3E3E690497319DCD60FDDF170BD84F200
47CC759120AC07DC2CCE2F3A123C6E267745CBF1F6E76C8C14C41330942FD866
CF9D143BABE38EDDF79FAE685CE7F8000D71140AE06EEFAAA8D1C34E1104948A
8E94139A3CBFECF8186AD39598098B3B80A543D8B18EA37AA1E247A034684219
05A65FE2CD4FE65E89992FFCF0B37B972447475CB38C7A634F07C12385048A73
875792AE42C7566FBFF98010F997F7BB595A6D2B7A168AEB971AAAF7AF3D1E88
3072264562A5FBE2E3EEFC8C622B891F40ABC0B36EB40A342CC1D2A2826CC1DD
D4D3A7F8BB35E147C0FF6BE1358861E3B3FC86E9738D251CE8ACCED62D592A91
B517E63509AE32CFCE248A321630BC1ED58FC541D56A3754F382BEC1EF09AE2E
45CE3D0A51AA90A7BFB6EFB196DBE2AB542FD6CD4BB50F2088E229FD0C1DACFF
E16568636CABA978D7B4E22907EBBF4D83F403B48D893E8E1F488892CE2DCC1D
9CE1AEEA8F53282B81390158EA6C792BF9D4C47DE808A3C3A4EA46209D48E821
BD9ABCB0158C03BED18F63AAFBE94F97444065AC171BE719F4F41434ECDBCBCA
FB9A4256AB8E107B5C3CA85DB7214579BFF1D84B7EDCCB77EF9BF45C3477DB74
9A37196DF14FA463AEBBDC5A40266B495CF17EEC6B52E807E052BB5BFBC0DE24
E585834DE330A716FC2C8076F757B079C59E85B8414646D5906BE1AF196F66E9
5062C5EA8E80E032E0A741333CE61BE6B0B2ADF749F1F1EFC4855CD6AF0FC0C1
801A8786BA8E8046E725B055CB9F067EC3B1418C11A3CE543DEE841F964FB2F6
7583B6F9559F88B97701BDB812A2DBBE800127740DFC7C0A63471BAABB6FDC5C
7A3819DE436C304D2F32739A828CA47BB98854175C3DDE00417FC2334F8DCA3D
5A8C6DB50CDE08ADAED6F8D99B7E87B5627071732554039C416E5D9D3E57A9EA
1E17AB2EF4407B43AABCA90374656BBE94B3EBA89303C80CCBEEC4D96162706D
7AB94E8DDFBDC5C4C19E2EA0717A2EA3A885432D55549B0AF6BCB0CEE2CE5990
B7F0B95E2990ADFE0CB26D77BFE1251E12ACD9905477A27E09ADC85B36D2A252
2F91E7BA25981BA2B8C2D08F439368B3F7BA13AA74A63B332531AE5718FC658A
106D5D51CCBAB1796E04F8CC048CB4060884DAEA6E6E13ACAB045A7CA6D0B920
D6C8DADBEBB721F2CB5EB3C8A4BA3C8967C76D97AF71AFBE4A539DCF6A938556
B9F6B9F8D68BBA6A40B33CDA6C7043A46D0E79EA7822B5FDDC57E6512EB28DD9
C8824ED387651E976A208CFC4D303B385726472E9A4D8B35DF826F0F69CD1CEF
A340E090A2F470CB793B9374232805343997F81D61327104BD8FB7510EB55B79
46068B44A1B4E6A388918EC2D3F1FB34730F0DAEF63489BCF993529B0D39B512
A4525752B3649DAC991951C5F3128DA4C712161059DFCC034B23D824D55E8CB3
FF18EA2B039CAE6E2F0F1F08A82640FD7C9FEF93D6D27DDA3B72384947F7CF48
AE07BF215041F590F1A2C973BEEC13D3E66D1B911E4BCB00F8CD737151FD322F
818C7E37D04B3A0DAB5C71E9C2B76FC68837C9FB4FCB728F8C89074B007199DB
E01136DA56A79473772995ADCE702F9730E9851E2EBC6724D30253D4D58C69B6
9B39617CCE36FBD94BAB14A4D243CF7CBC4A78F728DF54E154BECAE85B80C7A7
24FD1A62FC43C00005AAAB4A348200DAF98631A87BB3ABDA8BEA7E002BC5C683
3267429770B07E88AA6E9CDDE02A9B1207BF2DB8CCB7DC6C35A8E47F4905B5F0
875F388C5E09DE6C863BBE5C4CE7F8B2F26880E963B1203E66FCAEE751F6C033
F51311C526CB654CEFDA83D334196A6951122C72EC43F81E3475A80AAA5487E7
3D2F638CC37F175954B0BE5117FE99E37342D96AD601EBCBD4D0C240F1B5706E
FA56FAE5FB45BD601996760C84180C0B664E55782A8657C23FB1D027C3AC2ADA
C04DDE54FD1EFAAEF0CB63E733A7FD43EC3DFF42005091067ED886A48BF55233
23BAE206368500432DC68B62AD3DCB63DAEF966317EFB87E035E77364D772F23
A0C83E26E356F20A60B12337C22EB1981FA4D5E9ABDF4995417C16158BE9940A
086BB71B922F5F15217E842073E2FB692D55ACA78727915D4B5E17C6F170CFBE
D222153065D8DB0630D6B734B122A4874B5EB280795B5A903AF2E399BF436A1C
0659DB0F45EC0092BBC2D09CE9B7D215FF1C6A1101010611F4A246AFA49B3902
042D36CFC47C8D74BE6F7F38729F352B086375043FCF018208637CAF3D308E51
02A6F724F145268B022CED4A3F305637CD9085A2A0D114FE0D10305F7F8D82CE
49F045A65EAAE59CF2E44164AD8EFC76AAADD872AE81DBFC2F5B12E275CB461D
5C68D271A2DAD508ADBAA4B821EB5999826B4BE57C51636601ED2F3C7B47C829
B2819B59CF521EA18023A2C61F67C2D477BC94A55F66CC2BDCFDC014D3FDD86C
54EC45F5C6B2ED2718EEFD1617EF18F5BF3756752D16F5A14A8E10CFD23A4865
ECBD44960BCE8C5F588B9F0D6AED3823C10D92B61C1F30862ADCCCA5F3098E78
4BF832B9E26944D8F4302FCFFA571F789A94042B6B0B5FD9DC74865AF6B7D6BF
7F8156B850878FB98A793793CCFADC638985B55508D09A6EAA56EEE8DA4A1F1C
0132706D4F057B9E264C6368740B0548E8DD7CA2E5A3C8E03E531F66D1F01237
29E48694A7FC99B9A6E8A2A6FAECBD8544BBAB1C9F14EF1DE734EB3F9A6F9FE1
B322E676EEA7BAD5424D0F5B9602E5EE27640A84338AB379BEC0953318CDB3F2
665E1C8037EBCF9889762260E806B63BC96618BC1C8972067AB8874961EC053F
BFBD7069FCE918408381E88C42C716EC881BD22FF880114FF7EB901E666BAB72
3410A8FFDB875B7778620EFEBA485464FD5827C5612917EC5F3C1E826B64B126
18C6D03CCB313E91C8B592B9453D0A23329BE75909EC56635355CD496E262469
5933CF8CF542D57E6273E0470260DB4833625F40215C2BAE2FC4BFE839CE87B2
C823FD64BB7246E733E41389883CFF095F92B9AFFC351E072D1804E63CA99760
7C235E43E2BECE36122BBF86E774C4FDAEAEA1B0AEA683CC5F6E7E0BF41F31A8
287DDB2E982221EF8FF613480331C3A7C7BC332588722BEB51A134634E3E35A0
92E676FD0C048C5F32B9F41C8A7C353873A4009B68503702E5396AF2BAD8EF8F
4C36E4A693A0AF556FA57A0BA5403B7A9695FE1113FF24E4C603EFC74D5858D6
61BB0DD714D0DE1A99A16A7793CCFBC20443C4787EEE80607311D0646C0CD21A
B74E24B4E27FED41A5E1300C8323EB60A77D85394FC2211633D35067890DE09B
C5245FB148AA9606FF720399FBB03F26581EF9C3ABFDCFCE1DFD9355043E4975
45EA22F01DAF879F122C687DE1DC4DE7A4A6C685063AD06D5C688DE02999F4E9
028C24CB0CCCA42C496333E6F3DF0DFB2C98B17FBA4D570E8F3EA3AEF69094E7
A83521D1313DD09C684D59E1FD000DCFF63154FB477DEEE4372166EAAD59C6BB
1B509ED924C5153BB1B40142BA85225421EF10B8134DD60012E9B2936441ED58
11A7089E9816ADE99A105158B23065BE99AB014B6275932BF602D2A8408C5EA3
5D6809CC9F1474150FD4D9BA97EF78D0C394F18B4C7BF52DE1DF1C1BCF83A06E
9F99A0352955BD0382A9E1FACBB748C62F3A618FA88FF13A554C7182AA715087
08C8360006A5D2946200637FA264B5B6CFAC4553613EA4A9FCD3802F044BC053
E3608AD5C177F886F3CA84979780AEBA4EF6E8577321A0AA2C87A624124570F1
CE4C3567D1DD539D38EC56BB109DAA8699D15B790B4CEF70D289D39875186B5F
176EC92166BD1EC24CC14D123FE9D13F33C7737A12C73340920F8F5C8F067800
693E3739C230DC1FBDB98B8414C22F4D2E0F96B806284EF87C96F173C0FF38A1
E4BBED95935A5917A4010471B06D5B1526B4F69851F666E205ED7AAB1A5AF006
331A3F47BFF0CB470E1EE6411B8DF92342BBE2E943BB72D1318F2E00C32B3B91
5D992B93EC3C8452C5629AD508064EAAF15BFA83B7B1578DD02912EA7B0CC8FB
68D8C892B8BC99FAA0B8165E1F6D0FE4A1DB27A23B1D1C14EC8DC5A1EECFF762
44EE90282650A80C4937D116D48F89FAF776509DE7C9F3BC8122A7E8E261684A
10A2325E245EAC00F69FAF4348BEE3CF431E03BECE816FB522E77A03075C791E
A94D78D9F5B828095012E3B4BD0CE56C2FB8DC0907BD447FD42E93AF43D3DD94
E7EE4730DEDFA96CA5360CFD8DE93C7DE98A72EEF41BF77909969A0819BCFDBA
BC05D213EB294663D2E32BCB9D3164D87A8F0F4E77556DB21D44F111EB5D4CFA
FF67FFD341FB0A62DA5FD97DBF39F6450D8458A5E5386E652312E3E8D9FB3A4F
04E5E07D1D5E0FF984F89489352585DF6E3876ECF822609A1E92FFAE3875EEE3
BBA4EA5CD4B45CA457914BD1ADA919899E887AE2209256CA424F15D05DE512BD
87804536C36E4A7E28F2BD204895C4B1D1C26E3F8D58F1651625484AD2E3DB66
205DFC7E3A2756AEA80A3DA6109760D916FCA107C2D61C6DD51D3FC9C23113D8
B9E901735274FB64A7D6D5487782FB4F0C476360CBD71DCB59FF30D88ECAD7CA
6B64673600088220FD5F010AA65F7703F5D0900DBE9417133BBD6BF016F91159
9DBA97A8BC044D972C7CF80249EEE8C3D5BAB1F2CA867F5BE77E0CC2F4F2C64D
139AF1940F9D207A06F3274F9D014C3E901E4E79E756F3132EC73ACDC4CF1127
F7BEF396B2D725D5C64E39274995EEF5126599CEA0076E553DBE471E4E64BCEE
16F9A50DAF224B9E125EBAD87D482FB416D6C8DCC9AB5A729C33A9D7945E146A
F43B9D4EB81596165E3746B6641056AEA2B61366AE7FECD9467BC920BE8FB520
3B4120D790EC24E8514B68D597D464DCFCA5C4B16D98B4FDC67FC1021323ACD7
032585E10057C21D515A2671B55D33E2EBB90723B056B78BA375C8D94224231C
2AD383762B1D014B294202A86B97E2C55AED6E7B99D80BC044D77539D7A1F490
5DABB5FE09D94874B7E5CA08B639E37564E4591AC01E295953FAC2A9DA89DA5F
7E0F8E4F6AA23709104F4B316F33D75EF5D6F8E1422B2F3A5A2998F64F55DCE1
FB200BFD7FCC60107CD37874B50A7FF5223A7B6207A494EB84F83770F32D0A01
F27BFA8D2A14A74BF2C2811BAE580ABEA80F5D1C6C12FDD39BBE6C8E682A41C8
62F7E2B00B9A63D8F3F65519469F7297D7081D81ACE403DAD52B904742937232
5A999D70567104D325B2B53623321666BF70EC65A7AE6EBBBFA4EE73C5C26C42
BC0E6DFC66E3E0C6BF31CD14E94AD5FE791AA6A12E1E619B3F43003D15E67713
A6B98AE07FE5298CC4B684C93C89CFF60143C4E2142067784EB27F504B8115A4
17192195A9BA01818CDB65DA91BDF16A37B2B2F723A0E62D34581B5F28C1E465
652D2D658F0F5450A69BBCAFFD93FCA729E32B8AF4B3B86D26CA1C769CFEFFED
0E2E3B7C1C687E27A089AE9452E3DEB5F57106637AFECC0B5D8EF245D49B46C3
F7771355A142A814470586E617B16F5ECE25800D997C51358F7D0BC76C79967E
F970AF18FCA9ECF1002D860B9620CDFFF80CCDE1876739C11FD44CFB6C303D2C
E5A37C1883F1B3D405AEB1D5FC10F149DB1C908683F5BF40117239EB0D4AF498
A56EB2D028563A9756D168B6974701C08C7B3467ED60B072793D827746738A73
7AC7C068486E0CA4D85198723710DDA1823DF1C222B0E139080508CB5107DF42
883CDAA1AE0988EE9197952AAECB21B61BE3BC57B2FF9A6F1384DF7EDECF9CCA
679EE059D78AA1FFD21DBED52D78290B284676E8614B7FF4A7C2E896630E7168
5A59BC8B098C32F06CC7C138FC7B03AE00A16071596CE581F3BA5F13790BAEEF
B1C6BFCF6B4C63E234946583FE1A4085B287FCB28302186453EDA3B73D52164A
C3158E998DA355DA7AEACC54D6E99414D8811850BD7D2C79B10A109F56F8BE9F
F5ED4C1AACCD1D69A7CC0564EE9750173F6040F60E846D265F538B29E97A9D1D
B0F0FCA11AADAD0C285884FB4F519C5D09A6A88B2E638B877589B66B69A1771F
8A993B29E7E3258AB038F5C6B34697C4A9F01B3BFB0FC44A59DB075587754347
5CA658C6EDE5240D2A10985E0C00BA43EE946D7DC9154FBE3798C9A7080C7019
10DA60ACCE87646F3C741F13AB9B05AAA7F5B21D03EE685469654CF3F4FD5AB3
7CE109E1818357A31B4BFB7FD924A385837AA7EAA36875A148CB96F1DC10493F
C21EB53FC4AC28E858B0C51C64F0DE211050857CB54840B97050C4982BB5D89C
64EA42D48632A1569464062B2B27E7151406E1CFF429D8D205F4C7E79C4AC5A8
9013B634744C7CBEA72129964ED02F3C49875949CE0A0F691CFBF5A58D782414
75F1140573A1D9B7F0F8A3D0FC7F7AE5FB8119BE5572E8C2FB5575CC5B3DF4F7
1D8732600AAD47B1527A61BF28ECF2993AAC75B009BC7AC5C171ABA704873AB5
959B4E8C5CD20477AD9E88C66387C9EDF38BCE41FA85D88B8FCBA78F2427DD71
30C4171B299CC8C26DFB1BBEB93BF7166492DBED12B340A8B1EC69031EF02B6A
4618954F5E406D7B2AA84F3A3801F6E19C1BD4167386DF5DD20258AE5AC44DF7
F306B5B15D95468BFE14BBEF10DD830088837C19365032EBB36BB45CFB457120
7AF4549265A51689FB777D2278E32DBE3C1D137E58C7B9B8E7E27A1B2B3EA230
495392A05B6F80BBDE66708118584A7FBC2B347F1C69E0333AF61736D6F99C6B
30B0EA1D0AFAFA445321A85B3391B6FB68C08B88657268FC2158F0323D5D3CF9
80D829367AD50EC1D61DB874B260CB641F3A752F808B28DFC9A14C32BE8200D3
AFDEEE6EA722762384627B585BB2A27268FF43E37E2F175AEE4783617B5C140A
E7F94AB999542683D3D3546979EFD561FA3D9F40050F35759575932DA2B7649A
354C37A7B5B5014326F4AA2F4DC2068BAFA211FACF9360D7F6FAD80C1171CF30
7B5B1F19948B85D6AF40F3F59D9D5D8008D85E26F8FB50DD4A973E540ABD250B
8DAE4EFBD61D924A4A62E7A5EEB9123B745430B61CD385548D2658DD8A6B8622
A6D8199B856FAFC86D3F23BA96E9C8B202D5616EFDD5CB5604B958D00EB75269
45DD6B34C3E510FE8AAE25ED2B83187E6F5B713EB475D5C238F87125964E2E66
C6746915494C5A84DBB9ABAD0DC628A6207A89E28F3B482C02394940E3A8B0AC
3A6019137B3C3FE384AFC14407F8E0950C858087A70F09923857EA28AC535D5C
84D402247BF7E18BC29C79D6610D1533C4A9E1FA5132C49C2064C7C1B55E22DF
EBE4FEA460554DA86137354B1BD60A3023882B09C354F98C28E26BF8C04C9149
D5E571636FD772C49601095FEF333A528113F46B2812BC02FE67A94515344C1B
67ED404DD0D6481A0AC93FCB6E253A24C9775A6FE8DB9940996F4D4B2B11F3FB
8B63B53C229B3CBB5A1D8628FE03E50B11D5280F3A82FF41569652AEBA386F15
0195A6DA579A18C31002CE96EA124F1734CE1753AFC40C1060ADF089876BE2A3
12F49FF0AFC320587FBFAD5203C7774259BF7628E8C013208CD9C2003E52EF1D
F5AF282C8D7806AF688BF7AAECD476A9ADE12D896186C943C92D34F2DFCF72DC
F209D7B25AF0C01EB258363A9C15B9560F29C1957F633A6EAFA856016480BAE2
0B54F7061E25372978350AF2F0496C9E33925F631CA599CD0E6420E23F0D9433
6D81499F5225F0868F367ADA6B1D762526313B1D3BE5C0DCD11DCCA6993AE0B7
45C7BA51604E0611EA04924295ABE3DAC1298D7C70E311ED036CCA0072604D15
0358A05BE48F5D38118F43D5AB87B3797AB22636FB0BABDDF361D234D4D52DA3
CCF1CD34BBDC64BC3C63535B6AB472898892DE9DF172D26C48DAC3B85A701390
C74B0B3CF16F82275D8F156DABB97FD4A43A71666B4E02E738D025661DD2C993
9588CA7A9580CCADD74B6098A1686907136FFF7285ED02BC8ABDF55FEE62A270
A08BB8F2E56562D71A4B65708948AE41F02867695FAD6D41DD4F10E43942F6B2
A4452959C75751D83ECF9C6BE8D3578982FE44DBB2DD8B224769825D4C0EA313
568A1593888FF9456409FAA2A748B678D79DED9D46D10B8BCBDB535676E13C2D
B0D87CFD8302A542BC62CD3410BFF1A457874F064DFF4A5279A237A4632EE1FF
B09C617CDB447DD5C6E3DC5F71D486D150956582A9342AD1AEE5908603006876
DC68D2FBD537A2141A0B23499A40FC94519F30AAA7E1A8B5FFBF2DF9F1E14F5A
DC13F3F0617BABDDE5153CCB18CA9EA53EA4408FAE16444F3F916B1AC1F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1200
%!FontType1-1.0: SFRM1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1200, tcrm1200, larm1200, lbrm1200, lcrm1200, rxrm1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-185 -320 1420 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF049F26DBA77FA20B6513D
285BE588908C3BAD6A1BF20F213E587F1372774EF31D66B237AD60712D60BCFA
83574CC5F88A6B4676356ABC2DCCBA498F4272476923789659CA8836F2FDA94D
38271FA2CA8B77D7099705602FEB41085F6674B7AA0DC588C9ABCCBD9115601F
CDFBCD7A8E3CFC8B1E718E576254F5F05FAB25DC253CB561EC3604749243AED5
76898EC99BDB1760B0CA75CEAE3FE6FFF1700F64F585BE9267ACBD5F155F3122
732792E17022F23B1F46FEFB0696E5C2B78DE0479F09B6512035B9C488042B62
98525003ACCAB6C8F36BBDDBF6E82F5CFCCB418706BBEC1D4E42086E70847405
3ADD1383ADD34574F2C6C64907B0561F107A259A649BB525F0B74CC3B1F42412
C4F81A7ACDC6A3F37DE7FC06DEF21B9821DD39D75432AE3881E431569A012092
38FCECF1BE90B0B199DC4D56EE18658B2818B69FB6836486BA302CE7F6EB18CD
7AC5AC6648097F65C8AB851E9BD1696B9703230711F68FD82E1DF92936A4B1A2
CCE51645573EB0E762D68A417AB6C0A2EC8756FC9BFE5972DFC4C794E948A970
918BBB1BD7B31F9B1B323EB2AF8D41A153CB1B1511F43560825DB6ECE30C16E4
902BFD1EFF59F06984F36F284553AB3F2C7901B37ECE058F5E477EC9C629847E
1C7A3628DB7C47C099A0DF53F05ABEF94A760232985AEDEEB7AA05C95273179F
8A1AEA30BE626653D22F7725C28498D776493AF6DEBC59D44A2F6F26E5DA1A77
7B9EB9D897130FB3F6017F80AF21E4FDB73CD96834152BA948E1EC4765B253A6
565F51A1ED2AC8374CF4DB767E7F3FAF13F0A1198110F554CB6735D3C2DABCF4
0C0A431D263F22D091D0F560ABF5968868126430A293C6E8A6A87593E580B110
E15A84AE30E4846980EC5C1FB6D4037D7E1DE8CF57B6A60DD4DDF422075F85BB
0B1411164E99A03A3591915372454A70C8CC75EEE08AF87D35032DFBFD61A4E9
F968D1F514A69D62B30B89F47FCD45A41B423664A7862A1246B6D7C5E2B352E3
D5428D2B6677D38729C5752DF82CA5E35D1EA3BB9578DB117A11E5829EC57ED6
45651B554AB3310E5A5193E840B80378C7E7348B2E4239B140166276CABB529B
538E6743C5175FE35C9C0B9336DB8B635446FF710C926FBB672909752729B2B7
B20B169F02514E93500FE8CCAE9DCA6911B85B811EDB27A1C63A1E56BAA24DD1
08F95FFA04D63FA581EFB4E3711D05B6EACF0D78661B1E9E62B48838A442E796
E11044D02BCBF9146D4B3364F6B34D06B111119B323083B4A20D995CC1D43CC2
A8CDF9CC47C3E2234449473480B3CE799AEC48AA49D99D2C146C0130B2D8C5A5
1C456F23E5709062978D7722DA07278DA545F6FE9BAF8095C10FFFF106B7ED10
8085DE25BF4E3ED368FB8FCC17214D33FA27EE0091DF799F3350AE5DDB7450C0
CADBF62E8F118E5F41EE34BC1BC68E436B38EA4C74CD9697E2222CCFE870BD94
DD082639CBB0BCC0D1B9351FC2667B316184C916067AA09ADE4F2605E2F8B9C2
8DFF4E034F3B8FE7404997247E40257C1FE414FD8195BF5B6E571D708F074CB7
052E7F9B554F24D898B70AC2AA181665712F42862E0DB57BE440CB4CE005BA84
5927DB576140CEC9CF55403FCBE5BB818297066676FD08E6B389149BA88D8A8F
9FD9CA88B03EE5205C333F12BB470D80E0498087D56F6E7C68C48BA0204565A0
CEB3C3CEE952D5B4BA52E851DE803FCB3768E8146F9D80E0B687C441D2FD68C1
6252824E10F5F3AB39EED53066F33F338E0FEF907FDABC9B780D24B24CC16A8E
9C17BB7F7A947B9726CDB6EA75B3678FA870C7A34102DC43A428ABFDEFB9466A
4066E81C54781C05A71C11723B19C87812C1E54DB9EE2DD1D4083EA2B10BD835
09AA0A962FCB5BCE94E7BE2DA7E53849E375B3D1E0CCA34E8FE1AB639F3E79E6
5C33249D1E93F60FCF844DEC5BE7C67A45E2B9597252062EA44B6724A37CA828
3B5B0F8AF64667D75E3E806C7954C7BD374AF1A3F95705DAB0FDCC5978263612
A2B969E2120540E9B65421274901B4FDEBAB1AF06F3AA19E84C056CD4182BAEA
7170FA50530BED308AC93CE570866D4B7C096B28A1858D9B4BD0B44FB1F305D3
80D7C1736FE0FB86C5181E14F5605E7C4D6F433D6FF0087A487CD3AB500B13EF
DD690608E7A0EF4C4E799D669AFF90DC783DE6191B4A5FED865083893ECA20F6
60AECFC174B5E419A5734CE5513D0FC052357EE0E668886402A1668E5E6A8741
A5FF072551E4920AA68A8A0E3431E4D9471683ED92F0F96AB795D6244595F85A
709F3A49CA746D4F166507660055D08E839192F1A188EE1CA33B0273E17CDEEA
E4B79681FD9740BC6D591483DB616CEAFBB2F0448C3D53F22AA37570BAB62848
6C69CF794D2044E9B8D003D12D010BC98EFDA872DE3383CB75BB98FF8AC12FC0
9C5037588F7B1B043BC01615EC7755984FE9A03D602EEC2931775D56197EC03B
97E28C64D706E117DE4DA5880D6B9A697C461ABB556C0ACD8EA43055DA403718
4EAB35C36243E79654FE8FE8FDC9ABEC57BF7CA372A9C7C4FCFD692A0025DA66
5AD19EA3ED28F07755AE89B26BC8C3F9F7FB125AC97F952DC8A84AA93D107C57
FE605E89A232B2533A240935C43E91F3AFBCC1D5B24A1D21A9CE1B74DE4626DE
D3046577807E736FC6CEA682983B29F077AAAAF89134E8205BC49A35241FD9CA
B1D2F17E2D13122BC0D4A855E3799E229E16B41E835231B95F9848ED52194F96
6C8A3986C9DD6BDA7F244DFD349381D60152864BE7E118DD95332A415AA1F66A
5A4C2F1FC8F4E5760A76C31C0AE31952D55B0D5F0E8DAEB8B8CE6D73403FE62E
040FC345302683BECCA726554EDA0526DBBE8E03A830A1A35E168F2D8A2C8C06
6BF6EB9572848696717178E8D6455EBF5FF9364EDDEB4E04B744597C49AB980E
868D34566B3C67DF16C925D65FABE34D60E78803988C6693B47D1ABA43DD470D
1BFD1C645EA05E17E0DC93A95C4D46B4105E302956873ECA772B865162FC3332
8E197492F9551D3AEDEC14F801669AEED19BD2244B43C1C399345C1B9A4A5BC5
29E67DE3BE37AE5ED52A637830988AA144319FBA904CD1ED665182C460B4EB11
AEE55E248A9ED5E14A09D9C2388DC367D3E361B3714077B5BDF6470ED2BB50CF
0DF814554286F1D77BE22AF2177ED910A4E09DE04BE537C0BD61B07709336B16
276F31CC40187977616BECA603FDA7292936758F013EA14116643FCC7785FBFF
2A7DCCF13962E1FC4029177084EC823B476BB85AED82CE7BEEBE0C41A7F8DB73
79101AC49658BD96B5AFE313BED8B664590BB6A4D02307BB9A3871CAECC66DF8
DC54EC7AE5552D7620C5042E17EF20E8A173487DF644CC74F661685E0BB74FA8
C31ED0007E952D15DE9FC1D9EBB636DE6E6E0A5180B4A7D80DA1B97E9A78529F
835ED70B702152DC52D90BBDA6BBBA413E2D9FCB4D1E7A70393F3968341302DF
F79DE6CE81CB86D38A467B4BAA414034D72374D4E8DAE4717F17B86B4C6E8E1D
B9B218D9080909A80CCCE3EBB841B39DD7155E3F2F04EFA42029A4E4D84599E6
DDED99859EF8AF37B0ABD89A39B8B4243C1739CE2BCC1011EE5E71D8D8ADAB1C
CF662C3C0EFA703D8F38668E5B029DA4752804F33A208DBD5FD9D1823D52F1BD
458DF08168D46F9C3128D06B998CE35F72BC11EC52FF7A17FA90596CAD531C8F
26E0A57B695F9DC9E03E60A6668BA9EE1C5004426EFCA8863C078FA76C839424
490FA5C5C87D078CB050C95731C66313E665750CD39AC23464ABA3FE775002A6
216C7E7FBE7E1C06835005815D79A5BDEE7B07BA3E87D05609F98B86BBA5CB7D
93FC42992345B8793F48CA8C20C8FC05B50AD381F3952D47C6C269FE10B1C3BA
D1B82C97FE15BBC807301632F4E7470D0323BDB03AD085647D4FC743E0297D0E
50CEEBA8BF42A3FF9726C2D8B44F8F93129797C19A34D062A33B835AB8E18DDA
7DF217F677ECCDCC44CA3A55092BE48A48E44CBBE20220FF0C0B1CF004B11C95
3D943A53FCC2A1A3102F6760237C1BA7CDDAE5E1B2C9B1ED267F6C015FC8FA2B
5DF0775CE085DD45ABC6440EC491C6878F3BF653103DCAF9D0FDCC48B96119C7
2AC2375E52CAB31F8CB9CB7A2F5621EC6DA8FCB73FFEA7EAB05FF5D4146BE410
C00CD6C4D210DE7B57D143E4073DF15B5CFAEA8A08D3AACE818BFCD40D9200A2
C241BE2B06713CE5644EAD18872F7B49FFDDCF78A1714D3F9C90CE7F8D0F4C36
FB4627BAC95868EF73522A4ED633EA59B051345CDAE8AA65D67017DDD676314B
612F8CE1F194D298283A1289A36BD5D285FA05FA2808AEFDE0FE43C21C24530A
D38DC0B18D8636A7907A6EA8ED9B7B6C6A3BFE86CB2CC6D61ABCE56C8155649A
736AE27D6926E9985F09DE8EC180522A90FBB1D647BB7E3C9F9A46B04078D235
72F83B2966D43930A79A6BAE9443A79677022409B7B1AC6F2F6162086CA756BA
00EFF2F69E73F815F7018092FC5DA01140478958D7CAEED313A7DE4AFA9F6AF6
DDDE61F240E7595551D20C8032FCEE4AA0A4BD2474756157053F80D90DDD3064
C65218664476D32E6D8DE72CBFB66E2C3324DAD02B30BE92C18906F53154D02B
13BC0593F8D08D5D82433D2FAA8F6FB2EB9FD24F07B2F540B706EB4413026DDA
E85F04CFBAD0EC3673AE2E597FC6F6E71323BAA634B6D413CBC814AF034D8886
E82DD054F8148CE1526CFC7290DE41FEBA409CC33C06258BF0C545AC8A2A5197
EB748BEB9D591E3A936A061ACBB08CBCEF3798248D119BCE86AAD8C09488F146
266867598021693F7BB8FD25C4280E02A528B388FB28EFED7FA1B8141CFC49FF
3409E0CFB48BDF9C894BE4801F49E97A57EEAAC0FBDCEC1C6AD34294863EC701
AD97B94503B719B661013E18F9D95A5174F5856DB02D336DEFA83A5EF40983DE
82A2CC16FE187136E1E889E3DC18253371030BEE736F20ADD4AC1C150473DC71
C7E6BBB21DD38F18F77A31D3813BA4F868B854B2612011B0A8C96A1928382DE9
11682DFF704978BF48276F7A1C6D7D1989AAB5B4324597863BDB6F0216EC6993
D1C4E2774A10345548608A0360F9E92CE702F80D77198CE6652E2F2A2F19345B
9C2992DE5BB2A1BC1CBF2D6FBF64BA6446D5B8A9BD6CD429B70141AD516A56DC
80A7FDAB5828D5B30C2251A47687C11CEBE50FBA278E757197708790304C0A54
2D7E93AD542AB9DB4BD32BFEA552FD39474A4BD034E3FB82CC1E50358753C897
AC2A47FB4AC5E9B632DE14696088EC5B7BC2D6D9F7D46C06CCC789EFFB7FC996
9D616A2AE8C69D2C5A07CFDE1CE1734D1B0A9F954C36850CA9188999DF6BDD23
25B01F712185C2805F46DD31FD0FA759063824C587DC78314F142A4E606A9873
CAEC6EE3A548BB62086217DC4B46B12D18138F314122AF2335D915CFC94117F7
58D44AEB2C86C4D9DC15103594EC513E13AB9B1AEA30BE62E3935B0E15BE2901
A5DFAB2371C3226F2E9E0D55F9289601D57741819290DF2B7694F0AA3E385D1E
C21D1A9AECF2E022CB80CE7454E0FC0CFB4E67CB9BAB8D5237009C7C55C4A862
1B964362479EC54CC8BDCD211A0F749A4A0F3DBA016E9C59FE06B7712A1C86D2
7B7688FF0EEF8ABFACDC84D4B9DA5447E492961183024AAF96AE8F773034EA57
481F43E4FC476647E915F30AC58AC8FDC2447A8DA606F7BF9654C55EFE0432DB
3A680BD47429CCE03E37E41EBF7374C56EDB3635CB51C57286F56D6432C2039A
0B7A86875B92087BEED5D3B35C353B4652DD390A384EAD190CB950D0E91EDBFB
47224C9F7FE7020BAA032922CA89396F5A0BDA671EF1A4C5D9B3898D7ECDC461
056DDB1F54CF02B7DF830BBFD6032037E61A0A1694B11815F858AC406E1F9EDD
7A35EBBD4E223BF905F72EAF4E043A642D66A7060426226A15B7885160354B91
2ACCAEACC7C244054ACE2D7FA1DA4B4B2A47C068A06BB5C8605C23BF2292845F
19A5A6BBE20497A0BBB6D2D066094A0B9FBA3FB5F7E22B0D5BFBD6E37A565188
9291D3F692A5DC47C198FF2040E07FA087FDA110A93430C7F9284F294A03E37C
C0196D0141213E6B67A146DCC378F5C00FA615F8AC7FDC883E15A15AB533E68F
9BCB465766475EE961480A401A57B5B49FF2314783390EC6AFC1092DBB2396B3
5FE54950FFF8882E01A506926FCC91A2A9500C7477B6C4F2012A6E3DD7AC3D52
0FB76BC563C863A3D6B62B8BC293A7C7373C1D91255828E09E44CBAA3CB16E7F
9B2A77108AD7BBA71B1125398393C461970BE4B695BE053DA38E53D23F15A776
E257919857D1EF859B76CCFA28FD9D19CB2F973044B3258FA4C29F606CEB2D5D
9A88C7B5CF15997A38C1E664B41E06DB1BFD25F6FBA95F163055D10007A372BF
98DEC385C59338C232735F2B747463662FC13F9424B8B7EEF5CB6A1D25D798B4
5984C75FABF6BD5E8E74660A48DC5BFCAF3ADC5FE34E61E39077D0DAB048F4B1
7321B6C3EF45E8962DCBAD1E993050B38E7238A3545DACBDDA74BEE3FED631D1
0354D503961240808E096AA4658D8175148BA91519558EA8761BE276D38F9E59
27F406400AB4CECFAE1273E538EB6D4F48B113C0CE23DD0887470C4E7DC5DC98
C743A4ACBA2B6C5C540373A2B8DBB6040E07C628ADFA0BBD27CC9EC19CCC13B8
4054644B46521F4EAA2AB5EB1AA9CAEE551B608C9BF18DD2428155925F1D60ED
E5627EC01667C7461E08A9B3D7A38232C695DDE09E02983522B8AB80908250B1
2658D6823DC628CBA7E7AD17ABD8F882E710D2EA47E316033D253703ACA50578
F6F1A76BE64E01A4EC94702850D1453A1CC051219EC740EB5778E39C741CC32E
2D7F25984EF26A005AEE72CD8658B0C7D5DCF94EAD7EDD391D8F7F3F2F0BA13A
78235AD9AB1C4F5DBD4203CD40479811F28486076378A77FC875B80C51FD45FE
F7F637154F719A6248BD37687BFD8DA0AF74097CDB6E280C0E56F5C5125253A6
EA9D0A5E2F2BC44424746D2C59DD3CD0D721B9A212AADEF8F3E71C0E2BA6B2D9
94C0E22F9ADC945854759865F1FB888DE57A91560AB51E8A856D787C935FEC23
2D476FA1085CDD0D66BC78DB5BB92DBC48F16E339F0417C55B71C4B9F6D0145C
636151688C19C690B20B6B83225580846814E7B88F095F0E1C4DD5D17037A6CB
3AF756A6415D83334B829C83B3C93EE95B49F19BBE0179E53329E229F8F69A3C
7497814C34A61F84F0C33DB73262CE40C25D7E3ABD681D271CE0AB8E56F9A15A
8FE4216E8FF156787606F6D7C956889846E440FBEA1C0007E3A01324692343F8
3D18476055753625280E51C76C276339139566DE3A93DCDB71F99F6FC25F0B98
55BFDE953FA6A61CB81D02ACAF2EBE1B1A63FE7AAEAD9CEFBA0DC8FA9F6EFE38
2FE4FBBBE7EEBD2D0C6E2AE095773D32BFE6CA79DFD4A23B72966E46654D401C
0CE6A08C877CA3B41DE0573DDABD800AB9409EDB1DD0AFF68CB2E47EAF9B93F9
3C07D81DD142AF6614CA260DFECA93149B8FB939F425F612E81F95247E153C35
4CF06A247DF686E524EEF670B93B4B89397E9194129490DDE2658DF0FCAB048E
8FBE3469889A745937F0F76A78BB05C1165DF2291E2CF449788BE8F7D30D168C
D79AA7CAF3D77D18E8D9021F271DAE1E38262F8F4F114E39B3BA249303041005
A38A79C8D06FE44D9038C050837B89D74F7872C976386C42510665BE8E118FD8
C7865BC1099BD4ED00A7E65F906356E3BA5536FD22AFDFDB89CE8D1C2191998B
C4B57B323ABE4EA4BD6E305A4B548440289AD7AD338B73AFC12C5777A080BEF2
8AA5219012CA953BF21FBA716EA8B6EE817D872A6F4065B45F0FEBF610B5BA45
ED1FF5CB70E6FCD8EDDCB9320664BDD5BFCF381919C7780E7737A6F2C9E37334
2ECA894C0DAEE8AE809B53F134FAB24DCA5FD5A1969806AC8225FCEACF7C8543
08EADAC81CD3C7015E35714FECC46CC6CAE184B12E322681395650C8C00A83A1
0DAAB8ED7D0586C16762064DF25FA32758B6ED119B8F2661FB0CF9D3B7CAEB7F
354C21EE91693EAA972E55607D7B814502D167C1EFF5F8CE11343990F0A6322B
B9F0F689A83788729A6C0F293E7A047FD445C8E2FC029100F93F16BDB99513FF
C2C1A9AE4309B34137B90E491E19ABC24A484E85EE2997CBD2D2F886A9E3941D
F4E1CE7AACD4EFE91D35DF7678D5A4A71FD8560AC8EEBBD0761D1A17B9C0BF68
74CEA7D775CDE5878D7C349F6A296E5167685F8CB942B711576139C688341991
046EAFD70C020C711DA6F19D4C46B9DBC9B16267CE0A9E6BC3B74D807F7DE678
CDCDA3881D1D7B6619C8574B286B807975E69C159D5DAC22088433B8DCCE6187
6517087EA8D931F2F3BE22AD097C23E3D43BC2A56C1993C47CB15EBB3D5B0DC3
7BC53AA53ACED25C9C050CD4ED2FD3D131CB5104577F65FD8D797B29408F1C60
D067907CAB448E3ECFDBC90ADE3440C82D48D6A33EDCF9D044F2920B6AB6D9E4
F48245573C8854C4893C7DF60E31F6C2D6103451F3CE2464D643627346AF7DBA
7E0235AB73D65BDDC72BBD7C6D76ED15459D627A9E65A1323BA915C10D92388D
A18FB6F41EFF9F2C9AFC7B0177CB52018E6CD152BE446965F838C1A870AF16F7
29A6A954D20B08B33C5D022E0D5A8E521E21B1328DCC4A3DA4372ED22C944CF6
6D40D84028DE4996C47C175CF9FBBF9DAFF8E43A31191EEF52A8320DCACFA49B
90D49A4FC69C3C2C7CB835D03D8DFA178282D91BE0F1EC05A791232B5141DBC4
B350822CABD66014E7C6BF4438FD851F400B499E55A23DE4A0D8F44DF0E93F65
C73BE7A22843BBBB0C5878271A672257530213A33A4B1A6C22E6902E99E004E0
222D6042D8470CF5CF748EA7A1DC74D0311D3A273FAAC4DDBC9E4515A9A64D89
59043EA55562933CBC859A5A9EA1C78592664E8C9DC8C85105D879DD754EEB30
144C53A101612F5C8410F9F4C326F049CB78B73AF61111C7D202AABA7149E6AF
41413ECB7E4D69D2D9C00EC73685E7497ED4F9AE6441427E41D12D948114EEAB
197E593EF8AF91E71430702F73A1F6DF7F8669924D387C5E11DFA4E1B0A96B24
30459E23765A393F1789ED8D4A043F44D1AF33A67E38C339CAF82E19413C41B2
47F3F192614E31C5CF079017B3E55D9BC5709E9533C85E65E652C5F070B898F4
FC38A5D74083193636903F3F1B405F2610AC9DDA957EB16C4EBF0E8147397C75
E26CA957DDD557CFE68A3DA5C9EA01550F3158DC3A24E5C0000ED438FDD5DC30
F9177C80ED5A946D0B80ED9BAD74E41A393C20B6C47F1A5A9196DA835F45B439
347C61874F9361110A3CFF095405C5BEEF9F6793250AD76F71C3BBCD40835B76
A2387D5D7D631E11D90FB14612B3CC3FDA7A042D7E908C22DA44FC6C24C2768B
11F0271139EA424EDEE77AEAE7E80C423A01506063D2D220071474868E02E99D
8D03E058A0D4B189F8BBEDA5727167E1B256F893E264EC8B8DE42244293EC42C
6489BEEA1BD815166B89E3B7FDF4F916E57FBD50608A8314368A21E37A33B39F
3E94A88F66957A4C0629418764E4E706235EB496665AEB27D6DD3839DCF6BD57
26623BDF1FDA2EED9B2703784716719433ACE887FA545F505B1001ADE80BA873
3DD2EE4346A115A409DAB5F99C041A336A494781585ACF382A61753906B3088C
5D2EBFFB6EF42CB7AAD6679C272737BE20BA6F79E6EA75615C1BC2FBBA51638B
64DC5BCD06C996E5CF586F2E88CBA4844C12AA2C9D706A691B7BC6EB8FC227BA
D040C6676236571044C99AE13A7BE3846CE587DFF9E1617B9DCF3DAD70166CBD
E616AB868D055E78340582F7B243AE844B777E28EEF2F78E2D8B87C6F187B938
6267A4A66901948F1607A67DD5FCA58A508E1978FB2A5EB1AF79A30C56C85B22
3D380576586F01FE26B76D46B447565D1D3622B6684C6D7CEF696F48E9E9E622
16D1A9FE00D30C2768667D44A698E1548722D8471502E4E237722DBA52121E01
B0A8C31E68D20ED239474EE13AEC01BDC19030A1329D807AD24DAAC81D82AB2E
CDC0659E9E359E1CF381BA06F53A700B5FB7C2207FD21133CA91F09A304FA60B
582DC9E118D43C83832F227BD254633BBD947CDAC6AD73B3A3C3F67BEC1F28EC
7B1CB75F74878B84198A8BE49B310B5232FF2FFA87F783126ABEA4BD30A32FCB
555D6628A34562CCCD930853325C99023E03CEFBEECF7CCEFA9A312A9F69118E
D61BF32D8F4B0ECFA74D9471EA325AC240BC23B08C7CE8D1A5A2E3D05A213CF4
CCDDF342E184BCC24B3C8E10BB21BF412B93712DE837DC00AB3B058EADC8DAB1
0718763B8CE18FA9889E6416A0FAF12CB6A0B9EEEF2B13E1272CF6035B04A2AC
FB46221311D99458F0AF57A89FCA2116E32E146FB9366E8B8E5B2A1739C7FB45
A068E7AF13A3E300341DD85046D8C199CCC38215CE324803EE1DEE1B2A3A7660
8AC6E26C70B028FFC4240CC1CDDBEFB58C017E21EEF186188DCF117959E63301
197A638EB42A2CC2C3BF267586C1458CD28FBB7FFD50AC3F036BF7DEA1751807
5BBDBBF1232BE9D95812294574639A779CFCF066EFAE21CBB9CEC865DE1ABD27
92DB64771B00D2530805ABEC524BB5B9F17F1D26430CBF640430EF891F673857
2EB6B85ABBCF489ECF22F5C2431DEECBA8280CDFA3C9E1FDC750D18950EF78BB
3643B91E071BE6F0B820D54433588CADED946323677760B57ABFD9C03B07B035
520A5B6826F0377707C11C759FAAE782B22828CF3078A81E564B947D7E456001
D08AA572C03F4D331D7EC10737CB4F2C7EAC3E1C15407AE0B9EFE0D26D5C5BBA
274E18D161E22D68C6E3536E7AE9B17337ACE7F3DFE1E220324111FF3BA0C2BE
8925413FF8E3964F70CB63321D993DF752B5FECC41277B62E03769C06DB70A26
26B6321A9F571C78B8FCA478FE65318CD53D42D84AD8ED7BE5E5AE6E4EF2523D
0463AE2E74CCD24BBCC198B24CC5F0C941F8ED299BAB6ADD9921573A53DBF3C2
F4794A4608FE9440A87D67924722964C551FF3BE35B4D7972899267ED3404015
B7A2A7EEA73ED0D6C2F1BCC8CD909B0459DA48361528CB0BB9346AF27BD5A068
F6A42402BA3967B10B0CCD4E3986273745D4338686E17B61CCDA6E28C4C2D089
2E2BBD1BA8FC82BE13873CB1AD4B7ADB47192287AAC23F6D4EA8A88C2E79E273
6CA42E850F3F5EF2ED794E4F789CFE3A13D1037F24BEC0CF7097D19716BD2594
375BB7906690D41B787C20A359A0CF417AEA8B52E25487EF37BDEF71F3CBC48E
F1AC9ED68169C8C8E6BA568DCB81B36BFB0B0C55F2A86A8E4D25E7A0656A7ADC
C2A73404E844FB9B0D77C775B26AF9C3A198FF5739C1818BF3D27AE53C4969D4
5645ECC6B9F49E7FEE0CB4C5BBD15A955847972DEBF0073CC2759D1C02E05F7F
8AF606A1E5B1540FDB4A5AC07CC4A5AC6548A10FA9CA7837B9E3B7AA0FF50F0B
CDD154810310CB09F81EFEFA1ABE014695DF86EE890025CF79E3A783274642E0
66547906C342ED568844C0123389CE7E8A42E6842DF9D4D8E417076A6E5DE792
7AB3D571C835C60C0CDED9448B79FCCA728BDEF3C73119D63A75CDA6124B240E
FBA46127656070359652536BC111B6711E4B46BDA71FDD0C502B760709827015
F1B1AC62BFAA8975A2061277612188BB5FD0C7F73723A74FAF4FA6F618A72D10
13825750C3458BB1BE8F82865E4F7E8379E2CD3AACB22EFDB4025C58F0506E95
EB168EDB8986B2899D2611D50C6825685DEA5BCA6633D4D787A41AFF10C36B01
E1933EEF1CF2808D105FAF99D9315278DFE48AA67CA359A7986818A34CA1082C
6BA588E78E365F57B64342B6CF54FC5917AE62E0EC1D4BA23F1748BD6B4CE605
2EC5BB4D2C1DB94742CFADF8B6C707E588656B193C9E323849E5A8738C2AFB4C
67991D4F0094849F9D218170F77B0BF8D3BFA4F2A13894F6CD3B53ED6B3EAA6E
6401F67D2262B2CD942E70778BDE4AFB757ED8D9E8243A25B62941C18445D662
C9F0D33C6F3D9B178EDCECFA9BEE3480BC6B0E635DA0D15028D5408551950B38
EF6DE6039F26A4135FEFC62A909DE42DCA918CBA34B5E9A5CFA650EA7674F304
76111071F9843E7E405B5D57F356EA47606F4C56501D8F92FE901455EEF85826
87E33CB536548BC2C18FC86F6B6338DD6F09A193363E3BCCCEBE27D56152638A
084B1F23931C74C32FB01DD4207DE3FD57487A51F6BD13EF65571138527C67DC
E9D17E2CABCBDFF6148FDFD181CAED0AE0C9F80EC18F79A9AC8DEC3DF640D3C4
C0A748426DBBDC256E917FAC75E2EA5A1B3BDA157D238AFE8ED8819D9110FA30
1EC3C1E935772C978787B4D35B7313380CBC5B147FC4937611C5ED34846D3ECB
CC867CF4C02FF87C37A3DFCC8F46110ED484AD2B79BF03223CB9DE497AA5D051
78344F561753DB341E3D2D87D4C6DE1B4181A6A19FAF6FC81CCD8BF50E3FEC8B
55C960DACF6A32F2D3FCF0B2416566377F8626D35CE1BA94A4D8A47D0C7443BF
F50001545C4F385B80A56C619306C9DB8EED4E05E21ABCA447D8670054CC0439
74F7F51C1B692431A563786E36DF0B83DBA7B83146B2914CA75EFCFB7F0650F9
4223D4EC9D5F50FD125C5D79D371B372032A0A3229790B7831A2EE23EDB7B387
B00A7C75ED147E3CEDB295474E02679B20DAD7F9A2B079916ED7BE07C01BB7B9
1ED209BC977F81499A926FA86E4860BD86B29F14B79CFB0B0712EAC9F8D195DD
A8D6F3785A070EF91780431A0419D95798D881E733CFAA7788AC2ADF052007F9
104D3A5DF1D6379BA90446E8D5BAF95D944D8F5B9AD235F5AEC7BFB1B3601705
9030556C52D436A6D1DDB885E762CBE114DD647EA15EE87D8DE3DB4C880791D8
482E9D97738301EC766C0FD124FD68CF79F069B73264634068E4DE119E6E5FEF
6DAF9BEED6D6C31A22A5F6E398B715D822EC833354F24886A7889B8875FEAE14
A58FDC75E6BDA1685A2DF794B4E91F381C566CF9C76964C2FBF17B6612F14F74
98F7B89126FB6FCBEEC037C3DEE055B9D9265E3643C44FE45D74F8B75BE23899
2750337419FD7B9D80DC2074E44D0A222E02CD4C6FF4D84C957FA4ACCE1DBDF9
39ED387CD2125CDC46DB778158B67FD317C4067AE5D1F440E2C99B8641B435C5
77D14107BF50BAF9417FB6DD0521AE6964C0910FC7FC4C657600781926DAD7ED
DAD3F9662BA7809D249DE4DF24BCBCC95E85894F835F8692F899E91BF5BD4940
6B7A1AE860952D98859FDCFC04820E2C57F585DA96CA1AA1675E0C9BA31A85E0
E24F4C186B6AD198DF68AE5844558FD1EB6ADA9F3D3B8DCF7052DC97AC3DCC1F
AA14E557CFD01E477A5F6746EA101273F77D7B74FE5CE174118BC0C1FD9339FC
823A7BE04C9014E6BC50664DC31FFE4679C8D20B5EA6C04F961E0310ED4A5A0A
12CAA6B97511F2E5ACBDBB433072A9A7BD2ED05D70CF896ED8F2F4A85CD7D544
8995AF9C835FF320C47FCB83408D76F8162689B16CD77F36A5AA76BFFB1C07D5
9A3EF14688A862D83BC930A1508B0EDD5C353FF5B3087E7D3F2E8A2DABC60998
CF4B55F8A2590AAEFC846D004D2DA38C110B0B1069A27B990308C7C17E58958D
6492C0C8AB4340DE24D50EAA7B6F3DEE9576C0E4E8544E2385FF2B84F8CCBB9A
66DD7F2C2764C703C732CE00045797B245FEC699F6BB00AA6B876B302FAD8587
E16EEFEAC53F6EACF4E654EC5B6A4D4069C0FA8BC3C2424CB281B50808C1454C
BED631DB921A56F33DC2C4A8051CFC8045A4FE67771A9B850DF8CECCD3A76053
A4BD1C38F03B2DB91FBDA5D479863E757C403C7D165A34BE97B85DCA9B228F89
12C84E0C9C94305747AC575F44C9D188F0538E525F0067018CE7A032ABD82974
7DAE7C2D9108C37FBF1FDB2487B7F6B9D2B93C06F21F5D96E9E506F815DB9BA0
6B20DDD8F78CD6D01C7E8AB4F1C336F854F6AB05A931F6EC8A4863C651D2D78F
08CD1897C940AC94AAA677FC87744D1CA42324A43B907BC8274CDFC025379C86
832532FD1A32FDC63EF6E3B14CBEE83C1FACBEDE57DFEEFA81F62DE909A13219
C93BFFE8E9C06A1881332191C6616486E86D01F62A655902C816109B485B97A9
BD6B69D10D7DBBF20365422A5077DBE8C13CA98FF8C9FC04890ACA7BB7480C57
BC940BAC23F6FF3019A41A8E470437CD7A48C73956B7531487B373C76B886213
1E702FF08B5C6FDE4F44CC6F2DDD750C73765426D8FF1521F326575316FE4B73
193E85E98790F4B7DD85EE8187F99B07F60C9EE48E9E06BD26AC7BBABAEA4F85
8CC05AE066FB08882F84A03571A00A63B475404A1194DB76D771FB97FFC09CAB
893F9146E0A7F63041E1B3D6DC68F6B2B4D5B37DE0E0BFE114A228764040BF2A
96C8267B27D3D62A39D6E4CD932AF08787CC45969D90F2E176EC0CE7D8369C12
1C2294B403CC055913AEC310E0296F13DF2F23DEFC11EBBBD1AF290500171160
BAFE9749280A04A06411ABF595FD80E4BFCEC32CD9D5B9E8823F1620E4BEE1AA
9F89584C5DA2752CB266DF3D33023EF2E739A0E37809AB989CD89F1C193F0D75
D516D5109CD3D128B322432DCDA02C0709691E4214A850992BEFA782AE3FA15F
3DD058ABE1C0DDBA04DB5F5E1127A36D42435C921B2EE8B7563F193F9CDC12E3
37ADF6180824E45DF255302741B2C2FF801CE824A87E7DCFD7C98AE0BACB68BC
E2AEC1C9D5ED43756FA17D6A34316E36A30A9866FEF984AD014F2C5E4D4AC5C3
521932FA51052B4BEAE70680BB3ED9E04F6956EF3DD8CA650657B25AA834118C
A4C85DFA084B4A2AC79163DEAA8A2039A030BF7D6CEF02ECC923E7DA174347C1
81903A444C95C1664B0C008019434ABCDE7BC3FA2EFBD79A31EE69E2346CFFAC
C1A29388E917D6AF5FBF058F4090DB423F81592DAFCA9686C79AADCDF9DAFF70
01508AA2BE810DDE974628F3DBDDB5640B726A2B14D70EAEE8E7B3CE11260995
0EC6D127EEDD336B8ADF9388A30FA7DC012BE4CB23A1A75B9B65767F4E4D73D6
86ED7D73C80D5D4FF0D479667838BA952A274DB93036C284C03186A7738E75EA
C18B21AC185C17BF365678D5DB8B044FB088F538BAB1A8358CC07FDEEB3700FE
AF238A932F02E2079FC3DEF237DFCD8F48B4C6E49DE56BC20E7D85D2E088E9A3
8EF3F9957F3AD4065AECF365AE4A61D84FBCE0DC734700C72B4D91EE51A92EEC
188977E97C24A302D706F4C2FA86B4DF3FA85534F2E25B2ADC81DF8B65DB7698
5466A5CFCB746B4A2A4EF7AE0B05819ABAEF0CB222F5F9D322871450D0A1AB4D
A1ECA211F986735C7CE4A8F9BDFCEB3360C9273207B207F4A829A9D92B338B31
C45D9019277BEF360CA0D39547025F421E65BA5A9427C77CCF11539D3CCBD0CD
8C4C5A2C6D5E0FDA4858036CC9606EA7BF9A1A387D3C4936D28B4995FD68749A
2F1A91EB5A38EDB1AA19090EE20463C03D16E1C350F2AA700095DA9616130BFF
2F3E520786144617BAF65B7BC77B00DFDBBD09F5ED6FD4476CF2D256E7A53ACF
1F091BB58414B20B4ED1CC5231D955FC013044EF5471B19381D9DBA3021015D7
A35154325E4CBDE78ED34F9F511EF9D783F5CA1F3294A39D1ACB2850AA388CA2
D944BB06C3D2D2559CA817F5E6D9850292870E196E92E1CE7170A71ECAA16AEC
0D42725A06B57406AA340082D71755B62796E7DD8C2765827738B268B826F54A
7084610BD74584D2A1C5142F64434EC99C420C8D67CD8A571843679B1AE74166
8418BD6643500CE92272E8D7C05E6F3CA02ED83B62495CD80DAEF1924A4EEC0D
FCA7184B72DE333A37C3FA3BB0DF514DC7A79F311E0A6CB8A1C9FF28220D37E1
693C83BFB2690DC669C210BA88645970DE3FE0EE9BD03925ED3605539AA134AA
240137D1402FF16AF67E5812D2E1EE523D7039F80BEEA04138290CAC9A1739CC
869C859E40067DB0A901463953CF070E691FE8454A181C731121FBFECE3DC6D5
366F99859CB5FBED6F65B94910B5400305124984A6DAF56E8C2D216C808A0C4A
EA39AF3A544DEFD1BF6CE6297B4F70E778919A8D4C41259D3F919AB904E55673
523AF4C0D29E043748A5B4464395BCDEA921BACC34438B81E3C097562EC40AFA
31A77773431EAD91414FEB3224C8782ED7DCE266E9FDD41B94B20A04FF0F0264
6293F848E641123573F12709867C02B38D850D36A76D2BF6C38D7D167BD23625
4AE9BE763691A900043A1934B4462CC1CE53FA476BC7B6913463130864DEE15A
817DEF08DD8B56AF935C7EE943110EDDAA5C471F7C8B23801B67BD2EABB83894
3853ADD11A0009EEE68248AF6894F88F1A0B2B38CEB12223F836531CE291AF2B
E402303D1F6931D3E78B7F43577EEBDD0343AE493DFEF3B7AC446630BACD44BD
8F817D18923B17402BE2656554131994E4ADAF25700E6DECF4A6D90DC8377D58
D1549015F1F14F7AC337BEAFEE42DD7620FA0A7BC0B8CF2873C3E8FF4AFC2E79
E7CDDFD004FDB469F141CF25A327800E478CD6F10CD1CD25068C2788757F1F0D
D78A80885E713E94DD77895BC8D8940100510DBBE8A629C979CE85493297C731
D31C2680FEB371D706BB75D28C772BA9D6C462CE5681A896C5ACD866DA39F705
3C52B2D74AB418CADEB5109C17B38F401881D5F0475D392054A525BF8E6CDD28
2E5E94B5BCA61981F00C737F152ECF54C245546A6411AFE6BB1ED9DEDA7ED1D2
06702B0D567260483244FB5D0A7D082CFAE71C3E4044C57EF46C0C46A56E4C52
1D48A65F83B0CC2871B6FFA1C1B92D946C58AD83EA265EAAF85EA7CDF3538580
59FBD45D1133E36A9DE4F2A5D4A887CDA54F408CFAFAE54A006E172E5912EBEB
01E0CBA66AB57FA35FAB761468EBD8FC6E9F2A989B35AE55B1805E4A1B25FA7D
3178217FC9EF4592CA0C14EEC5A9EF26DB80ED1AB387D80B7F056C5848ABE7A7
A48C566B43175E95A73600288FD5FF89F26560F08BA6EF43AC4894137789C900
74D64541643D3BAF33E4EAEF52B8EFA5613FF6C545296B1DEE7277B47495AA86
BF390283200FF7D9C8A298DEBF51341114561A94BACE377464261AFCEF90B9E1
8697D0D50EB40AA8553D62C675339C28F8D60735A02E54683AB29C610A011E3C
3648C496CBA92005E0AC0D78CF57230BA20E8D3A96800F949B909D5625FF1094
1B682C20A204CD218811FEB6407D72A1A0112668805AD1017F2055185759C72D
3755E0FB6FC9D9C78131038B398997C62505A0F93B9AE06D62486BC993CFCDAC
9077009409830F34DD0B6CCB58725C2BA58ED652E25457D79A430BA9A41133B6
04380B181CF8260AE1B93AD7522B42A7E9A8D8A8ACCCF3BABCC238C2F4327E2C
E91C94B963302E42A8230FF2F59570067CE7F7A188301D9F41B1EE3CB1F4C0EC
961B399AE83262E5A0DFFD90B0C56970FB9705B401BA4FE07EA6A171B97832D9
FF9AC0FFE46A1B39E544B90FE6BF3D08D68E8DB979E15E862CD22E5F0DF80092
46680452F411EEA4D7E0ED346EEFD8535D232EF76C32CDF8BA2044A46296E0B3
A3480F55E01E4B4B9FD5FC0FAB7A5770C1E000AD1AEAE339C549284AF8594F1F
DF0D9DA57C1D57AEB839A978EFB05A533236C0C8B68D9C0CB039E1F4B349E824
D9122479955FB83E0CDF74ADDEC16E36AC640E681C3202863E19ED42BFD959C9
DBBB4E8CFCBC5FEA62E2831AF4133FC2E6296E6A07113C01A75290938E10D9C6
DCD0D82391BF2C91DB0DC16BBA514023D08954C694B1645E691D69F88BBE476E
E1B50E3945271F97D9756C3DF4E315BA777E0C89A3BB15A332E0F32393E5FBBD
A5C41851BC480C3FCBA49AB250A4DC7E59D933ED414D9073623981FF3C390536
C19D63AC87DF5F37B040FB587A9A0D890CF20A92BDDA96DC435F80634571A1AB
8D13F294AD0D1D8B024BDEC4F0F00143CBB7355176390FD5ADCB1195F47A1EAC
DA09440C4F2E7360655CE42D71B7418F7251A4CF44EF9D4C0566CE72386CB1DC
4278EEB935DCDE520B239EF9DBA0002C790A1276565A7BFDE66802FCFF1D1145
B4445C087090D05470376C6752230972AE03FD13200A281A58DF76ADC5E38AC0
E4E149E6CB20AFEE9D0B7A8687FED62F6A4DC2259615D4ECD2118923930021F6
8EFE18E851DDCA1D90788E4D3C40744DA7F402A5C65E17A107B071BC56C46711
4563DE8BE0271A49739A92451495196303045F4E03B9C02186F3565F604AE678
0BDCD7A75EF1E8E842BDB37D77CEDEB9DBAFC7B6C79E31E1C449329B4F2C333F
9FB4C3C5746686D273D7E6D543F2046DC492B0324003C323220BB08B33C391B0
12680EB382BD2CE17EA5AF35AB47C274138397C0EBC28D32959567FBBA279E2D
CE4C81B6E5F0B8106C27868E7FBFF549310A0A0D9A79ED10136E77FA83456CFE
1B633F2AEC1AA4EE0172FEC5476608F08C0FB2483E207FF59EEBC725C5E9B7E7
3BBF23AE73C41E81463F9C442EB2746240F9D3AFB1B6F77F5C716585C841A015
81013F4E49B5D2D0BB516CC806752A592DC96802CAD317A0EBFA6D96FD280F2A
45289DFA5F30ADF93D5421613C71CFEB676DDC35F5B94E01C0C478556D68763C
40D020D3E303E0B99763F4CF2D0C5F4DB3C68D156CA6613E3C843DC77482EBA8
B1F042A7B2A2D731B5588A7DE94D06055E7E89071DBDC42128BC255F00091FDA
04D012D79500666C8C8FBBA26C9D9D9AC7F18A2ACBFA1A5AB893018DB688990C
EABA85124EECEB775AA8B8E086DEAC0530C1AAF894E54DA652C07DE8456E67F9
82A5F1B6A95C098DBE2D6C2CAE484BB835D2210C890DC2664CF411E7F04BB1CA
F5E4F127376C5D29127A75DBFA733AED0DA67768248B77CD283B7DC7129886EE
E7B5DAAD24E76E79B2FE694ED4152A9E30CB918245F207AD0CB91868783F8259
0718FB372C0C49CEF20DC603B64F2D04513656A54E3347A23D551EBA627530FD
45CA076DB2552EA2B2BDBBA69056160296C4D0C3D44A15F25BDAA43F54BF93F8
7C5E402B8D2775D4B02297D1895783F80DD6464B77D5C53B26778872471B98C0
D0395DBFFD001C5C33D710921677CA7B7BBA4B1BBCA04C3ABA9A5F6CB39DCD29
73DDE0435E1469160122164C980BB83C8CE99841B4DCD37077AA1BAFE3D1CA3F
1D75689A7F5A98D477EDA947A8C120896A502064AED35AEE4CEB582C18087A03
F5B5B3FED83DD164E9156478A752E5C73C1441DA16B1980279B68AD80DF4E806
4854DBF12AA8DEFCA91E9EDAFDD008244331FB07874D541EAF26818087922A00
F1AE72BF58BF458E9B50D9AB41DF6008F81E2F91E817FA2FB3C83CC9BFCA33A0
447D8FD1550D9C038D6DC65C46C42324528702CDB3359DDA47252C5B5D08EFFB
5650810FD15D0A4833A2E42AAC65989D7FC958C143E40620D1F63BD60469A317
94226A5E2C5E95FAB183080D7ED0310E9F792734FD65A70F475D954E3C9D043A
D0F3F71D46763A794E65FF2CB1BB63BBB2F5E7234B3B420EAD57204FB1246175
1BEE3BFE8CF45D4ED50906B30263D461801C55AF6AF846D7775B6FD5C0502996
06A8FB630B125841F256FA6F6D146B895C4C7E17FB6FDFA253F201742853A9B9
A0A31BF99611AA6BDF45852CB89E8F53ACC140E5778446FAA397696728AA8ABC
91BF1422BA9707FB58E13F6AE459098BE63C68F88A173C388E805D613BB51889
E464383C853C014AA533B847C3624D6D0BEC4EA05CC65BEFFBC26877D1B6BD84
E990CF011BEB2C6E23D9924A30B085538D06FB70E1EC0D7B808E5D294AE335ED
8C45C23B2B0F464AA7AB9DC6F964FD3E5BC25CE512F51A1DEBE9A3AEF0022290
AB7135B41299196E4288F0FE8B841ECD302D72B1D310BF15E2A58528533D5BE6
B8AC5732B48F9727D4C5B7603E195751D6CFF2274A7EC045F23EF883E2AAFC24
18F081B714D95B1E82C3B3D739E7CBE1F1CAD85F488A3FB4A782DE9027338AF3
A6FC7800B6C0889B4EC824E374338B6B08B3FDFB3AE98665171E135BDE857757
4DF46B1F63C81482E19F5DB8BDE3B6E2F6E02A61302BD0D753261F5B4FB48451
6FF5A9749215D9EC39A274ADA198573DC2CB3A8043508CA77E37045083237BAA
0367144A1E9A892B4700331C3268CA5D3939460795E2A7143ECC17ACBAD602CD
2D5F2B9229E7D94E62C3CBCC9008B6CB5EBFFCF9D064693855D7187CB5C90FE7
FEE613AFA8E4B88ED9E3F991AD5622DD2B5DF5CE882A52CA4115CC66CB5082AD
B3C9C61CE37F2B450290F421D8C92C0E522EC837E0F27F5FC87A6C264DE25D2D
F21890511E1F67A36158A5A7E03832F51A6032955AC09DAA2568754CDD972AA2
D9E3F6F8BA2ED65BB045EF376EE2D09BF8927D4E4D8A61C0D4ABC76F78314A63
A31B0D839FE7A589C7F8EFC45FE99E9C86C166975843995E9904265FE86CBE74
90D7DAB8945B3A3410C7F7C975B9BA87591F1955591D53F55EA22C84ECCC5363
C9627A1BF300C89711727C122C4DF6F132D55A309DCEA6023A40C98E5EE05FAB
3A03E9FADA261150478D2FD1A060D364FE7F53FAFE79FABBCBE4CA5A3AE9A1EA
48D9DB422B6FA513AF236C602AAB6E90BADA6D5D21F4B03C4713468CAE23091D
4F846A0403A5A28A9B233B0C0A83EE86E8BA8D8FEEA379A82F71D40378CC7CF5
7F125F09DD4D61B85BC314091BBF8204A4E51B70415950BF55BD0E37971C98CD
EB95E1BCB2482FC4FA78FCC7F46ED0AFC595C01B325E1899347B99FF192D9DA4
33A5614A69F78D80A73A4FE697AF773C324E548F5691A023626A3D826952A59B
D48A8777B342340DEAE8EA4CEC21EA071DB67832F8083CBFF71DC94992706218
65E854568E515470FB302220B66B37FDC83C7F19921EA79BB6AF00977A3FFD1D
CE3AB816A72958BE518A8C6B6822EDF2BE97B6D17F7430ABC913B630EB3EC4FE
BB437D20133F78CF3D1E6D06C2DE2A2F0A77627CEC179E0793D25D836060637E
3F87F9D2353410465848FE6FD645A3E748677141FC4C36FECB1BDDC9A59E9808
4A09AA341FFABC5ADF032AB549F1AFE6270CED520FB784748F664DC8B4BEF321
6EC49262A80321644861F38C07060D6D21A7AC8977090812DBED4589B3297E61
4575CDA1C27877EEB72B7A0A547E312E03D2EEC3275B403B4A56D56420027586
BE7880FBF9EAB1984AE5A3BC2342213F422B0D759EF894396041F918F40922FD
2FA5C46D6C2631116B6BA6216DB0BC401372919A992A7FDEFDBCD52DCDFE9D2C
C1B35C092023BCEA74C96BE2B49E35500A9AF4477C172E66137544D08AE91CA8
47D6CB35F44F64C0D86BCD1C5CACEAC271D0CBBC54217AB7E6FB4570654B6D1A
E7CE193574A8E47C2FEBB333B4569913B7126AE05A815FADF39E0CF1F4FC3EA8
6B453B44F190D1477CAFB239ECAF77DB01D6BE21405332F087ED6F23AB6D4CE1
2ED779F7244B2A027C4D95F6EDD779D29931D0A2C4461366802D24E3D40AD963
E743BF9DC7E246BFE7095C08A62A1C3ED27496A997E53DC1423F88B872757617
EC8BD5060445C2ADE57400B7592999376D8398E518A2BF12A8EE493C83E88065
059B60EA2C836BA5FAC1A45705AFC6897008BE1598EADBD36B68CB424B938DC1
E9ADB05BD5793B50CBD1BEBA37FDFDEBFE202F5C9ABD254504DCC725C4086A6B
A2489DBECC4E2862FA5C171CFCBD0A833F2F1E3C866608FBBAC833E34D1F8682
B41A8DAD42933C40D0EAD2DFA20D2B793AC0786C726DE21904E19E41E6871C59
236814FE252DE2A55DC598D6E7E8ABE8B55E0BC793BFCF846FD6F18B61A4559A
F2F99868EE1D746E3D4F370A001829E709D943C49233FEC4D13C310968A54254
2785A28C6C2C464F2B9299621AFDD264A535D596F4197B60C6570F69955C19B1
B2F2A442004C42F9C80FFEF6555719CD17D111D4774AEF89793E1FA6A2B198C8
2F76858711E6DAD477F84CD41358ADC45D023782F5D89B84C00416DB8617C9A1
60E835F06AB6E3F6FD77064C28BBD9FC054C39781A2ED74250469C77CD79DCED
688D751964B17C1920647539DB6F6BB912F08C6C406DD3E597AD840AAA06FD04
D97F4ACB204FEFC528F394BA2AB3CAB58FBC90AD3B152D8040C4785A9AB258C7
607BE99125E7B966B3BE4EC1ACE2CDC61557FECCD681F53BC2AA8641DF3086FD
1DAE3A8E9575BAC8C246B5B88D5262489F04EE7E7B8255522B354BA2B87F6079
2782E720655179C9DBDE2FA3CA2841EC6D4B83926518C065454B620E34771733
AC732790F4630748D05D1F042CDA58F57FBF170D035252A02C74F08BE5CD6C26
34902E46488E37C752647004F64CB6554CA3ADFB1ED85EA650CE4D6B06C953B1
3D5B124867FE0E73E541BFD353B74421D9727D3F142B53DEEC3BAB824EDC96FC
83505DDF65C4D22A2B030B034CA093210E31F1DE70EF298658FE164E54797BF0
80CC80A43145D514B5D58D5F8CA553D7680F417D3D5AAB2041FAF8973FD2EA84
9680A82ECAA3DAA9DC9D1140620CB6096036CAFC18FA8D8DEC73AFE61598DE9F
59B89861883687E9A06559ED273AA54DA7B58C32A44AD7615DCC74F0428A9733
1886F452452914945BB3CC07DDC7693E50D86CFBEB4323497A936F20F33001B7
CB1D237F96EAEC7CBB4F27466532D0F28DAA884070A3DAB7204C5E1B08711337
B2CF1389CACBEC03453930D1BE268B1BBA27D0B064C1F1455B5B433EEF8C8002
CC26A19AF338773C3B4C92AEDFB0A2667F9A0A198E3FB717A74364B153413AC9
63F2B8E6753569F09F01343BD60DC159649F30A661D32C3E3B02023FBC193A87
940FD4799562DA16480397E4EE2C1B2E02808022B3ECE4F54C8037A34E00E381
41376FCBD241E91701FFEE89FC2FE7C872E3771F77C607B63284C10FED7DBA39
C94C2BFB06AA2178297D37F84C00407BAE294101FFB43052C63356C1656D96F5
9D4B6F096BF3F16539CFAA8796736CA7396B6133C8CF5FF6C6A76250A409048E
58C05DD76D3E5E2B8A8B3E18890C2782ABD10D7E13C162A79161068928CE0F04
E17B71F7210836C707FBD636D510B18EF4C1DFDE6B70F48243B314187E93DB16
437BD12BFBA9A3283BC71EB0D677C78F38EDB0A75B06F69B5D49A2ED632217E3
C83AD2D12C93780FDD84137FFBDF3DDAC2DEE043D709CBFB03395179E873495C
57C135667203DF889BD3D1F23062A9200BEE7A6B4CFDC3CA3A433F92B8593960
2947EE3113BEC2CCC735AE73FEF4281D7B35736A4CD25A9DEBB226D3EB77228D
AAFAECB27871A9EBDCDDB76AEF5F8E1F23462AB79AF3343E48C3BAE64A65EA7C
E99600E3C745130A2FCE7F447913C96550546FE79FD36B5CFF8B1E76607CD82C
F75E32542CB540558DF0C2E7E606E78F62D004EA651CA01856F7BCE0E4791E84
19FFEEF02C1E110FFC4B8B5945AC9AEDE1CD0B3F5A460FC3ED73459C1CBBBC12
D8440594726BBD8563DC22D0DEDB19FB659F1BC300FCB07285FE12A133FE384B
6D356A61ACAE37567F8028A1A3EB524389771F6718455E10E949CDF8AE2F6779
8137EF50058F2F1F3E6CF17EEDBCBAA07B81169963AC97C4052C135E2CE33AFC
96E99DE8CF6A4122DF4C9AC33D722F0F1D454C22E77B9108DDA251F120DFE4F6
D0B35622AC0CD1EB666DD510B2F6A94AC6980311EE06B9932B55B94E1B61C29D
D4104ABA0F14334529286186318126F73E484955505F1A1FF54D4A162AFCA555
CE4B828308C1747CF8540F064534C8AC15F177F91842935CAADA80BBAA6E7950
3FCEB26CD1D4B422C03AA0F6F4FFC0BE4D74B15001EE81F6163A518DA6128531
9FECF86AF372088447E812ED326840ABB7CFEE5CC932AB97E6D7077C7A69FF5B
2EF85B67C807C58999139F9FB9EFFB5BE287542C37B90FA1D21A575F4966C4F0
15417E3B196B6ADE8C89B8827A69F9D46308A4B82FA29E34527DEE4C290A9464
6B1CDACE69C691592D68600DF4A328A9E06A1C9554FF58C2E03DD50CB7D5B2E6
62D106CF7AD8EB4D428485D671FE41E3B7A47070C68BD3A3ABD10EA81F835E9A
BD5D31B036B52D7D8A9958803FBB6B2124FA644998FB007BA253D878264DCAF3
D7519AF91FEFB25DAB8CF174B293CB0EC90DDB93ECA73692EB4D3D93C7ECB15E
B9A72F2AB85B43E4B9289677FBE0F983C7BDEE89A25970A46767C8120C5C295F
89DD5B8D9A8F0250E6DA5024390CBA038561D5B1BA863479BC3DF68C9D35F2E5
4C2DF7F3515FEE83E126557366B58A6723548EC86B68905244717C8E52897933
DED4EDEDB6DC750FA1B7222AE50430955A063BA3D0CD4AF63333C3EBBC2CDCE6
05E6909B15317BEAE9DA1169ED7A024DCADBBAE56BB23733E09FE8DA819ED769
D93433197DE6206D901B8D4883D635837D66D21F43B75CAC8B3FAEE46C4607B9
53C45AAC1D63AF8C662A4BA869B41274A3E9285BEF4FFDC108E6D3FBE8E7DA4F
D20ED8A89665749BBDA30D4A345B19E08A28B0CCBE4131D492E1F0A652A45C03
584507D97403E0055CF774DC36DE127BCBD1BDF016141CB360D101ADDD8DF2A3
226D7E21D667787ED5CC9AAEB9C1DC3CC0CC27B04D8AB2E2FD6BCA843A957BF0
55EBCC6DFC475409E82F87171E5CD64BD3540AC436CC144873ED31F07D565E20
A6659530E0639126599E05907F067C4F057C112D863FD8DF92186345E372EEE5
5CFA072DE650DEC79D5DB67E2F498D5B3758A85901C60B1B25EE1857FF1E9E42
3BF5E5BCDCE1B0D2AD956EA4AF269A2D89BE22BCCAA501FD211F2FB0CF1E64D2
8E811B58D520073B0DA8B4D5E89B50B0372B9541C70AB91498CC8C7F7588F51C
05E3EE8165ED98AD352C63330C9711DB3B8000D5E4C6971BBD87B7C2CB79475B
952109F5BA6D89DC6E00D8D2DF7BE2DE04365E9B7D1F7B7B6251D94D32DA7C55
68C60E1557CB59B4099A152BBB9A2915E7851F2F682F718E19FED2E46CA8C4D2
8DA1EED4212E17F7EF0C4E341FA09DCC43DC79E4E0E7DFCD901D68225591D1FC
858DE46EFF4DD7F3C315C5B5A03FA73FF76BFE128C774BDC0BA44E2365486972
2D8CBB8C34BD5F5C6226BA6DF0995C8EB69407978B6D568420C0C963E471DC00
21C0C8C4629C7D71349F8AAE6F44469D65496E4672EB89ED83A2EB25AD4F8543
842E9B5FB3E3608F6B74ADE6C4030884BFEFB1C6BBC7C6FEBD1B19EA94AAB055
515B9B08B5B2D744EEB567C407780E8FD406BA9AAD55868EC1F48DC88F0E9407
9F010865467486ED6DFE036B9C37B3F8836B6495C88CD683C6C43AC8A42E0400
7DA2ABF96A2EC7CF18E61B369DD3343E8F33A3965E63AD0202C13FB5AF96DE6A
E6C7408D466FF67792B7F4E1E7032AB113EDFB2EA4856111D83DEB3B454DB06D
E19175C8B196A6B50167E1629612240C5517DAFFA5F74F07B8CF42FCFF92B4B4
E82CD9BA074E0EE463B1F7A1D71B623FD41DEB5A0EDD1D20098A78BE343D015A
42CBAE689D402CFB26586964E1717FFEE8CEA7BB17BA0A233751EBD7D537407C
FB3B2DA9234B581E2C366299F1E73EF3296EEE514EE415B1BD2E3421FF1524E7
7E745301648DB6BAAEF2362F5C4D95700150F12B10AF46C11CEAA07CB6831B1D
374698DFAEBFC7864D0816D096FF23EC5C2D0995FF2EEB7EDC7F5C7CEC71E6A9
238589744094C0D1C0D7AF15BBD21F4DC95BE4EC936FC87E9007ED5A4019D39C
28A92CF4C36D2D919123F36105D96433BFFA10A04AD9D2E145EDB194314373F5
55F8FDB27F502423054A68959AC51661C5E77E3F24AB2C34DF8653E2BE384C60
894B479FBBAB5F131C2A39E10DBDA1905E62A0CE07AEC56ACA7D0D4B6236EA34
A1FD83D1C881BE322683FE755934008EAB920595E4BB564A289449936A698EED
79918F93A619A4C52F5B86A1C27B987CF73128C42F3A1A7104440F540A75EE3A
611DFA7AC9DC77385E267BD10B44949042EBAA3E6F00459D783B7D468FA1AAEC
3890A0EC1A13EBF6D7B7B12289330763C6B0EE1DD9DB29238CB0D04AFF97F80B
F4BB1204B5869EC7839DBF6DA01D4FA8249CA362A8D2117ACB165D5CEBCF66E9
DF9DE5CF0EF43F564B8498C6E3CC50141CEEBEEA2EEF5C6485BC45C207760835
56BD4585854F7489FFD092452BA0C6FC0CDDA77D4D3E5B2C40FAF6E8798B853F
BBFD883DACB2334322573700B5045EF35BFC2F9D3B485CFDC3B7AEFA12601577
8F8772122E075EEB2F2FFCAADE309A2A80F4F06E4C66CA891057770BCA7677BB
827DD70E7A2B25E3A3AF76CE8BA2BF5B5BDEDBB3E42ECD61666DE72BB2280AAE
60733CD86B7BCAC24DFE8543A23510A707347DFD8EEAE5706832DBCE89A53449
DED2E439B51E30494D8680CD6A060A36B5D5932D81409B7AA181ED9107D5516A
9540167C69F1AF1F9A7B469A56E07C64E908BA3A00F314FD238DD0442EA4DA4F
CE18320B2E31D881ED2F84BA8BA0D8EA2F3747B17EC3664E69DFA5541D68D382
88091CB575EC566D429E077E3C3B83FE1FD168C3D2C0BA95A31D0F3F53C0BBD4
C67D0BD1C222E404E932EBC34DF94ADAC0722C7523298D2A1C14198FE64E546E
402402D3331EF4AC8E0CB9DE16A897E2A27975CB1125E8FD0BECD45DB6A7847D
D46FAA7BCD93C9A128ED96ED5EDD42D6EEA228D8CBACC8EF524BA0C76F92E24F
FAB427AC43915D0E3EFF2D6F048C4DF86533ABA25EFB0E23C116134B916F4521
0DE2D9A95EF09E2E3BB2D219DF1D297FBBC64DF7BEFBEC5C72AB32D0289E9CC0
DF282050E8ACDD692A5BC80E01A540CB0EB506E61E9ADF8745A176BE06077DEC
6DA66BEAE83D4AE7DFC609359716E50FFF7358770A5DC57CEF25AA49F325AC2F
14341EC43B7AC44D5585BF6D2C29B6FA8DD9068A6F16CFF8D9C436AAF547682A
B341381FE858F87DD4795B6A6A17AA830D4FB2D8CFA3ACD6B586A89A50E6F69F
7C4E860577D438F08DAB858AB1643426AD20B8EAE439F6C961B7C0C871A8B280
87570EFDFFDF665724920560FA8C382A55757981414A71ED491B6AD69978B4AD
DC864D0DC6047E76D67A0BF72CC86722A36293C4953C113419DB3332D83C4B09
914B078CCE3919D9FA905B3BAB03B43EEB23DB83733A23DA0B6BD2AD370EE476
F3734899F55BCEE049E955C950EE56C24A5B8A6341DE324495C18F16F2DB428A
32AE1337C1D20162748440D37507237169210E2EAEE40F6F2289205F8C3AD5E9
4A9CF607707586F2A16A930710D07EC18CADA4AD4A5CFAD97DD115A8047B5F01
F4BC6F501F900933FD4A4F878BCB64214AB906C1CCAA70BEA7218A0AB4B23129
317FF7B23732B1C54DF2F960790F0F168765F6F1172E06B47280FA2ECE7ED63E
2E2F4B92FB4320B50771359BB9A0F3AD362CF234B49CDD2078EE5510EB663B71
F2403DD2D52D714482025C0DD223A009AAA03A53DE5A9F691D8A4ADE9FD75C03
E00C33C749B145534E30A605872167E49CCF5382AFAAB632EF5F38338D9BC6F2
262E944403056CEA039C6C93AEB0A0DA956B72118A9A954F1A1B33EBC887035D
236F39FF1989646E0E1AD6A15F98378E6DA1BD39400A017B1FABCCB3F383DEA4
D5942819E364CC985A99B8718CEC3CB2A276094CC88C323090394DC6D4A8B60A
0F7FF4F4AE2BD6B1944BE517F2C94659C480C876CEA1BDB204D7991A236FC10B
DB40C786170396152337F388D0EE05FF7C6919B5FE24205DB1378A0BF2E2AB67
EE285FFA21F4D8944BC94E98FDB42A84C7318EC458D6ECDD879E47C97B7BA9D0
52BCCCC9068E8F1BA104BC79E31B4A3E74355C5C1C22143CE79CED7B803278DA
572DFD573240B2B39563CCF98E34FDE577BA9C10AC38D507B015944628AAECD5
24983F7CB93687FA24A96B90BC6F263D20ABD4C0E664AB002016ABC737BF9B8E
6ED92A9F2B3B43AC3CCF8134A8404F4AC8283E14CBCB92A3501DC62F63AE37DD
CD28A43A334AD8851FF044E27ECEB1C1C598A31225E6DA0E68740668CD88FE9C
DF2A2C742EF13B3E33CD2B2F1CB16E090458C26D80CE50DB1983160DFC463355
0544EEBDD61ED962EECA9DB00EA1F02080A11BF57F267E1A9BE9F03C00915598
4AA60C829CB8D1410BC80DB1BD14C168134A38867F7F36C2CB30D4C147653BFC
E9029BB09D29743B852C636E4FD7F6E4BA94E5D15ED699428EB370318C413652
3EA3445E716C9CD78D35B80FF8FB03D2FC2A4314E1042D5A4C9E178A74921BAD
14AA6D4DF1C609482495FA5915569A28739027FADF0203259A380D0C18323478
74DA5DD84739F19A373AD1E33DEDAC7F4B5ADEEDFDC5097BD1A47C22FC922D54
A4C78E0D91462B3D184B84F70068A56D8C4BD38DB105163E88ED9CE134DF591E
BF4524FC55D37E92A6BBC6774E551D948B63BFCB647FE5A2309552C27C0D0C9F
AA8C943290BF00478E2084852A53C16128F2B838F52B2A4E0CD412AF33A723F2
1E0E3E5FE5DF591B49B2C30497C5E0827D1580DA363AED765FB246B33AD976CA
94468749EDD3BD22FCD7A799136FD4FF333ED26674F3EAD6CE2A77A3CCB9FFBD
5EBD981106B90895239C8F45EC7FB114EEC4AED6D95D8051CD11E7903A86F0B3
FF4C8380206D4D2CF7415F2831E562305F155EC9509ED85D235CB476F939304E
2E8E294A4CD8D875D10C96AAC70BB88D9A24C5DD833643E359A5BC7F4BDCB2F8
BE827D8CC73FED823D50251A877FAB74E9420F10EE0BEE98A26A2FFBE8EA6B39
73E1B7964CCEE57BF958F1C541BCA68189E2F6F4BB7A4C72355903316B7681AC
666CAC43405840D0FEFDE7601C773AE8358F75CA48BDF0CB38D3AC1E3018B0AD
CB5AA8DD5885A1EF3B211B5D7ABDB24698AF7BBED6EB368395F13F97DA431E3F
FE803E92412DB791D3EC9634AD9AC6F8B4592B08A8E3CD628F533188EBA5BECE
54A809F1392526C540FA0209F03A7B3D287FAA1322AD36791D9584F4869DAE68
1DBC7AD2D5947EED7553EA067BBCC38ED59384EEA0CA96D7361D9BBEC1D8EB93
93F42DAD1E933B1B6408B786DA4A3B72CCE1544DBBBA64C51DF45A67BF33006F
2278EC35EAFB887CF451FEAFDED789BE46C2E018CF61EF08F24D1A6ED83F1DEE
21E4D7D8E0CA8B81DD4F9AE5BF286D50F1E893AB29575F68777404ED502BC306
44864E04967D1D5963CD626AD9A33E7C96D6D7697AF1C2FAC7AF2ACB9B3B23F8
40C5AC56EE1DEB79D2B85AC4AEF53743740DAD8A5261067B162FED210FB0AAB6
B460F07587CD1C1F463528925A99521FE7150E7295157D36FA7F3345D124E3F1
9F4F13AE5F2ADB9220FD1FA709EE58012A2F6E0EBC40971E8D5AF3E046CD3565
4BC0670CEB2A50F25BF50EEAA28789393FE2EEF718203D14F727F638349266EB
AB3792FF2E29F09EDE1025260C67201C332AF61C230D47519B6151EFBEC99C2B
0D23204113339343AC0BEBFAC40AD64FCB6A98B2A9F87042B439DA88EA78E27B
A39DF650811C45365E4B4976EEAED577A3E9871776499E841B3959EF1CE06714
78EA16782EF7738C2EFD71C842D9C7D495AF8870D0DDDB9CB66158D2E364CF86
A745CE9B733B1D12BB949815E7AB47EE410A8BF812FDB87D2302A1CD1AD84612
5D1615FBB53BE5199AB35A25A099CE262A38772513B3321CEC164E2269ADA0AF
356CF8088309C268398EBBE6AF147EF1CD624CBBD06A446B3C461865F6EE18C8
DC3F5E84DE0110C60FB3AB799122E0E0702D5B7C7078B98C4E6913311072A943
15775D8D4A42715A50ADB813ECC757832270292A524CE479C690AD655BC315B2
1524ECE8A2A7E7940E58E79E430F3FA2550B451CFF8FBCA88FCDDAEE596F7915
E7F481B7E23049B67013BA1F6F34275E722779911556B8273006CF5FF67A53D7
929CA18E9ABC2AF369244DB91FD39B6F9866294EC9EF1B4B7E7A57B08826C1B7
970E8D01F43613F1A9ECA7A04AC42DBFF1E76C11C08BCFC1D8B0087D1A5F2775
FFF46051B808C33522F0B04280ABC1ADE42CCD02DA27323AAB6FF60F1D5C35E5
764B5BE0777130BA15CE947FBA63569A4985435F82F52782A102443C46104F96
EC605E39B9D37C6D65813FA8C74B409F619CD0CD78B53BFE774F066D42CF7A15
618825EA65F8C00D6EE8F794112A056A39BB1A1463DC362078FA88C323A5296F
E08F79EE9E5FE3B74F3C06119D8188972A187781B2AB33F03D70730219336677
22992E463346E8DBB98E860F3DFD31996DA3D004D1F409972CBEB88D556DF880
030B93494CD368A49EDFD49F5E0B2602C0C2F847A4EF619966D3F7A370A5AE2A
C5362E189B0BFDB4BA6AB39AC80AE4D345492A4EF2F5CAE3915126380371AF13
EAA4360EF109964C65191490B3E647713E43A6CD0DE63497A1E3253D2D9D1F2C
1DF873992D5CE475FC0CEBBBD664729347B6CEC0EBEC9CF8DA45CAD984B7F36E
197A918138B32E46E1366225C300D9EFF41A8899F004293D6AA5E6A88CCB054E
6AFCFCF4775577B568E9224A3DFA56A1D8E28CCF864EDAD758C56EBB77EB7481
EF58043132561BB8A27735E1F9BC1A80CD00DD260ECADAD5129F705CD9A82BE8
ACBFC7C498438659C4EEB3396BDC94387CD369BD6D8172BB2554D5B66FC5FB6B
5E97450752BD696D49722E8E7A65499F19C7CBEB5C242EC256EC3FCF753EFDC1
004CE3E6155A9C55C7BEA8C1B49EEC1AD24B1BC1B930FFEA42BF90307E79D624
A0EB091398FD38A602313500543145F303E426F95584079F24B3B87382076ED0
C51B52C2ADA97904742DDC9F109EA070BCE1EA66EC0FA62B29C5896A3B651E5C
79C490065CDB96F85A764953F0370AEC442E746E57B653F2D09706D39A3DF5E5
76CE031F4316CCFF49126C56D696C8816C3B58AECF6480171F55377559A73355
BF221AC72E524797D90FF70B4FB0E6E644D0FB3014F07BF515AF129B01300FD1
33E3443EC8BD0A0DB56635012220782F5B1DEE5DF3530078708440C522B79B8D
26EEE0FAE5ABE1F1AFDF2E4587486B0B6F39D826D8BBE4D7D4B8DF194B4CFD57
01E5F9E7F4A5304BCAA3714258F4CCAF8F73515DFFD86AD994335B71DBF9C8DA
6CEF77B531172BF7919C8AB63C5CBF8161A55615F07F9067C7400794009855FE
C59085C02940FF86B267AE44EE5DE181ABC6339DA3F736D6B1978CC9621CA94F
3E0D40C05FF3DCEAF2F6C1AD105C7820A1EE8372AE399FAFCAF6D96949E227F8
0780E0400B2229B239940A7F4B77C6A2F483BDDE3A4BD892C8C394B497BEDC77
AD34B7764C4E85AAAF42BB1FBEF02A1F2142733FE76282A1273F50EE8B8DABFC
677AFCAA9D7EF02B6CBE4ED96A3594D30423A19227A9CF8DCD5ABBA694E6C781
C6961B6A5E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1200
%!FontType1-1.0: SFBX1200 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1200, tcbx1200, labx1200, lbbx1200, lcbx1200, rxbx1200.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1200 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-223 -316 1694 925}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EDDDF3B8AD19
A05A98215C1A2AF1E98BA6D25E3EE92459564B169EE8915C4C3A77E21AD623DE
4B78A134EC9973C88752BA636665292269AE953747C9605B9769A15E719E8036
4E368E46C8FCE60112D1F5FABB556AD834401D6250529F3A1BBAA7679464B857
F4746C58E043D98AAFFB21E0368B3110A911F98D0C1B16A668D8B3CE65260AA7
E9A3FA32A95349AF8AADB1AE65C05D8C83A10ABB656256C77C42E4E4E7DE2DCD
F47BD54EABD080A844C8E3D14CC76E40490EAA3E94371067AE92388A8875BCDE
93EFD646F6FEAE17E4C52BEE62060D2107B620D9A948B3B3D8D3E06E63A714AE
B5932E76384D2E2B15A5A7827EA3A3C15EE807555607FFAA1AE58C5A95B6956F
A16D46AE1028B81C056BAEE21114AE2C87B3419663837BB87F79416D58E30833
1FF10EF0D5B2112E088F63D9E747D792CFF5B74F2F95DBF5C54245C517F937BA
90AFD6EAEBBEB6707C6C751315331053A0BEE3678476A7BCDA1F939D98923679
067F136F7824411A8D5148998105E3E823D55A18FAA99F4AC12EF14C4BCA4736
E465782FE9E81CE4F3BE271CE14CAC803470BF4D71CAA1DCB8F66E98C454EC3E
87EA1A0591FE3E17ABB7966756814704B4F0FBBE89F9371514F32DC7AD923596
435636EFB632B9404FCF033C8ECAEEF234C1E9B87293BC8A57320807D777F31B
66646D04D373CEB3AF5A8331F3615FBEC47F3C77361753B9E8A4E7899EB5840B
F02C6369E4E6250D89648E2B36D12C6CB7BB21621FB1C2E5E979EDF743F2C312
4F5766102F78FE466D87679CAE86D531372163C9574A45888E01A80065FE1D16
6ACBC8086E8824E5D70B187F85E206BB921C647FB0085BAC95E03F50F2640205
DE9C3DFA592B81F8CDE984D348B45976141532ED6E5B8E62CCBE00AE2BE985EE
91CAAF6EC1373ACFF3D3E91DBF5A68960CC47014C9E2F1889D1262F687DAAA15
BFFFC119C09A0CE284E11745CF43EB550198E8201C7B9AA0F2E50A08D832F3E8
A21C36E32F2D603D0263C5E14FD97207B43DA2F43C74E62BB9A525BD078CAADC
B763BA148501DF9DF82BDABB91090A9DE98024D682C96D6EF8EFA4914CC52FC6
8B598E155B29044005DF0B5D11C2DD14738B105B27CAB5EA16F469523F8B2575
6BBCE55EA7EBB5E65B3D3B143E4F789CE0127CCE8405DA733CA68B9059AA33BE
D5160628F2BC627789E7F26B0DF9D3648326E444D1CC587A732C6816691EFEE7
9FF39A54510BE2647018F2554AD11BEEC66DAB9F2AB8B6C05B24A03ABE644367
E250E664EEC08D5E63D1320B4AABCD7E9EF0A47D3AE67C167DBFAC86341CFB1A
A8F38DA6D1E71520E0E630B3D1CAD7566BB1EDE4286AFA3807498EEB5A661265
0CE9363AF5F94B47510F1A4E701072477CD95501A564BAA67C916518D0D53C37
93208EC0A3654EAC3D784FB7F40C547C49A38970594176C4D1C63270FC1CE47B
39EA1EC891065D57658A2F3801B6BF0DAE9C71733A48DF5E0C796F4D07BB35E1
BFE9B2665093EA63B54271946946F6EC1B259FB89EAB8569BDA4103FABFB8ADB
166BC7A0A0FD447F078F62259C8AE7F0B94C9085B97D74A2910A16C6962061F8
0D329AE9E0FB1EF3B02312B16E50A8236C9CC6B6CC9FE97D51EE48070D530E83
DC3EF37E193C353608A3EBB1C3B1D24C285191CBBD78AB420993351B8CF90969
0AA656952B903556C5B841171FC4FC8C9C40CBF28F5F1DDDA31FF161BC52E2E9
D4C5E46FFFD645E8EB8D62783BC8F44D9EE5B5190A470C355EDCFB4366B9BA94
9C44D590227EED0C872C63B3979CD9378E0C6C11205AA1489DA575F5C157EA7D
6D651AB56592FB0395E3B65B84EF56B9B4251460F072235E9558099ADEA53634
E03C42727A2AE4E28D23BFC19268182C2BBA716AAFC480BE37C9BBF4DC28F2C8
562712E5A6FBC5BF37982E71728FFFE6765BBE196A47E901AD5E25A813E561BB
98208B6774273C951F471F1757FBB59A8A20219BE995D3321EFC59AE1D02B0B4
55373151885BC7418CEE60F40390BE8BCA1F4B91B50946432A49E60F172C7429
021B4EA191A19A2C08972C535DAA3639B351C8EF330672C958464EE94D024861
06E74890AE46E8806E09B1B0527FEB50212522C8D4156C9152A277F5C0D54167
E37CA1A49A7A8B565A43E91FF394AFFB601F0E1003A8BE0F7763DFEA83C12AAD
D1B6B6C6D64629BDED7AA56C7314E0DE18B061FBDFF9AEFEF7BBEAB01D01195C
D56464B9DE8BEA1505CC665B93D7F66D5A056FC7D759D4299F491570B72F309C
93771A135FDC321715AC7CE4A3CF248DC5653C772D06D80F724965A5DDE1E2D6
592BC3C82DFBAFB1E18CF37FD73BED3ED3ABBE9F264DF5FC0C8CA3E5F90FE69D
7524D8AAF29905ECD4087486C3BC3BA45477A010174D514A9C43879D8D13F6B2
4282C90BDBE389CED1967ABD76A210E24E75EF1C06A550EB524E7C2B73E88FA8
DDC551BB615F14C511CEB230B906E648AE0381C52A1E6D7F3FE7EFB833FDD1ED
2C6E9FF856E05B2BE7B7EB5A6FBBE404E2A5F6FF00D2F662E0214FF4A2360F72
96C92B04760E9C6C616A7B0A4AF9942732B3312A2E70F4703BF08443CC7F8A03
D617796C8D750304E9F61D619F3F90715A76DBF57784BCD075EB65E7D310C3DC
498EE2093FB2AE3D37EEBD4D7B418A019F2AEB94773574AF923C374BA81AAEF2
95C6AB7DD45EB4EDF6B954CEBC8B023514D37712FBDC504BF7F124336AAD4CDF
A6045923AB9B445F3D28A2715EF8DF43030A2EFAFD1DED9D5E4A7E90AB2E77C3
A4F5966723F07B048A35466A6D260A06995B2D00C9F6A8837A49D6539F5DB1C1
989464129284A50ECBCC19CEFDBB6560258410FF7518391DF7E101B2E36D4637
085DB251503444865331CF1AC572D50A7E18D422A52DEF62E9C33F5BEB9C2EAA
7703C15B1D1DE945308E9FA549063C8E656B5476A66C330DF8E47E6FB798B351
2537272E81C289B8919A64A57E8148E24AED2400613EEFF3CAC487959CD29B78
E5E72AB5407E43998ABE5710062BC99149A35C57B260047D59B677CEB6C24D1A
F635FA68B5C82E7AC13C7BA3645C34B16FD367B489D07D7BF3BA998726FCFA82
AC8565E23A16697EB1B3CB2BD027C96D69F963F3318C57280111F1150FAB6E54
C9A00797AEC53893AFFBAE8BCDAF2AE53000DBB62497C198A87FDA29FB63B0F6
68D0E0A1DF793335B7A9FEDACA97DACB0B3BB5C35B099FAF55AEC482E10E9BB7
192F87B72ACFDEDD57247BA6848881CAF999AD54DDEE12C27DE49DDED6BFB91C
CE7D9AC6340010DE64A1019319E3096FD8989FC5C093A8215D5D87F120799F33
50AE5DDB7450C0CAD867C5A9E77CC2037E78D4FD3497EBE63302DB401FC26948
B215A24681E92D2E498E8DE6DC3E216F728D89D06EA5960EEAFFA4BE25B19114
FEE0A12C240CD8679CF2B600C936BE1407AF1F54A658596ECBA121403FA454D0
28B3186F93B271E7972AEEACC0F30842B8E83AC447D32B0A258F6696E017DE1C
5E0F5879A81D89B2023D7BD452E73137494F76C572C1A4593DA96B4D31E8D6D5
E8F28B24BB826EAE9ABF10D117F9D3E0878EAF2A8E07C7106BF6913F1DD41A54
A36382153169C57BFA5BD6253964DD43C9DEA2CCE4F73284CE6F2E298B6B357A
C2EBB31217124E8A50CFE2687882D304CFE1A4269E5E4369DB03AFB4F758E91C
11C1E067598E1B8FA19449A2DBC3A2FD5324EB8230F9DE2487684FFAB4093210
8ED69CDA2F20BF5C8B3C50D9A52C0091F2532C4C19976E04B58E70AE0328A96C
BF2B45DBF7E244FF83A7FC4FCC790C307700315E8E3AECA3FB8B3BB425B6B17E
516CABCDF5A6914FD502AEF1F6F6E2C5C8FE822A6AADEC5297A293C02937B0EF
0819C2BB803B6B793B95A4D6BDB195AE75212590E55EA927A0246801627ACDC2
FF46FBC88FECAA2ABE750E915A6CA0873B2AF897E797EA6A95E2202A51DE6928
30CEE8B43DF068CA5E4794E7BE86C8FAEBA2626519F75B5F9C18B7D725751821
C8FEE0E6B020173D8206CD9FC5CFAEDB24D242E49D323BC7D3D6ECC7F89EDF28
00CC5634627561496DB3670C83FD027ACC248BDBE5E056B843E07E173D9CFE1C
AB25ACDDD048F9023FD728D2D12E587DA7B7689D74E0965F73E0EF8175EAA84F
85CA19D9FF7B56091AB661DEA379A280EB9980C16445149F2A1B8CA79708E4B9
2ED2DA625BB3315A4FCD68E100AB869A2986F0715D168C0DE8CC5D32447D0CE7
DB686DDE465212B3F1FE6A5A10F02E5ABDCDE5D82AA6BD32A5A5569800C1EE50
A36482D166419F3CC5099E9CE0999C0812E6BD84E74453BDDC71B62C27766875
0082111250F998C0C79B2B6E859B59A29F51E4A9887CD73DDA0D8DB58AB5E7EC
E43FA2DA3F6CE6F41EB22F5A92F0FEF9A4742DCB0E5E73CF909A20045A27C28A
EE8B8FBB54F08BA3AF66DA4E88A6FD04C4D1AA9ACBD4720BEAED999020B01CD2
F176ACB3B40C2AD6E37553FE08309464F85C3E839DDC16CD4017686DC3079B9F
15DE202D6F8BA6AD48D93642C7BD11BEAC2CF89DB02DCC30A54D6E8B44B7289E
D8B4CAEA0B0ED37F9EFAE47FA4A7EB694F4301211E60507280605EDB2DF8760A
2EC458E20DFF453FE2BF2E1C37EBAD907E2557E4B86194EB2609BB2B9692CECE
617CF68638028703894C9B99EAB171FD8BC19C3C9EB59C0AE7393ABAAE317BE5
739B7B3BD19E1BFE32177F2C67E435D9433053CB2E4C785CADE0B6A5D3184CDF
0D4ACDEB1C7259461BBCE6885517C3AEEF9A0A9914A234AD932FD6AA920BDE56
58D8691127DEBB5B50F0335693231295B2FE8226C328E18D804923A00CE20B3F
EED7BD0DDCE24FCF364B0DAFCC039402F240750657977FADFBD242AEA003CAE4
7966EE4B6A33DC92C5490B4007D1E393449D509579650E646A065D54C74EFC24
992CF62CE6684A87B1385CAD8EA4DFD8239010817727FA27B0E3F70CE31A6B9A
FC30B317EB57BB11BA3E39071D691BB49C0C5C0C9D4BFE52845A80DD9961A651
F5944E440124BDFED978189A3285E75B89A53AE7EAB4AA9545B1C6E8517D66FC
A88BA28999D6E4A21FBA90BFBBE07EFFEFA09041FA7FCED873E5E7602683E8F0
DF613F07EDF888660011F1A2B7CB39ABEED7EF6BAF81D167A5BA2C2C6ED416AE
66126E38BA1A51A28977E3AF1919445C434D4EF1B442E89620DDB62D650763F5
EF59E908C9F00E60B2BA2182E2CBB009AEC889B4F6866D4140AEB4318FDD9A16
483BEB00217E5320AACD2AF0CDCE5B3522F28EF9E8FD54E8DA1FF28D12D6B591
F1A55F00F892C767894C0EDED7C6BD029122F7C1B96F0EAAB791D19B0A5E0B91
7121910B323E0DF559F1BD853DE33C01B312533A6A408C35BFA7760362488D37
C5BE611E9A488A7400E9DBE9E1387CC635EA3C1D5B0DACC1788B9E62CC545779
F8F2176CE41EC2B3DF7D536993F0392E928A1F20F15FC88947F2259C9AC2FCCC
886594C3D1DFEDF59FC7991E30E538EA282B97EBBF6CB6887B45E33ACD0D3932
8466F7B35D43A7A94FD736C55A275D939BD09C775EE9B1C3B1D24C285191CBBD
78AB420995AD042C35FDD6825D7FBDD311B1CD252C8B471986BBAEA3D11AC0D1
2590B7BB874D26DFF13E6A1981DBC69BAE53EB3FA5D85CB6363CA9ECEEEE52A7
167973D48046DC78E21628D37CCC60D6824FB3D9AC601F550D8BD17DB755E60D
BDF786F18A838536F3FE0CE6F74A5593DBA9FE1F9F7A5B4FCDBB2845AB64725A
3BBBF30AFC5E0AED54074004E3050383C502F04B1B6642AE8AE51D6655717639
9F8315997449A8C128876A2B882B19F5A42B3ABD17691385E4265FC97C0B7765
5C680BD23DD4499D88E9AF66587D0F331867651D56753944D0ABCD408D17AFDD
DF8367A67E88F2E7411B377493E6B60D8F01120F9F4F03B0B331DBC885241306
25B70FF9B31D8DC46EC3D9ED8095460E19F9B46BB9F995FE94EE2908A5EA2B00
CE83B83A3AF75DB1829084F369E00391D4343CD6E7FE7BA34C7F2C9A1A7FBEB3
B6C103F633F3FC8B2A439E59C63E5B07DF0562DFA951B6DF8BFE6C2EDD671E43
B0E1E62C81C498018148295677CBDE7204D3A5C78F6CC832791E384777777537
04E4C39F6C46ED173F8C4EEDF8ACEB87BC773D2549D6D74DAB538C2809D4A6FE
78063DA2B21422DEF36EE30695E7108F1C5F22E833B68D819C80DD050FC4AA86
1027E030B0C06E669B098D551E75C9A004D647F8A95C9DC17D2740848C3B02C0
4D9E8A7410DDDB927F5086E3AD402ABF220701001977C4F4FC48D900347A6854
C768BFB85F8D300FA788CA489B6F4238E2CB11973398CE7B19B22A877D6A8120
16384F6546C39D3DBD1FD04EADE6259B99859A65C144F82A964CB56DA11B12A6
43022BA9CDF2FA93ECF3ABE36D414842097027C3C771B556A157918F2CA4FB1C
B68EF960D01A54E1BD354CB50F56EF46402BFBA4BDB61EE45F2B1418BAAC27D1
DB8E92FF74C1C336B45F1810B7594E7E4E6A920AB0E70D6264972446B7EC17AD
3AA1D11C0833D6EEBCCBA265C64B2B280E51C76C276339139566DE3A93DCD99C
709D640B155D287D01AC3031E1E7AE5E185AF7FFE9B11D2904AC87539392EA31
DFAE99C50CA17B7D076C6009475F81CDC7103FB4974E31F83CA27E5D796A23BE
194477E3CCE75E31A379E70A7EDD762D06673453A3C4C377FD91FDEAA03E8C62
9EF0E86F51FA65C71530EEFE823186355E912CE9218A46EDBA512F4312832B74
26BFB35CDB2F8DE2ECEF1E8572AB098AE00EFB5043400796A301601BA963415E
A4B8DD3380C5439FB22B440B8A2DBAA5A34108A018DBFC1FCF565F8F089C5890
6FB1EB6FA955045A930A3F2EC1E7F2FD6BBB7A442C60C270EE7CD124D46C6D24
DD618B782AA29CB0B30F7AC7C57CA7F26DEFAB2685901D7B192D35E89342E8D0
0FBC02923EDA1B2CB0D3A2166DAC0805F0F14375305720D29A1451912F4A776C
D884C77928BA15A40036FEC0709D6C38E47E7241E23D0CBBCDE0218E6BB90C96
AD41749214FD9CB4A0C4E8FD202CDC5E5A11FD280EFBA4612765607035965253
6BC1176C0E1362EC94823101E31B9DA75BB9DEAE1DD42803E0FDC1E7ABA91597
6C99B380E553A4F0EE9BBAE2C2034613631837410E4D408CC306661DF6876EBF
F2B1E990D07CD323CC5E4E2D1A6B9A207C73D6FD34403350375B866268401CCB
260BF6FD12A7960E55E97C400EC7E1709AC7299196A7A874B7AB8E2EDC1C4DF8
C38E89CE919F2A837D1390459CFDB7B1535C7B84D44194ECBCAD9BD4E242261D
BB9491F445114FB265E238F5DC63F261BB4E4F8E5594FA9C4229B1035587B3F3
39B6EED2970CC423D0477175D39631AA7E6E811353D344022AB91C8A9ACF420F
2197D7BDFACCEBF32AF67C872D90478F15AD65AD804CBDF5DB951054DF1E8A68
FD34AFE33ACA2E51B9B33866AB214C10818B30F37C73E9F3C74E1469C6BCBA90
B74ABAC8C5DC16EDAAB4E2C0FBFF0293C0AAF406FF7D66E59A26118A78F1B9B5
994DEBD48FC67688F86F2C4BB7286C2C12D30E2ED1D2369BB2C8CF1A8F2E2F40
DF97D528ADB4433BC039AC4E49CD32A2F79AA44510B1A8C7C82DFBEA9C1AF600
44438D241F24AC95E034A82480DAE2C1E7E7E025955D495FEEE1359584E733CF
AA7788AC2ADF052007F9104B56FD1F88EE2275D80DC54D63A409D01F64C262AE
FD0B928C43719555CDECAA0F42E3D62DF698FC41B918443EF7BCFA351166A090
7B98F4B58AF0C4594CB8C59DB05CDC0A1A9AFA083EF443EEFE9F33E25E553C45
267BD107383FCE44FF5AD021E90F56634C81E36160C6971F4255BCFA95FF3464
71992664CF2964CE1CEF73BF89C86381A1B3B7EC50649153B68F0B96EB70BF67
98BA5647002223AFB1A9262BB104040B84C13AA3B537309214DC596000C278EA
A0F87CD5567644A59F908F2D897E22ECCEC3099A4DAB23C8578E9B02070F155F
A393C7F4CBBF8A7D8D9A891A07AB5B9DB1BF441245C196E894130E1514F328E7
823E72EC6C08CE6305E0BB9DA4CD01145EDEE320296EFC860D2A57D7BBCB883F
4C98E8F15204A530C9777AD0ADA878298A65B349B695304F083AC617954A4755
6517F8F1260D275E57BA427EFDD9FF3F1D3E712800D428B34499643AF9350EAC
AAAABFAC64FB710565DE42D0B56740752159A03BF31212E76F72DBBC630E233E
0019E76A7776F3E728401A77A210596EAD6773C130A7853B26316F8216E2A479
55C670C8CFB01373D32BA617B236EAA20B026C176CBC968560E25A75F5C0D541
67E37CA1A49A7A8B565A467AB5591A3267B1335BA15AD2502BDB72A266C0F206
196B9530BDA8DDB85E1547F97CFEBC899A20670FD8FE02480F8E39492564EAAE
DA01FE55175AC439F1C0056BA4800160D0B7D57626E991D425FB6CF525A89982
5942C6F19AE914D2E24A596DEF299974B7162E4560851F4EBC981F2CBD2F0A59
D3C6378B6BBE755599AA8F8BA15DE5277152AB8B98D4A8F75A7B3815000DCFAA
2AE0C04910CC08351F388C1D7613BABB9017E6E2738B4C0AF672BAD63D84C9DF
997D62692E32734DEB32AFD7EC35F23A9FA75AE50BCCB57DC8D291C80031EE6C
CB9DEF18F9A1736834F739AAD6452420E36140620979205DC64C21629C02D84B
D2C3E9476FB0F676D463A9BC62C976AB157CDE065F075D57D8FE5003B8279A16
E5786CF498EB271C57922DAFC8C3956CDD4BB412DA316400AC3CDD38653DCBF6
09A6B8F3897472CC01C22DF26B89097220FD750AA12F6C0E84CC16768529050F
C96598920E77EC92700ACAD8E57391C404F292CCEE4FCBC73A846D1C8E6E3F08
11281FE59FD806894A7261C714D6D0832275F74E2FEF669D0FC89585BAD6B238
14FA23EF78A2CEB242D52C65BB0044F0D6FFF39DE84351DB0127AF835DEE4458
2511812CF4D7831CD9B5E2C1E7DF0602DB13FC06480BB69147065CBDBF42C977
C0EE614B5D134A5753E773231CE797F60F76DF3EE5C4DC7FF6B6F7C61A19AF5F
46FE2E11BFFA2ECD37B48573D662A7F38091028DBA6CDEA87C3163ACC9A760F6
8D73A3734B8EC9D803D2BC0B2C347C2F9BB547E60E0FC1BC93C079750883C24A
5B50198124D7AE0C602130444C94DC520D599788A86F9096A0F39C297A10E15E
5BDE06BB23B881F67B846BDD490CC37EA7F5250442E8E9D562C90945404C593D
C3AD71487B4B93F9E9E6FDE07B162D1C85837CDD30884DDC2ED5F6E090F48C5B
1D84003320504287EC58C2D85930BE230E07739AE764A2B7D570404BCCB9D5DC
3BEF9823B46FB6FB60E18DDA9D18F1FE61E66053048FC21013D174F16C6DD7B4
82C08FFDCDC4D01FF394AFFB601F0E1003A8BE0F776662FFD229457E0C257F51
2CCD5E1F43E983CF9EBC9FB3375A9AFFC80FDC10ED8071ECC1BF56E9A849C1D9
021BB92D9DFDD48620BC1E78C864109F2AA3187F5A76A7B6CB6F48011720F667
6C0B3229CB7002CEFCCA066CA4CEDC2F166DCB3CE4516169FB0C68E3ACD74E17
5921F2A97CE4E6F05AB723A1B3FF0FA14BF00B917586DA03B6E384BA8BAEC9A1
59E721EAFAAEC5857F176FC19609A31F0C76FE020781065DB3350D240836B736
4A3F29CFD0DF347C7757429B3ED5E276773586D348B45976141532ED6E5B8E62
CCBCA3FB2848809216E7F0C41AEEDF1DA499879F4B249522FFD1849213B0ABAF
27BD4EFEA70EE32CAEECF607FE14DBB01D5F186B2BF3DC5805E27E9ED87FE65C
7F1BF8FE2E9DF7E5DDD199727251C2930C7FF181D407937CB47DC0EA3FDE8191
20E8E0C42B085B6465A45A906093B5D96C9080EA874898A18266569DC14E194A
C3785C15F962CD1669D1818762AA2D105F620080E69972F10B1343907893DF78
111374423EF3F4FF58DC8A4EBF03DFB86A9F324F146E8AB89BFED476AC0094E1
8907D51ED4D40256BAA74303D3F20B50CBDC31EDEA9474963E4C8155F713FEEC
D12D36C09D3484710193D79B9B3EACA8B297D23474A7DB1157A5F192F2646BF7
F752E0BBC29C261AB684901C5C5A43ED712ACA846CC93BE0E687CB44B3582AF9
C2D26CCF5320D31C0D40B626465D670AFD502DF5FA1C8F4A42F9E8F6C860B394
6D7234C5770F999680F0CB97047CD28566C527C855E214ABBD8F939A4E524000
0BD4D17370D21A9B90F8829CB25125E2562529D99246B2B667E66597863E12A8
8DD8305E833A81740282B41DFD4432A7E28A5B1C4242B5B5E3914D317BD4456E
FD74A8AA4A50D4B97B6CF2CFBC283E7B689AC4AD68F2F2F16D6564708CBA4437
AAD1B718404261224F728990E0B26BFA2FBC5583E132CB0122FFE55A492FDB8B
2E21D4251364A3D5D27E83C2F379BDF7BAFB7CC4A5D8FF15BAE46A5657A6F517
5276FEB2749F87C9FD6583B83A9E85CE3AFC0296B21D3504F8843C0FEC7288B0
7A54371280C87FDB21B10048D8D6AFB7F965EE29C16A4EDE1B93153983953F35
9219DBEDD47795F63B242F6ABE5AE0F8C80B693FBFBD609FFAA31D849F40CA59
358EC8570A237EE14350E7A6DD91366CB812A33AF840CDCBE98C242D45A0A390
5AE977EF13BA06021B4771844C6D0585F8CB68083E1E18979BCBF2B4BE4F0373
5DA41A94409CA6FA9B2BC8B5DBA0D64874814683DA17825376C970BE93F24048
376E706291B6B280F49EFE8B02116B9FEC013516E4AD91799B6A93858784B821
51FAE39A4A0118595CAA6C23D8D69DF33B3A8B27F14E7BA5E52E1B0CC8FA770F
5A9F466E3941757E98B199BD156464C37BDE965CE1854E36A83CB092607B30F8
A7FD3F4A4C5DA1B2BA30F234534CB0FB5AA0612EB431882627F9AE3E7E279FCE
CD3C4CD7BB8EE3279079C9898BA278E3ADF09CBB557E725C7312BF338F5F65EF
DBC5A3974A76A3C53893AFFBAE8BCDAF2AE53000DBB398543C3750EE766974C8
8578EB7722F2CEA0A48D5237009C7C55C4A8621B96436242AD3DBFF172C4281B
98F0FA313458E50D021476E0E73CAD5C2CB0FFC129F4BF3409359C7E716428D0
0EE57AE742531892BB3AAAA25F33FE25AA696A2DAA27B87BBB7ECA6E25534916
68214C9202F32BDBB44F3C4C4406024A02401825974FBE0C17422B71F1FE4F38
5D3EA85FE76FF807267C096C415EA48849F95B51617E1F63F82E17458FABB585
11BE50A8C9E9055C696E6BC9DB8E4802CE9B98B93DF8FC387EE8848EEAE0C211
9F4C4138732AAB5D69D4A30E7BE6BF7928523A9034D6739D10729D35561B8BAA
0E7564DC37FFF9B57D691A2726C406448326239608AB800C137226EB16D3762E
4F749A571A325830309EFB9C6BC4DCA4321AD806435706C3DD520C293DA5C1A2
8004A653E838F10629DC2A245FDFB7ACD82556A0D4E64824088226014B40B0FF
6C2131F6FA30DFE295B9B64C7154099A1C24F67E53DA34DE10D993DA937B4742
09957BC4428FD4BAFA99438F3A8B7D32CCCB8E6CA24FA190CD5F09A8757484E8
2BA799670AA29A6A7F44262EEDB49BD40F01CD4E367FA59676E6BCCD2299E893
ABDC35A19A5E70CF7C8C858F98FA558A72CEFDCFAF08B538019F6CACE20A956D
4352BE07A66C6B3FC432808B9EBAB6113E09ECB1A93860F09352255F29DFE999
E95C1CF013229A55592F38F5C85CD774A47F970EEFBFA9868F60476F684CA906
8A365DD2BDC069A964E7CDC3795E04A7B420DEC645050117BFFB2131781F3234
B3803A4FF311D28698F7ABE0C01482F21340FA5A1647F7FE4DD583EABF4D02E0
F34C337ADEA7201CDAE0E7E098F2421692912E83AF2E7CD81AEA322034F72E40
DE350E4DB055DC86637A13059C78B36E5FA1B84B0BEADB59314AE0FE59C997D3
F5E34AE3763445066B2139F4B0905AE9118C53A7C56FAEF893615C445982FBB9
1D490F2E2E5FB5B88D1041310FA2C9C1A7CB7CACB6A822FF706460832D64B6B8
5485406D7DBE4D8232159C00BF64F572186B74DBE2CA7D3FB0E35B0273A30763
A21B398ED92CBB70AEA3C567AACB6CD5BBDF8262BB34C04344621F2B06743E88
05314305B48621F258E2ED8CE0DED0963342019AC8AC73DCA15789ADEF9BA533
20E220317B969B5E915AAC8DEF3F736DE09BAFDC235959AD745E090CDB32AC80
69DF7783C71E32804F0757B0DF7DE7BA07275F8BD5395DCD50B57E1C718144F0
56C3C342540277D26CC540BFEECF136AC5D9070BA9AA6BA6E3A1D88C1181220A
21045B4CD8A3528B037CD15ED19A98B943B445C2E3627A22452DA206D0E8B28A
56027423CA39AA7EF038F5EB123E99871A0AE690E4E750565C6A63D4E868BD54
AD7D7AA45F96AD8E564418990D646C88671D8A92A889A2E408C716213F9F08DF
C47CDE1B82FD19C81CDAD3AB1DD6EDDB2FE4653779807E5E79F0B04F4F790CC2
2C491F34FCBDFF2BE50B480D918A8C8A18DB8D5FAFC084937A84EE90AE9B4839
9D901F1DF580DD3A6918CD4165D8CA3E5FC003D7BFAA8C90944A7FE24707CB1E
82E21694223DF25C28336876AB2133D97B079CD0F664D76C05F396363CBF85DC
3289F6154F2FC6BEEBCBFC37CDE8AA255D3EDA7ACB7EB397CB252A5AE7DDFF04
A5C92AC06FF1B6A11A2B9CEE6740095586AD5E770DAFD1E3DD1A8970EC9B4507
808F5F4159B4C854F752CE74153C113FD9C6C13369902A3E06D8003492106F16
A51D5560024696A05E49EAA00EC860881991658CA1518CC1CF5F2124456C8919
0597DD1DCEE34274535EE57CBE03C44D9C76A342EDCB4B69B574DF3FC37D2D54
9770FC72F99D376BFD72358862A7F5CD9AC21A81F8D0D27FC106DB28A415E49E
919F3B159DB30AE8CF0E540B293844AA1AF3A022D2DF53F35C5874A920443224
3E66A9837BB94367D369E48C4BD45316058CB880E4A8B52B4FAB6B476116003E
E68C1F27232312DF17A2BA9117A04DD4972C1847C7B4470615EBEC382E1A08C5
2C3D603620A7B6378B5950B5528FE5DC000A83A571F3BCDB0E296DC294532423
3B0B81B3B1369165368835074B715430A1A6BE8CD524822FCBFF2A96A13C3439
53EA0EC809ACDE4EAF6B6BD22DC814CD002BBC946D00C9BA23EE4AF74BD7F77D
2A5F15507EEBC57EEDE501514060495E1EF2E04AEB65F8D848BF05D023F8E4D8
C2B11A3285C5EDAFE87D4CA1D9EA28138EC4E3EB6507FBEDF13EABFF7DF1748D
55DBBEF36204978159C15522175FD69B149347E4404F4EF82F53AE0A1AFFEF6E
D12854A2EDE2E31162C55DF48F36A276C821A76E1BB57A832696D2B0D7F49803
AAA15BC84585FB258608A28FD3E3507DE33752DEA3AF4B430461D734ACFCBCB4
8ED4E16AFE0B47AC73060FFA36993AC92322509C43F00599C677E45907020FD2
1B67491EA1A5712C10B5EDA17A087B9D4AE17452DFAB645A0FA81F5CFE4B69A9
A00A693D7B13CCE35BA1B434C407B32DBE8E14E2A2F80D461FA4672FCFC9735F
D70E571CDBDB1C5DBCF8361D0F06286DDF36F350E6CDA0B48771C6B0B22F810B
1E6A8B2326389F40090C86C3D6AC963A9CAFA138C2FFD97B49B6A6C69B5C346F
FA48AB9FA826A5920EC13FDDD690D86E3747CD4C22691BCBBA6DF03374AE1878
18120A581EE4BA3A3D224D37631107E5ABE5593079364339A069B5234909A3D9
59C0CA49C829E7F4590F4E82864A3087F50E66F22830590B0E124BA3FC4E15D7
BF835E50A2259A2AD258D07D821244D8F6758AD8EDD2F278F39192EA0BEEF05C
B2BA47777B96880EEA1F232517DB2664462BF3323E83FC33928102C6BD233244
2AC1F5EA1E46018B6646363AA4B1A3ED97816BF263A7111F394D1C1964FE4D7D
1EC75DD30FFA838F1FC9B1A9495F078853765676D66A2B9932A68DA0C49119C5
894930207AD73E346AD3EC941AC52C5F431021FA1162C6EDBF55D60BBAB4DA4E
B7FE9138C75446DC1F616782CBFE9F41EE939F0B70C0629017559680DD64C2DF
F637B963F4C335429B52B488378709D21BDDDDFA54099275D6599C065FEA0FA3
50AF2C30222D4443A2041D0A2DD3684BFE35F97D383EC46441976EFFE6530673
C6B420BAFC02F0252AA3E482CF0071AF53063AA1F8C8211ED678B025EB26539B
88639EDD17F9A3EF812CA0A6B5E38C8F7F9FB9C7F3DB26FD1F07D22408F17A43
BC9CEA6C1AC736AA79C6670BDDECB10CD108DE3B6F69E07A98C79370091B598F
3EA47A05C91823B49362B6B7510B80F54CF8FF97C1EE1C89450D46F04BDDB4F0
3853CCC9DBC6A75AF8215CE70DB979B423686F02528335B7F6F393578EB85F25
88A30E7C12D001F9632AC0DB4720C8EF638B80185D0D731673BD310BFCA9AB9D
91A8BA07950095373786A7061F45267ADE18954DCA34A3D207A2C366E3508B50
998BFDE175FB82C590D696FE1F368D08A9064AA49EED5387E2C3663B6E699200
02BC14614CF062D60E39307A8378E6E53AB14503ACC2F251A6A53204987CEEC9
8C18391FF30CBC43DB965EB7F4A9E34C9B46BD493575C8DDCF50F0EFADF89E30
C9C9583F7418208582BAC6F853067779EB1D51AED924F670DC36A058D854EF88
CF6C3788C6F8E69E98C87EEFCA4D770BA4AE67687E7050EA8DA58593C2B7F69B
6BB3D240B8DB25FAA70336B69B513260D328868544E9E898002DA0723145F65F
8F65E3F1330070BC1E4B398D27A3E400588F0BFC0BC5B46D7CAD2B3642E4AFD8
B4930B1A47C4979D698C6C3C9EBF79914DE6B3CF0E457E84CC6329B1C4C40F94
817F39C60E78B6DDC9E126204E74D09024A45102AED721A7AAFB9BAB63115497
C45E59D5D1C20BA9ED3900804B1F6F171E895F794923D388447006C5C841BA97
DB63D7F06AF7D426C8EAA87BEE923EE4A29D63250CE354CC519D83F647677127
757E9DA0E5B18A8EA5AA9F6C68DA659408CE21E021FE6381E0D16B771B732660
D142CA83A148A8C405B4982DE90C1804A5DA6AC3D248050FB67BE536AA59AA3E
257D55821DD5260302608B8F38B3D75A88A003921CFDFC98684D641834F37A65
93D50A1F77756356E7B7FB122930AEE3C416ACAB635066FC7E942B05C734C006
E393A0DD1F244A8DF112E2887EA822F4179D07FE498CC4B1AB154F9CA7A8C938
3BA0D05B8BE6428F1FAE01E7B5C414D648F1D9EC1F108DB40D6D3BB65518BBA2
9D28A97BACA5A121301A5E68A1A15D149E8368511F6FBC9A79D31A12DC9098FB
B821CC78675EBC0DDCB40FAF89C90D3F2A12CBFF442BF1162F3D877685900331
7412F934AECF0B2514FCEC0D663B98CB57FD1E1C8C60AF2707F9566BF0E47B11
436A5AF22DA1FC4593F36DF8312C24B2CC1E056BD76EF04B1CA7C416A06A0697
DCA7839B772837B91DF6F3F653CFC8423F2E235F7FFDDE9D6FA15F9827680F9C
91CF72FCB63B550840B0748AF429EB1CBC88EC708DFCB7EDB71293571E820B9B
5405FB578D841F26BAED77084C49473788BFB6F2BBD903AC724BEB6B6E047DF5
0E8E21BCF3D3AD556BF945A172596735590A9E7195DD93C8B2358DF51B09B34A
1C74CC17AD48C3064F254128BA327FB60FFC58468C7650E8B30009DC275FC1B5
E23A634AB56A225AEC223D0E0A5D8024DD3889B50677CB1564BC7B58829FAB97
8A27CFF891D70213BD9C4933CF78CC7E2EEE2EC95E39FE65DA56B8747CFE885A
260CCDAB128E6A81FB0D33
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1728
%!FontType1-1.0: SFBX1728 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1728, tcbx1728, labx1728, lbbx1728, lcbx1728, rxbx1728.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1728 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-213 -316 1617 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76EFC613FE56C
378A7118B11F76344E713CD26DF030756573726C0D62366E1E342C8312BA05E1
B0A074FCD2F70DF2F3D7C98495CD207B000C61643DFD1BC8834F0BFF8484922E
5C9E7117B50B56B283D9B837194FE4A134EF5BB803C17804BDF1A1D105BA681E
842148BA9977C9DD073D4BAA4730B0841A1F49FD91315FE66DFEE18E021128B3
B5191A215A8851799794539DE22671D92BD7876EE885B34F5A81B541C4165575
90458A8C4B43A6C0F80F4074350F3E459CBF7B410D5E4D8C5AE8D28D61854CFF
FC46BB845B8CC7A3AB794BCD69E2EEAA4A8E5FABFD2C05FF6C847801476FA15B
2E58525C34637D9D0336BD35F96E99F10358C7A36A89113FB06342DBACE1A098
F5BAEF0318FC90C9ACF0B52D47C77FC9FEAEFB5DD47F302635953A1E8F56045C
AF090FE879C1D45C713AD3FA559C43C5E5C13C1B0D6B241A7857B6F8DFECA41A
27A79DB116BB13E0348F76B2A073FA3CDCA420E12AEA57B7D3A82928C1E8B6F2
2E32DA0CB2EEA2A88F43738CCD32D764ADF56E6B16B07AF64C39924894404D34
617AED4D17985D7C26D6F573F386D1F0E5E8DDE90C6AA6E3A2617468C2BC9585
57EF74CAC582DFCAB70A0EB7B3759A299A658A8F29124B759B2DD2DC3B8B90B4
8E82E946CB85818063C52AC2D428E67C012A5B31F8890CD16D900DF0B0C18120
C96178735C77AF5FE1750C651C66A05B0B6753A37CF300EAE7808C83DBC4D23F
D0BBBE3D8D0B8D1E0D12BB3BF4396E82BECE488B5F91132223FD13FA382BBDBB
1B17C81F578FA818A1BEB4B96665D9614442695BE9B91943D269C67B6E0BE615
58FF7F67294023A9360A02C3245006271D618FA74BF0B8E4DFB2332F37891695
920917664559BD8C8B15B6983EC66F7B9ED637163BDB11717FE74E4F43DFD9CA
98FADAE7294CC29F9AE6DC998C94F927EC7C0EF1DF2859681D7B7E14465CEC4C
B929B7D0C6ED82394199D10A9C7EEECC087D030A79B71C2BA4FC79144B9A7176
582C49B933DB03DDFF8DAE058D243EA38C0AB42B1DEFE1678544F60DA7E9AE6C
C9EAFFA5DAE985DE05253118286DAA531468932E60C19CA8BAE9D9C7350A4E7B
DA55E226A9286987A49CE9FE3721F4456EBDD60C98FD5D96D210B72151FAE39A
4A0118595CAA6C23D8D0E623CF61B4F8D7CD12BBBBD91F79D3C329931A3C6804
19A924C8D725F63A6FFD94E07D7E8C8304DB4BACA2959D02E0B81970B3725696
CDE1CC45A2A57156568B729547F644E6A6A4C6F578A70E297A70470569C41E17
7E43DEAD4EAA7809F0E8FEAF54B791C66250CD15B41E36C19D3B5ABD6D38B7A5
9497EB2766A7B9144A73D3D91DD10CDEDDD570721F1070AC2FD3C7ECC5A6CBAF
5223591B38C40C1D18D9E69011842BEB197375BA402619D4801255B97133901E
18246096765099A86BD0047C22E118071122AB0922C46F888131DE25BD16470A
FB5BE1E99220331D09242A2357386BFD24B880132C032BCA7722437DABB64C2C
4C75F00754B156921AAE03F80443F9EF0D9EC4E83BB4DEF74A9A9B3C2F2813A3
E168C88A9959FCFE317CB42E81E779AA4CEE9FD614A2976D8E37315808DCCEFF
486F469D3CE190839BC4EA48063D92EFF51EFE6AD62CE7EC7BFC296F3D52DA94
FF37C018A5211FAE93596557D704958946A2577B594C63EDBA2EEC177A00E2B2
2593F7EDADA3A7DD72A46DA7102DEB1931F06AAF99EC680F3D129C0B69B37B30
E5E7D817AB38790E872C8ED31B9D180162C62F9C5DE49C03FB770A2DFD72B9B6
DFACA0F900D11DA855BC5C2F8420DB90071C839E07D088EE8EE8C2FFB4F8D1E8
19ACAC16BD36AF87384F0AC5A9B8CAD7CB4E0BEFAE042437BF1BF6B40C51C1A8
369449470236D719FF67F353C86C4A787731C8A0A3D3093085EDE7AB369BD6EB
FA968FE2E10C45F01236F007677E6008BE68A14AA6A82D7D75668EB7B11692E7
465EA15FA179EE0DE003EF1F25E1198097FADA94D6502956CCAEB4F4706F4239
79D5E41798F8203B2AE3C43A9E1AA04CAB611AB045726F023EA28B64137AAE38
680AE01B9329ADB367F93B8E9B1167AD7BCD73721E6FCC916ED5DEC82E586EA6
7A010AC6052A54548AC082AC8D02FC2268D05999DD688729F3F5E35720B0C53E
84A0C26144A6D953333308486BA62BEEF51D7D6057E668F359480FBDAB220B82
B2DDD133F24CD77631FE7927D77987E5F7F0AC057A795976B7AEE041EC986824
D6BCDF7E7FAC2596297B4E8BE9B6319465E54A5E30A3702428C87586AF4B363D
6BA80AE73FECD914946831154D1E1490B39C6E136AAB5B0440D98AAA017F2ECC
C26A80223DAE6F2B4E679B9FA3604E6D6F0BD030AC26AB9474E349D99EA46B7E
B1417876712C05C5ADE2837CDA781388F3BFA21F9CCF16751CBF6B2BCCCA9ED6
E17F265E13307B78378D891008C268C635704A93491A61ADF481121EF214889A
270D62C37119C2C4ABA9B51ED1539D077B08384853B4B7F6857771761D430AE3
A03528370D5A1802C4036C098D21ED468F3E9D44276DFFF4415C9AB7E6A53F45
2D07A46F83FD094BBB2DC64E03B197865B66EEDCB85F0EA2FB5E3F46F2B700C5
D2DB7B00866D8E2129232FF44046CE2FC49F6B623073ABF39EFC821221884B84
5FF61B182E15F75B08A848639B90933AAA733CC8ECE6D689B0AAB18338671566
B9C035A87008DB930762E060FD35550469F4584D9684F502CF6B9AA62E763B13
816795FF5F6BCEB8469FFECA911F25F42C60B292811A5BDDE43B80C855AD23AC
A4E0BB2704A635B81D0CC5AB8A4A9A65844C7BD00595724B004DD1EE4350BC7A
D1A7CBCC867CF4C02FF5E93AC6728499C995F60E19B33727449DAD933548B7DD
2CCBA487DD73C8F7319921FE4166C38B7DDA88E236CA69164ACA286D07B7877B
352D5C29DDEFAFC58937CF160932D9BEB212690C53E8DD69A2E4C37FC7CF0448
93FE99730BAD8499A55DD367AE4E48E9DD4F9CBA6D04CCFF117FF695A29720DD
602EB86573E56B29B99A1B54108F1EC3EB57EAB91891E0B859F8A683E0C0996D
8B10A78F6212A11BD51209A50DC05BFC060501BA63E0B128386B7489260CDFD7
1199B0B01CFD0A818883AA1A56921214CF0DA84FD7702B3E48D4314F59BE8A74
441ACB0648FCED2EC03F553D14B6549AFD5D3886D09994591D4F6BA103142F7E
BCEF2B5445B1A539F42792242981E9AD0588BFE9EE1C31949B1D4DF98C4A9BE6
BDA7533667E0FC85ECA51101677A5BDAE986AC79E4AD12C8885B4FA1604C5F33
FDF897730FD46C23FC4AFC91A40ED5070100F1F63E4F222C687D1D9ACE68CF4B
0F34F73786F74D14766B6AFBCF3CFFB9754D86D02C6B14C7C6AEA0F49A0200F0
661BB55F93496D24B80EAF77C4678AA896DC536C15C267C8280C8520A55FF29A
67EC3AA9ECEEEE52A7167973D48046DC78E168AADF67DA3A075AF6AB20AD629B
8CDB3D9D1FD420987885AD25A54DF215557C0D81FA1EFD538A9C7A8785AD02D9
E467BA41B1449A84BA7CA4E06E62DF937E37F9117E9D935F01DD80A54683E962
767BDEF178B1674831F691C6FFDB6B9EC9174F7C133E259E1D3F8600C5C7F06F
212F2E2052DFAA444AA576977B5AF152AF9E26F6983600580BB15A721BE9EB5E
F8B280D751708592EDA8C529AFEAAC390FC3E5638C3C69B24E0ADEB7A795BC30
021797C9913A4D7D411C52FA6EB8828A1715026139E79E419A5B7A0C0178A340
92025AFE2459719FA4F4D1C99603AD3CDF38FDDE61F9698342F72A0232D1BAFA
E34301ACB03240C4618E0AF2E9D450350F6323B7C7DC07EBCD2FEE45FAE986C0
FAA4CE3F6863851C063848EE420DF02CBC20CEF169B12A66071F015A7CC26DDD
7C56066DAC01CC74E6444370978A689CF1DF8E35E7D2466DCC75D509D55F1710
BD60B0A8C79CC01B85FC933E648E4F1EA9F37D1CB4C4300F65A3554E9DB7010A
2F93DAF2A515163744F40D72DC6F4ED70B0DD23E1C4CA1744ADB50913EB7D59C
6DD37F99DA8E4B3F9DAB8D78E0171FF389EB30C3CBCD6EA6948863FC2CF8EFBD
F7ADB03535949CE4D14F9ADDB5FCC7314EF032F1FBA346FE9F894A7865039261
E6E1E8E85AEFBD4D0B1ADC4C374AB4DCE1E3403FAFF41294971E32E3308C05B0
FF1490F7B4C90965F4EECE5A774EE32A62CFBD1F227556506CFD0B79E121066B
447BE6F5E1A185047A5D824F896D3B578B21E7C496F4B6EE13FB5EDC3C728B59
8303C8B1EA6D28855E6327CF6312EC02FC81314163BA65BD839560F0AFD26CBF
F7E94C4C2495E9F2B1D346F644A8126EADC4813F8429A89A9BE6CB9B0E8A17AE
C868521C0D91F65EE4F0ACE83B90FE156D55A3E56C4B5AB14B663ED0CE9B5835
27E27D94A889582014C1F71B3398D4688CC97E0A3A9AEDB29E4E4C64F1EC1538
7D44FB96C3FD5C307A7C8069D2B7A3AF751CC15ACF3E0F23129000314F08D720
494DC237BA8F8ADF789662C3CD3024148B083F689451BE6D0131B866B55FF581
8E0727F002BA7F8297B080F552C366893D0506DFA91E59D21FC5F4D5016AAF1D
170D7EC69C249EC0E6EC885C0B9D3C86AF5DAA865481E288264DDE6381EB7E8B
C51B56A6A71CD2A4B04404E318FDA033E3DD43B4E0290FD2BB50CFF1E934F3F1
6299CA96C8EB0E8B59A6A52B3C5BEC13B783E6A8779A14C50A21B7AC2710E1A8
BEDF7FAE632A06A5667E17E76C718E993BA20F6DC3C0DA19728E5877674ACD0A
6DA597E2A731A4F7BBEFF24CBA496BED7E10B9714800B306B9070AC5A8442245
7C0B6DA6B33E24E81344714F15976BABCED1ED34C363274B611B2623F419FD47
5F9AD75D13D3F43680759C54CFCC7B0BDD9C038315FEBFA978A6810A66EC1276
F70C01115486DE46177DA4CC2B5E5830FDC83A9D7A88A14159B3A436BDE5E424
EEA7A69B500258AF10F2FA61EA1F01DADF945FE559BE96D5A445EDD7BEE1AF11
69B73D5963489C3175DB5CA612B4D67F849A6933E2720D5D8D96016F77E35C9D
FC6B4F475A6849AE18177D27092F47C4F5C8A89FB046875B417068EC5052CD76
122E3D1E16DE3563B3D691578C32C1FD38C233FED4D3A90568885BE9D168FA0E
CBD5EE19CE5099B4B4FD129ACB9E0AE0063B7C708F0F49D1B0B2E58B7BE02FFA
388ECF7A4CBBCB1EC272CC72C9E9DF98B901B7DF9912C78154450B77CCCE492B
A5A26A100D667F68C25488E50B02C9262BC51F45204FADC7E1A2C3735D447799
A4BAA23AB19D71CDAA96392891CF2ECD3B39DD543B37BD8CF179C4069C0149B2
CE743341AF685D686C2658E90924C7453B4BA99B518351664F5DC709A9B2FC17
7C706F2EB77EFCB31DD2AB6FA0B35416ABDDF153991D52A7C53CE895E27E5EB3
2D904BB5D2313A724DB416965C10531EC3868D10E9273B009DC8440D9435B786
CF4611FE852090BA99B69BE468C6C3024C8BA2929513F9CE9C81C416FCAA4020
4CFBE42943B5558994157DF999DD22E92290E6AC7243F6101C4F3A9D5000616E
A065EEC0DFD78D5F4FB33831ED23F61FE54EA2BDE42F5C0EB0B0690658A3230D
245348785C7C06D6F28C668AFE9C667072530AF552EB6B877B91785013686A6E
231F48A54326393AB1BDCB8F006317F6D48C4CC3AFDE38783E9CB13DA0C9E988
C82C6BAAE2FA86B3B7D3A09203AD7489DAE97E08179532AE10702A48C722ED81
84AF685E6DAFC6F9ABCD8FC6B682CA6765B6AA1356912E36ACF78CB2F20F09BD
3577B464F07EE376D53C51E8BF0DFE03973C6DA51E7180609CE5FA770A883D5D
0AD261A08E98A0F9EF2683B365EE48948E397F8CEB132C96468E4E39483B3C25
65649B536EB5B4104C2D1520C2B79BA80FA383485265451A6A0EFCB151272B47
EE4F18A96E3BB2ED9BFA09BFFFF066BCE8BE778849B98879FF7CA20EBB3FECDB
26A631F8804A6F855DFD6C2DB2943BEFB94955CE9DEAEF0BAA4540700EEB8528
A1EB39F378DD75488BD6D5CEB7DC9C6B19FE345FCF8F1E35448577FD61EE8BC6
A6C9E054B4984E7B7A8FAEC8F72092FB63AA3986D0EEB6A8582EE513651B05D4
5D9ACC5DF8B4C9759F185C3972FFB2599BDBC7EFCA176624BC52285BFA294491
AC3509781FBE501F96EF6B96BDB5DF0FF18E888592F9E2CF06FBDB79AE4E6168
C755F094EC1C7C4854B6FFA2B300E5498AFBF861D08F8183336B92D89842F7C1
6E031987FCC79B910DCF6AF98234E7D7E32C0027AEEBB813FADF9B0216153154
15D8BA1CB39CFBF1BD11B8439CE89BF79F3D8949B97B1BBDB0AA126236573D7A
1C347F55648DEB157ED3A7C3C44C1A2D342AB3D44EA76C173A4F4C827256927B
4D3942239D724172A9021C20B3DBB9E4050B5CE2230DF3DEB82BFE10FB4F0DAD
718B0A1E8483DF729A535E01D9E02FD3B8D257373A3F45BD25A5D100A127E634
38E5BCB6210706817C9ECC49F2C0700D0A5E5462CA5AB28EF440B1BFDD84BB76
69F10FC5B8B5B668F49A6C669965C39F9AD6E84CCEB80AD00468239A9079DD2F
FC29FAFDDC952D0E56C971A6BCD0F27FBE6615305A8EEB465AA1770AFC3ACD2F
ADCF137C48FBDF9B6D3DDED36978583836894DF701DB2F0D3C8D6972B51747F2
B4EADE7D956ACC7EEF52CE82070FDB68A03C052D4A74BEB07CE9A0177307A027
CF39B694B19D24370F646847DBC26827F2DF099CCD799C27144DC53253484E7E
814A7E4E49A4642EB60FABB41BB9AE822465013BCD5B69EA8967DD1EDFBAA276
C5247993397F57E0509775894A61424B94A0B72EF5E8DF9EA935CC604F9E0887
2E72AFBD603222BE25A756399B86D2D1377BB5BCC8DB8FD1FA6DB83CBE3D8988
4088A4DF07E63147981FA08A40882E11CC80077D037EA8DC31714AB4CFAC6405
DD119493962910D460A83CA5F5C34F34EB669902F4445C53FD0B062E3E625074
9285722DC802A8F5F3B582D83648B2F0FC09296CB907A6B92E5D6D2F1E63F356
25C5F6E43EA01C3A8E876CBBA953E16A8558B8C483AD71B454B4368D1FD4A878
0629204632C7EFB0D04B6F0324CEF9A6A551C2DCEF7125792B64954FA8D1AD3C
72744D2618007F420DC6CCBD0EDF78FC892121342449AC3C1DEC4BAEB4318FDD
9A16483BEB00217E5323C8C07D438518BEDEBB55B4CE9B93A645D54DBCC3E8F4
28930352CB4F96BA0413FC31C043F3FAFCFE05F84A44D47E5C18B4B4BEB04198
4673C6A4329F7F00369DAA397882992688524893A3C7B38FD84EDFF90FBCA984
DE2723EA384EB68A39B85C3A5E5D1727C94D8E46D4F4A7851EA03255B9ECFB39
FAF460B84D31D8F36D1A6FC954F67E8941A148B92FFBED63D0459F525EEDD342
E3811D54B5A268F4018ADD88A2298F19119A3DC700F39EEE41F5A14A7673434C
82FC67664BFEB5BEFF9DECE02DF429857C99EDB3FADC695D023802C5B8D78B2A
8DEE24B2691973B6DAA0A4A86A01BC87B61C4449084A11FEED305BEC52C93FE2
B4A18E7325171953B6627E53FCD0CCDD07F5B132B3476551DCE81162CF7A259C
5132533233A4B6C81B3DFC426E91251E4410E7F1458E79980B91B1C0E058F65C
57DDE5600AE627654E730B78F23E9926A104D9601F647D3B89066A22AB02D9B3
F89A7F00866543D6266FF881EF3CF35C2B94C919A663307CB98E3F9AE062ED5A
67FF711B0FC094123A06D04576A763849B0E7B73E9F3C74E1469C6BCBA90B74A
BAC8C4285746C7A6247F7C8E602E32841D449DBD883ECFDB9025AB3009D00A5A
CA0006476D8549C189E625C7C8BAA7E140BCCDE6A7365D3C8388D80DDCB95422
DC7897E3FD029EBAD4D23087FC2960B45AEF792F7CCB4AD08C54897D7EBE23BD
FFBC5AC36C9EE081DC7702601A44126CF80AD111B254DA5A7FEF831862E93580
DE45B4119BDD6B39E629DCE6DDBEAC2BF2AD38B72C73D7578BCE8E6F617F5A59
5BF4AB269B758AEA367A7DFE06DC32BDC18FF3F513C770CBADF11423B1DCC013
D9D12955B0B8525A259E25860A354D1E69142DEE95CBD856E4A689C3C35079F2
725A1CB6B949BD8641106CB321F9591E03F77B4D826C792D17909C39575F3C31
D04982708705EF0F033B6B8123F40DE32DBC7A7E103CA77A11F6744B7561C355
BCD589E14BC62EE7FF8C9C1647573FD98125E92BAE565770FEA850B5623AABC3
FCB97298CA35B6AEEE6F60B7201B996A7C66E0B2E15E8D2DDBF0641C7637703C
CE28ADD22D093A8BF2641CF5CB94A41F6C6FC08D06E40C5AFE4EBF0C3CB2E2AF
19A6EC7D2CCA6C0BE76015CF0CC457E2096E579752FEF3A6D479A800770A5E11
5E07DCCFB55D1280C93ECC1B5053B42ABE17A1925E2EA38006E7ED0DA9635195
A29DAAB15D42B9817E73A24021908C7D32CCCB8E6CA24FA190CD5F09A872E799
7E2557E4B86194EB2609BB2B9692CC6E891C8CAB66B8399CF7EEC9FFCB66CC73
1BB4F927062C125BB08B9A0906330212944907E26526EA49DA7AA844666ADC00
3C5149FFF4980A11218E6AB23EEA2F5A6C8A7A863851E877E5F31ACDBD05C06D
1C6C4890B2873AA6CEB0C54FC650234B9B7BE0BE1F280582B681A98D2FF06C76
1763422CB080376B8EF5970C98D965556F2731F75439C4852370491BC4372245
B295D1F69326A8BE1AE1D94223F345DE0197E53E0ABC5414264D13EBBCD7AE0C
3674F88EE58DAC511D9924C5188FB4BD474C0D42C84496E5D0B74B73996A2908
A9BA7C5CF316D8688325E8CFAF72691A200EFFF5469250FF6C1483C4520FFB35
4A7A062383D2B23CA56335F0B84D67E5D6B2F7565FE8AD1EC9189AEA33F3B3C6
AEE97F9ECCF6D8C3FB1A2F9ADC2CC444AE20A23174AB2DED90F78AD9D0D57B54
6C34BAE474311F201DED7D4CCA0A8F1E998F6EBE2C5C62C696F659372FD5C1E7
7099FE3C68CA569B52F812390BC29E70AC3872FF000ACF6C52D5C7E67FC8E6E3
573DB6FB5CFF5A4AD63FA21F02405643A0DE9DB44128799103717A0706575912
61841395C1AEED6ABED105E71DBC3884A143D6A69E0C91C2B102A95C17F514B2
F56EDF8E5E176D10E70DDD448A3C91650FD91AA94DFCFD3C2BA11D6BD367B489
D07D7BF3BA998726FCFA82AE66B023D90D64677C10A641DBADAA9B42ACD76B66
D8E9BBB459F3714D3DD291F5D1D040CE19E86BB8949CB6A7482E3BF1E4F4AFA3
3E631CA9683A312E20ACD00A2049924B72A7A313E8C1EB5EB5B970F2D9F0F492
A3CEF0B1DF76957A76DADA4ED62A6472020961745F330217E29DB4F262050A11
FE8B1DF77242F43F542A62302F8B19C8F7EAE856C75F4604C7327C87EBD42EDF
B9B35C8E5384704B696DD9032D2CBB6BD0B21212E70DA9EAAB858BBE3B63F02D
79F5809F8EF09CE4BFD5617B9C8D02C484E52237B4D55F40BCC6020A9DA242BA
B1C3A23B5301D2364D16D91211E97B26A891D892570BE338038DDA25DAC8F2A8
FC843395C2D6B668E8516CE63DECAD6B0AEAF364AE4C80E5607CEFC353D848A3
5DBBCD10C696BD0243575ACA27AF288467A6784AB8DE011E527036E2C4C2D814
37F3238BF16E069C121BBFCA3FB51E0FBF8D87B7AE7CE82C11B22DC2EFF49CBF
8FBE255D9D8DD8C81D960E5723A96091C9E36BC96A0A0B1E2840248DE2719511
F621F9C426320965DCFDC1DF6E431D2AE3252B6C174C3B60F10CAB2FD93AF01D
E203421506A4E00FAA24ADD08AFB863B94D4315313E55CE6FC48F76C7F1B0ACF
9023E2C046AEA2C2054EA9E6022C7CDB317CBEB239C14B7B3D1198CD7ACB9E6D
166D3127FD96E31706E59369C4745D64FEFEA2483CF4F829B64C360D5CBF14D8
2EF32BD53EBFC797DCC473D81C50CA3986013978168A44BB075AEF26AFE6790E
447B54F6ECD8BD7286D89D5697EE87FDFAFF45BA81193A97E10B63AA4D893D3A
456E777135DA7D97D3223DC2A70A37F7C832B194291FF022C62806730BE7A6FC
13C4EC11650591DC99359DF0A561D627CF29E7A2BD36F78A1468FD7260DAB6DB
280E5CC38530A01C3A8E876CBBA953E16A8558B8C482F58D797B29408F1C60D0
67907CAB448E3EC74F1265F2D5E1C843F00D43F849713BF4A6A75792E6A0CF28
3AE44DB9BCD88800652B6311E55ACFDA6C44488B5CCC6383A0AEEF94E2752AD2
986BB7BD47AEB903E093F21D1E89FD06807D8B7DB82BB87D1917B0140E0D30AB
311D65850EA9EC6A87DD7B8EB838C38E8B7C5C55F929CA0A231ADE1049F7F41A
60437F77FDFCB88B3F41F4A84DCE78FD29960BB1278CE2DC2A49E9530D26DB03
2FB7779F96FEF456C83AFC0D5035577AE9FAD73A5F027ED0605BC29946668808
C10B7A087496601B0348DD5A77D1C09FF7085FE04754B10ACB3A0C057930E7D0
AE58544692B5ED12F71E6E7982D3EA2E0349FB45EF6BFA0E83CCB8E0ABD40FBA
8779FDE1B0ED350E58ECA8C60E228855000902239284A91245881C866653EDDF
F55E228F39837160B8003758487E6837EFDEB0C8BBB979C49CFEB0423C4EC616
E94997791047868AE2041E4C2EF3140C4FF0EE8C2CA4A8D57CB2EAA8C4822362
4EFEB99A34A00521B52F14E5855CFD0CE1A0C3E4CBE261FDB64D38BBC8B83779
059F5514594F55E3B4455C0CB193D29BE19B55028CB40A134ED8C209AAB55A31
8E8575EC381AD2C68C6AC1D9956DA18CEAFE6E8F7164C66546086820B990F6AC
2AF976C4D905689EAE1767F13A2FEF81635CE24D6BCDC7FE1B174824F59FEB98
0931B90650E6FF796DDCD038BFF2B74707A1BE19E1A0CB2353495C0945D09871
051844200CAD71D6DE83DC7BD1F33F122EAF37DCE724345A9B30B333F1161168
565E050C3A8A714E64FBEF7C0C74E8BC79D7EF2AD856D5D9A3C59A516EFFD38C
B6D279410F03FE9C667B812795D697B2F6DA24C856D86C6DB360978B090F1E73
124B3F8196C3AF9457E0D16B6EBB2B01340F32F4578998CA100D616611A90F96
E9BB87EA87FF6E81809CD60FB5023F64DC36443E8A29F68619ED91D2B7D2BDFB
AAD699C74AC16305389F173A913169AB01EC23F830D63E1FF9624DFA944BEDE9
DDF178F2F8DF0DA3FFC26DBAC05C175DF28008AA2DB6BDB47F6EB5B0BEBF5560
2958EB8A30ADAC715CF070A47C44B860661FDE7C87365AC770171CAC58B04CDF
3A832201ACCE79BB4FC4FF6D98547FECA871CAF73FEB1E1FED66B53C50388419
88EF962BD09945AA444C7EE187987ADAE9E0DA9F398ADF7E02FCC0C05DD36F77
8D8BACE1D8AF99C610D5739BED2629572529A19B0F94EC19E3F903567B50D59D
6043E5DE2157D7464A788A84D4B0D135054E3DCE916DF3ED06BA984DD0EE0788
B84B142D132F62ECD79C871BD38ACC4F2B176F782DABE3FF805BE606A2FE66F6
8DAE9CE17319CC2ECC6EFBCCECC5A6CBAF5223591B38C40C1D18DEED6AC402AA
700BBA73573CA84D8FF92464112FF084B3E5824DD9EF586021779CA071E8A5DB
0CAFCD7C199D2E7DBC7D8A8567D40D9275B2EE6256E4C5931142B4C1064DDB30
B506FE3196DC7994F3ADEB8D0920E6FCA942B7F7C536C45CC4380DBB9E5CF8DB
BB126E8142AEA8181CE2A33E8E6C913C881736FD6266C419CCD3675B29DDBC14
E325FF9C2CF441BA9788DB45B6D952552CDC9E1CD71584859326C51CA6F03FBD
C43AA6155308E408FA74E1A5E40D04B63E1BA1D49D6ACA6BF3433F2D3D6443D6
DBF4C0C7733A693308949C11D6B94DAC6EFDB8E0D0CBFB684AE7C2165334CBF5
77829A5C77E9661738561F09CA4A09EB1E5BB6912AECD4004E6F3DD0BA02516D
556CDDF69F323FE1C8C0DCA26E3C6823FBD4D1517A9A36ACE7B2E2E227C39705
0FB45609E20994E5598E11FD1445DD499CEB3C9522F47D6FDD7BF7665D597FA9
CD0020FFD3FBE4EC8FA718D977F9095A7527B7D57C1107FBDA95F26D0EB2999C
F608694E6C10ED593373A95B7E3D72C20C8DEEC3DEC832CD24AF945BBCA871A2
411A0B2839CA2FB5D4A3602B7E2BCA16C510B999F139B4B67B36944C96459079
347807F4A741A0FB7848989FA2DC926213ED8496A0D059BC8B0C2A04B2BF0091
2924FCD6F17432FCA5D4DEDCEEC7B7CAB02F4C28AF1388A949376BC807A60F34
E8D4ADCBFDC1DF07F8FAC48207647219559B59168843DCD338021A809475AC21
37D636701445DC0B0F5DD9190F9794C62105738F23122113AE4E40B9175F83E2
87BEF5068B12E91935DB9ECEB4B1871880BF5E2B29814569513BAB0B827D651C
7BE4AC3E8D668AAEFD095878271A672257530213A33A4B1A6B746ACC98C65218
AD15A647074DBCCA06BA2AA16B1ADFF78ECE0BA086B77EBC61E053F78F905828
7BBB4525F53D25D77F402627645CBCA22ADDB016CC3FAF3BEFE93156F5419B9F
A0A7036B2D7CBB55CA02A223ACACB926ACEAB59CD22AED3C4BA274B783740489
22DB267AFA967F80C8260340BB7B6ABEB170F38B98BC11B3B58311E772DED3D1
AE043AC9C3327228B7B9F5F78FCA7E6536030D3ACFA310CC2661906A92EE1D3A
D7858BCCAB5D2D0E8B25142D6FE3DD21612E491A82251BAB7132AE16197391FE
87B4144B7C71A6F38140ABA83C9FFB35510029E17697E5D6B23145A1190BD4C0
88B3B60C09503C5BEC3919FB2741A0ADF93D20B88C59D9B8977000D0A3F3457D
E7BEA70D71006718A0F68A3DBC496FF6A92A240FAD4EFD602512EA694729F0F2
9915FC44E30701DB562817D98441FE0264ABDCFA986E433228B47DEB245CA141
95902B86F48CF4FC226E9CA11EFAAB26EB7A9DA78F73D4A66B062047DEECC658
8D75A32BB8227157E9E67E6A914C2BA281E2F0BDAA9BB9F2CBE5670ED20E8CB3
4A7DA43062ED6C832DC7CFF12EA9999FB8EA675B26BBF735EA1175337F8E4A42
D734E256C08B458B79008E2F8CC7D312DABF792A5DC6CB1552FC323FFC274B81
CD2E27A5B6F65A0A20DA2182259BE905F8392CB1AED3D0966A9AE1DA04807BBB
14FB50357F372205B734280ACFAD3E56772AECBA04E4ADA6487253C827B8DCC3
3320306FD36C301992633D85973BA640ABE9792A2F617D0E17680DBFFD3A8861
37D8AF4BECE941EEE8ECA166750CD10C88F3F6D5C4D8D025CB2F2519610584BA
49CB3E8A202E3AA8AE613D103090267AEA5510C3192B78AC88A07B9F9268F189
46174A410A4ABB0FE797A5BB77F7C924639DFD00EA0AAA7F7754F9E16236E4A0
4F2401F661A1554D594F9E1B6FA61F4FF9392483A8A3350018417FCFAF8D92A0
A594AFE7D156CD78B9784E5F394F2671E6898AD346CCCC0B3D24962D8378C8C7
4F61088E0917C4FA2E775D8354953E940C815216752902FB1FAEB44CB975677B
EB81486B8F8CBCFA801250CBB29AF636F0DAFC0B73A5DB647FD3F79979DB254E
D4E899A8A01C9114A998150EC4C00A743D5A3BD5D6FB57563082857F7738CB9E
00CBB736BA2C807C08462C3594C7FCC9C139F9DC0C7495B24B5251BE6A178490
53E374742E7ADDC2FE9CFE2377D84092EB171372F281EE6FE0509EFC9625628B
CAAC5894E21C8B7C3DA594315922050A0F9BFD7F5DA1394FEBEA1D3239048913
00AFD191624F6C77A175CDE5346969366AF7CF5A91DB195739089D60518ACB2E
BAD9337EDFF150302B6FF4183444C9EE979C949D725A9A31BDEAB48D110F46E1
F15106E7D14E4935468D6E941ADE6A30272DB4CC0A32F49A61F8C0067B82953E
ABC408D573DF52717A0F9C3B2FB467759C1B1497131779D2D80225202AA14977
2CD11C9C5EF1D7EAB5EB62492995900B7D8C61C4DABF988F2684BF15376D84CE
B1925C6145543A3D527F102E961AE51B29B53FFEE6C8FDA575110FA968112BE4
A9485039CDC47C1E6B2DA6E0C166EEDACF8E4C0180068F4C739A671336A3CD53
591CEF73940AACACA992FE996ABA986AD02F13C26A34BF476360C2ACBAA434E4
E2F2EB7A609EA4D73DFFB1086CFA05A9E856B5694270C42611471B35FDA93095
AD924E5C998BC816AB6A825228425476FB4E3D9C9B96B5DCD97E5A15EF547CA9
3236D44F3072A0632CEDF28B7DB59FF0D2BA92A7C4BFB2A2E7759432BDA18239
3F8F6B0E17BA69690A210B7A0A2CEAF832D8511783145E8E6E4A5BA7D0A5BD32
993806142FECE8DE6DB81663B43E43246863EA2CFB8F4964CCBA022C1677386F
93E2E8FA61AE0997BFDC3B304CF793F67B43E0B20CAB98287858511DD15F3539
9753CD8BB31BE9360176A8E918EA4BBBA5B271A5FA5E073FD6922A2E6EABDFF4
11DD26024B2A21F844551FB18CC1FAA144E0BB0F20AD66207742AF660BD27569
D94A3D289CAC5B3FB4DA5A16DF72EC072E16CE1B427137A50B9027F8D2657B77
D5A22685558CBB45CFEACAC5265B14C519E69D0D89DEB03E1C62BBF2CB564AC6
B920BABDC69D386EE3466D9C18CEAB83C4A22775056F8B961EA190085633AFD7
650F46B4261C19F56ACB01B730F8199956AE03AA7055293E7BDB409EBB7420F6
A6E4C8E58EA0BF73E324652F6AA373BC892B269E6CD256852629992D6F095C6E
CAF8DB7D9657F94DF1C5A8250372F7A39DA0539BD76FFD66646EFD48A03E1193
00594085CCFDA9D4758F4A948F0F5BC0EFCE297B6B32279E527AB4E116A7A917
6E092081D23581E64795A611600E1F582C769A1913470C7E672799397F10C719
BC29732F9104D2693BB05DA11864B2D6FA4F7BFE432E80680E6E007266F0D765
2F6AADF25C7D21BF094408EAA23B0FF73DB5A4A64FDC12D4D64D27592DC59E79
908BFC4323A3AFAD1611D0A31474602CE36A302E528D9264F27F8C55E96B96DB
09BAD9C4AD13DE66DA21D0F879B755B865CBD0BCE63DF59922039C571528523F
12DF3D14E8F6B797E10B3671F81E84A01413D7F0BC669B5E7A9B704808E3BBA5
5B4E8048A9F998DA5921DD21ADFE49F8ED21D570E345BB5E031F4FABF7D880D5
8C7834241AE346C2593942F6450BA0FD91432A9308B94A9F7889FB374D3277BA
63A7FA0F4C1DA73896775C8696C6C7B04C2C7C15DE851D819729F5B7442CB36B
08863DFD7E7146EE33506D91B35E327E745BE4F6AAE3BAEEE3D914DB4CA8220E
482432D09EEB160002C59F64A1E125071859BE14755097A1B22B17BD455515A8
2973C25832FFDDAF3560D25DA7DE9557884E20E0B5C07DC8B35CDA492822367E
C0A82CF0D09CB6648DA5D9D2BA9DBB10915601D4EE6DD64323D6585D15E39D0F
A85FA89C5E0DF79FEFAC9951CF2A40981307E1D9D4C8F5F45EA756418A4B80A7
8FBA8EDF9E90D7DA2D70969C69A9B0F9DA0A93E9415C153F9166E2314A2CFBD0
3EFCC80B0FD93FBF8AADD07152348DF53C95ECFBA84DBA06626B35B2D7C562B1
2FDC8723BAF26C462301775275F7A311A4A63B86215AE5C2D340A11D6C6CEA09
4B55B7332A9AA3097058593A23355165361989F3814CA057095036EDF7576A74
29C8D0C97BA71FF2712ED71974051843AFF5029559B57188981334D88F336B0C
F0FE4C2F657AAB2097D4802A96F5BA5CA45825BED26538112380CE524F36598E
48ED0B74493D875D399CE0BA49AB5200FF119D3AB13E03BF3BA45E91EE613943
FA6E45BA7ED546914EE6E45424670D54F19C3E8FEA42E308692FCBF58B1FCD15
BD978691216BE32A33ECB754066A0D3266B00DA97BE9CEF410600D4B9434A7B5
C0DFB219CFFD3B9995D64BC7468CBECFCC090DE52A7CB6047B11F636BAFD9C28
A9FDF4C97FF4A9A13DC0C9FB6B24720483E1F3F16A0266AE28C96446BBA6A1F8
5A9903AB2ECF9FC0D7C04A619C69DEAC2B7953DE6861C867B207823150B625A9
6A0A70CD53E72CC3CA8AF29DAA37DD32AA0773A7CDFB1252672DACEF8A5CB54A
B83C1CC916C8089EDA7603CA776AF426BF6CF6163850687571F6F905DDABCC03
71D817
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM2488
%!FontType1-1.0: SFRM2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm2488, tcrm2488, larm2488, lbrm2488, lcrm2488, rxrm2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-167 -317 1298 954}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C1988EC251E6375C056C02BED93AA6ED91
DDB0036B6EA7D6B65A850F49CFD019F0045B4490E4C9AB9E6B61F92130B23625
2737AE3F50D2BE0C186B5054358E7E4E27EF7B7A40871D4E9327D0162A46472C
F05AAFD1ECAC84AF699165315738BD21E80013D5D128F0CE9B2D73AAE50E5110
E024C65DE5DFE64AEDEC8C50D7838B946B2B17A63189FC54941C9AD7633DE8A9
17DE0C922D516FABB8427312DA9F3F458274593C738E74E58E9A5BD96A10717E
AF7DB15ABC4244B5B8DCE13B01BB1FD392D7D7F067B1B5093870CEE2D271E96A
7D5DF1DF79B54854CA86CC4FE8859D1A612C2C9EF9925E5DA01943A1A57C7EBA
A1B8AE44B0348C900FAE2DD85082DF717E136FBF97B9E37F127826019C526BFA
6694013560F71D66767AFD383143AA0466104ECC9734992B9C21E9CC24DA0A0A
1223A7C74AF4A7BE587906B0618128A1CB6A47E4236229C71BAFF9061D20AFC7
CF537D4ECF5ECC83876AE9FF337F37DE025293F62AE18D88F609E2CE084EDB2B
17617007033A1A01771E6B6FF559DFDE4055D4DD61AA9970C916A9C67C1C896E
80A25047332D4C00F043385A0398AC953B9A9FDCF35EF3626D6A05F5E7C24BF3
554657EFE4D9B5F0F79743A714C528B64D54738FCD7E1FAC5FEDEBB96E66B91F
4F8CDE33B12C8CB77FD81A17755E2C3954365C1CC65EE6CF9E303363C061B3B1
B1B6CC908186486B3C88550436E449914328BE86B52C3627C2A408822C1509D5
966279E662106CAECCB2E94C4CAE972392A432D292BD01E98FD9DAEF971B6ED0
F2FF1E41F38ED4E2751D0FD6D3C7957054D955F9C2FA2B8D208B14FE526229DD
C8F131D90DC422ECAA97CA287AA6D1702888F882F59B8E3D2D54576AA744535F
240FAC55D6D1524F132A4B89DABB7369C5DA9EF43DE8F3300A8A830F106ACFB2
31A0DDAAA2FB8ABA276DD8A6B9804AB5A32A2EF6F836ED4B747AE906A2B0EDC1
3FD0369D64F21405F98C5820EF2074D5115134F937A5F601A5C52EA9D8A19DAB
8D640AF00072C465538EE4B562CD3A620BC82415CD2633CCA6163542988EA5EA
63A80FBC12AD3D9EF3C484313375D8D768F9DA94855A815E655634C81AFE5612
8523A8A91B9D085A7DE130BADB6719AE00BFB9D1ECB790793CA117C5DC4341E7
81941B4337C2D18213DB1907478107AA29258FA97CF229376A74E295C897CE66
013CA5A6CF104BA59FC69B6D8A8FD081322DEB995A3F3ACADBADD3C439C72171
B0F1851CFD7055E9ABA5A9BEE794F6DAFC763CCCE0C2ABC7FECD0B2C532AF219
3978AA120B88151D10417494985474592C41A319AD02698EC031C20785AB7CE2
E6C544050618A4AD4963F80E3075D88421347F78A37FAC420C7A064B9B348AC8
4A12C5FA99DAF44C46E6BD52FE08476689354B337A6CFE211D8F9802F4445C53
FD0B062E3E6250749284444A7F4C43B07E61F9C5211460C2E736BCBD20D50EAA
7B9DE349F6B829C08A49A3868648AE92C2367DFD51557CD0E2122C5EB6CD0BD9
FAF21F130EE896ADE3985DDC97AC3DCC1FAA14E557CFD01E477DE622D78A168D
D57786281466A7C86EB381C22F6ACEE69164FAF9754ADF5D302237350044DFB9
9F822D43D7706D4D916E67289F8F7EF560AD4EB8C79F3FF3AC9DFA59D44A37BF
40AD524E03A42C91FF4A9A972D44CA969A3C93FB95D880A41CF1338305F6D366
FAA9C090DA827BF8D4070E240A98955B94B8F9B3C73D34077A7398FC2D37E825
18C48E34F967F9E979A79EDB7708BA175E814DDECD64A2F09D9E722B73E88FA8
DDC551BB615F14C511C2ED4632B9FCAB8F189B37FAFEC3EF8FC321CFA0B979B8
E65813CCFE11CD425650650F7F8F1D2603033FF0572969864808120BB24C1D93
A62D673016332B2FB458B68BB3E6F5817FEFB6A9645CCA04C2808098D27394AF
7F5F27FB6EF7A00B6780E7A9E14AEFF3ABF00774EC23DA8CAE3E9B05252705C3
547FD0B8F94F3315918BE45D61C11E1102125E50ED736D9EE1FA80D4A2EC5F78
230A78D88BEE8E5AA5ED256004A1E58D5834F928EAC244CAD6FDFF49CB78B73A
F61111C7D202AABA714C7061344AFD3B911C0856554EDE8CB0A6804B16DA2829
7D290842C30EC7E3EB3F62A2ACDF7B66BEA904D529E005007E31AC4FE775BEFF
8070829B78837360339DBC5135901E2121541D767E3E92666F3B45B2A18812F4
EBB052A895B0064C2A1BCA956D01BF8AEFFC9CD2638D71FAECF328CD39C2CAB8
667DFBE4C61AEF51A2BD2AD9A065A5BA79E8D5627CD4A7D383F74D50A1D3EB21
A00B214492B7BAB3BAB73BB94E346BF811FEC16BFCF698B77B1D49F62A429CE3
256DB0C624A636BBAECD95AAE9B351E7DCACF0E9FE0B0DAE30CCCDD730688A09
0EF225F2D1798E2DCFCC7C38709AB0841EAB96D2B04C92757F963A22935F5B4A
6EB3A055B231CC8A22A1A640960B74701EA0311EF73D27215F98B4FF6866C81C
444AC83D31838C15C706E242C64DEA28F30F15AA6255C1E881E93F55ABBFD939
0EC35C9FCE61FFA44D587DA9CAFA807DB3C40115C7E339BA3F4D4D8A5AFE184E
BA57748E1243084ECD35187A016ED439FE987D39F4E68DB6BD26AC59B499C192
207C1E52F523C2D6CF2CAAC302F81B40CE326CBA97480D55F74808F1B7141B81
F102F76F0B1D30B335F3958984C20C3A8BDC58B12CEF858CDA9BA5F70FB49A07
7620A992D44A6F0B91F0DAF483ADFB06D12CB475C422FF302043E8DF543585D7
1151E749A6A8D05345884CB8D1C77726A61D682A3B0700F3CF59C2DF2B676BEF
8AD91EDEBCCCB2990208B010FA2136C33749BDDE2C4DA4143A46F51F8BF42CDB
8BF2C085CF48FBF19FD80A18E86C9CE91D3EAE12F48254753EF3808A46D67382
71275F2B06705E64A217BEC6F890EF8B690D8D465CBCFD4C3334399586E44F14
3EF088CFC852F9D90DB612885FEF4DF34A4DF2D672DABD6F0BEBC9CCBC9B9090
3DF91CD9D5D584F5B6932165BD9E554030FF8604FBA739DCC06ABBE3036038B2
DD9CA2470717DE603C35EE764FD91D6DF1E3313CD15986DBC206CFA47426EAED
245196875A3706D05D82934A811AA1CDA45F9AE7BD71BA5EFFA49CEC4A5A04A3
A24DA4FFB5A573D384496A34E3C7CB5FC6905CF4A7E3E547A418F6F122A1249E
10F3E5C513621E07BFB7954A2B5385DAB86D7F9472569951B5437D587EDCEBB1
9CBA4448AA595EAD2B623303ADD601D12FB462CE1EB6FD26A10AEE723E78F3CD
9BADFF8297EA1174403B4734BC47F3A32753592E78181A50EC4FD5F238609AB9
B1AA12AD2F4533E11170F78967753AA96964C580B9CA075638114AF40D84CAC6
4684CDC2B31EC027F4EF22BE7104F3A7381C5F099892BDC0B93523D9F14DD014
59FD1BEE59B488028A616251A86BFD4705006E4AF46A848F8AE7800AC7D46956
2C77C69E5A25A667FE155CCC47AE93DE1AA6ED9979E675BADA227B166065315D
28F42CE61FCFFEAE49327BAB18ACC6F917CD3B1D84115834CF091A78BB485EC1
C7F2F3CA64F0CE26E345425A458A319EFABBAAAAF1D6A52C52D99BBF39F9FDEE
572AA229107185F497DB3C7DD9D0BAA6F3B1D262A1C4122F3DE7D033481A51D7
F9212B6607CC676DDB4ADDB047F5283FEEC187750C798B5DAD0AE5F49E4A061F
C27BDF4C7EBCA4747493BFE69E08C0A5CB89BBACE5F5E07D9CE3B2E7D96244DC
683801D1C6DCE97D24C28244CDBEE9EFF00404DFE428075C1FD49634792EE725
43A191750E08E938F2A1D32AEA9BA893F17AB9A8B582AC9BF53E6AAA020481DA
FC14076E79FD9BA37FA412B3B9FFBFF121AE542F7F103D13C5D7433DEA4AA229
840D4C62C19E602D5A33D67A27DFAF2E79627EC89466DEE887E36A0C5F97437C
46C37BDF9BE95ACCD3BBD4E14172E17D2242E18D23EEDD237344E597FFE78B7D
7488E027E791912D398BE3C3E5AA9E2F113513F5154B2AF9D4759E5B65580985
C83E84864CAF98B45C6EA676E3B3237B8D9389EA8CB1A9393B4C04C9D4A73798
7C63777007532E89F6CAD80BC85D30FFDEDFA016286F9358300D1C4CC9A3A2B1
3073F0D236DDD55D98E2256786F5E2867319063F8D3460B078EAC63D6954D4FB
B581F15E85883AC56F758F1264209486B3CFFA93999DE406A66CBEAAF9C41D43
E56522D30CF42556F879D8AE5E6207B2B71655E83CAD340006E562DF10BA6196
EDA348639FC3A0B6D8532ABC45AD46D59DD1E9A0556A316E36CA073BB9A5D031
4C74BC4355E57553069A1C15F8EBC0B020227032CAB4F56754BB3AE4C82AF14F
1382BB4218A3185EA401BB127A7AAE1353440528AA547B5EAF4EBEA0BFA20408
BC49A4856F13329FA299DD94B31668D17FAEA29EA59C1F2BF52C452F79B855F0
D548D564C8D315AEB1EC2805E1C56026F63F7592317478DB7043E8014966F4C8
61C821CBE4E6B0DE069E16C074B6D9BB7D6E57856CC8B95F89DD8F55618B6686
5C2F98ADA89083F955C761F9DFBCB2E11A6248C7DCB95466D40EAB56EA423250
62A25F89083B542C2591DADEBAD154BEB335CB8D72947CDC3D952A6763841D6D
5207A8BDB9FF44B6E3E3CD700CBA1BE41D89E5835B0DD4B8A9E94D3CD66CB775
F3BEDED239416C87997ADC6C68E7BC006C960C129A34870764570154A72ABADB
B16E911B3E602E392D96D920E4FFFC9EF06A0AA7D79FAADDB2337DBAC5F5F7CA
831A87E00B4D60B2CE8882889E8B09145CBB085A46D19285B8D4344AE23308DD
780C22993AB0B2984AB0CB15C1E3A61D07B6736DC721C798772EFD0F5B244B33
FEBD33E2D2396B25F47BF25B6428940FB5155063C163593E08FD20C59BE732D6
518A5424529726A05C975CB334E1961AE265B61914F1FC347103FE5AD10585DB
99D9BD29D963EBADB9D256DB0554A9B3CF6D6F613350FA50685B8CC424792182
264B38A42051ECE80219C674DE9C5F596DACE11622D5BEE6715DFEF474340E92
99E06A863D331504EE0CFCAF0B813658BF7CED77BF35A0C7CE82EA5361A2C717
D7D4008F2F38960F407C82DD499AB3449E7002DF03B3835475F09A8AB531C092
73E87C2DC5E6BA25574158ADECE31B6B52206DF89B127FABEF6FD03DEDBA4ABC
AC99D8B7AA9056F0DE55F701A63EBAEE1B3A8FE8F4807C3A0131C7B31D6FB227
383FB22E2EE1B5ED812CD2F3EC52CCACF6F01490F7B4C90965F4EECE5A774EE3
2A6F44409018D447A9F592D1ABA356F58CADDBBF2606DBE4E6D7FBC8BF450D19
267E31D18E355A40D9A42C8B3575FE5C3360A0CB582DA8FF933FE588F6BEE2D7
53DB52D6A887A407A5B5BBC5E1DB6A0DCB8D0CF788A30EC777E1798DF8864680
7A47ED6B99C6DA13DF9561CE1921202F075EC50EDB41DCD908F3859FAD0BFE97
ADC7398EDDB75FBE3B3AA2B3F0543813828CEB7BC0E850A953334E1404E26D46
82DCC399CDEFC5BE6D854342001CDA82ED6B602214112BAF5E8AA0900CB130E7
1186C8489E82DDB0AF793AF5AD1D25BC4CAD3B5349031BBA489B78A8214B6D81
576856E4B97C8E3741587F638339D4775F586B0ECF699EE3AF0B5792F7C38F62
F089893B8FEB3DA6E677008430FD153C84C85FE708E4AAD408A31DA6549D3251
9C5E42048A91A52BEFD124053466D3B408BCDEA8FD0077FCD06D0FFEC2FCC2DD
5ED05829400DA8E6091EF401BDC352372888F11E04E194047DEC273F08820B81
2CF9D670F1F8C2FFA2F4F5E5CBE0BD533CAFD211D88EBAE21207F83D12C92353
96A1BFE78E0CE89CB93783D52109069BDEF56A2536722E95FE6F56CF9BCA17A2
D508D809FF461106D38C3D0B4945A75B98504001EFFD4053B2D53F0444301CE6
4C1D898C0C6631E61DB881C20745FDF9176F8C1A5DCC2D0757B047D81A60D1F0
9452F544143B86F62BE70941CC7450FBAF87FF44869494B4028B416097940478
0638D918394F20CA784B6F8C9E0B72B2DBC327428E566C1C2FC4FCCD2FAF8CD0
C688624C11A79DAF44D6D09DB137814854BDD84E6069CA59FC69F29E9F25EBED
86B1CE3CF1CE9E0539A6DA20E96C58DEB846AA69D9BF11A5D4F22757FF5DD6B9
676A91007F8AF1313CA3B110F6A6906487360DA83DA9BE02DCD461BC8FD05C24
9956C2DD51FE2ED6C37B0864873DEDD318221375DC1FA059524103E16BC55BE5
525AA1F3A3EDC51EC50BC4A6D7A0BA9C0B0CE231A58AA558BE6EAA1F25C85FC1
4D37068F5C1424A6D49E48E7285AFA3AB3AF782E48D7CE22ABE468EB21FE4B1D
9B837FEA7764C5F02623E099783D698A84C12B7971F1CBBE38766F05519940A8
49D563E47FA3F4A3EA4C38EC16B2D647ADA920CA26BA1118B4861C9900C092C0
BDF2B59619EE36A1C85BB7192F87B72ACCB7950C40FC72BE8D6FEF72372CC051
A9D51D4773A811C217D4349511F04F81A4AB35D8A149088143F1AFBC0E85D15E
B6A459A1B3EB39EF29B2394A267351E7CDD7AFAE61457BE4D35FCFA0DB1CAFAE
EAA9F7ED48494D171D995CFC630B9E1360A784AF0AFBC33BD2DE65E308F66953
F23100CDDD6F5590E98D467A110AF2B0D9A4E2DCECFD566DD638AD99C7441875
8B43358116258593B23E9F1D60A2B8C709B95580D66DCA0BBA0FFB028041166D
1CCBB159864306D9AB7ED8F78EFF2D601041A574323FE6641F3F2CC93A863829
338827F3861274F4DC1AE11DD1E9ACC3D1812E4E3279D32ACC9BB23B6885F30D
E2512FA07B3CCCB939AD416E28E047871A63960FFFDDCB04429FB7772F7BD8C9
1205FF29A2F875BB36FEFAD8521BFD0A3580BB8E744060805DA8D0C56491E6AD
F40B97647DB2EC5B5A79EE3C9EE3A5D0AC6373F9D219647D15B8ED1C17E293B2
F2B2FFC89D6E9E8267F5676D66D00D38D83D859C06ACEF64B2065F8AFEAF5299
534E244DE44F18FF43E0B8FDAE1581D67FE97C4D9349C686DBB2DD26788DF9E1
E4E4B5FFFD3CD8871F227BBF1CDB30FA735DD4B4E1AF689A22DC806D9B8F98A3
73CC8AFD02E22FA8FBA3F1B78FE6A78A5EB38EF6BA9E6A2F7C2AD8EF334E407E
1F6C99EBCB38B495127AF92F28B29D2510C7391787A53DEF4DA314F6A3F41728
401BABE1E5ACA869D0BC3099ABCB554504DB49E3F401EFA71600D3A397BE2BFA
508FD0BA0651B21F73243111D02F4C2287388E420F47C2504459B337869CF99D
01F437BE1D46093C727B88875EFF3F5D09A96F9D3583D3EA9BC1E04FB8004DDA
1C21A8EFB0B4DDF6A31F01640F2066D0E3DC993DC42E8C75EAF532D90B411986
A9B8EEB3F9B7A2AE2D0CC97C731055F0B90046C9C4A8CC682CA6A8D35E94282B
3929BCBA0D2CDC784F5486C4BF4AB6BF1D70B2D44F9BDFAF6F6EC0A3A16CBA63
4D6317061EBD4C83EEFFB52154E828F95CF1D5CF047F27E958AFE498BB0C8D92
7DF8FEF4D6F5C759E6CBA162955AAFC231432555B5CC5E18C237E43BCB79C5C8
FC3E26F5F8E241A37F77D5075DEFE4E0695359E4BFB853C704CDFA38D00DD0DC
54ACC539B529B01E55940C65DB647AEB54520E71D8FB80654CCA0877B280AC94
B9A3B4A7B5C4B9371E3235973D29C2241E1078087A0A5C2851F7708E6619770A
190BDEF6AA614F00F3428FCE6C7D2E3451EF0E7EC17BC1B8B34BDCC20DFC902A
EDC874B4CB55DBEF0B58644849DC7A72C8CDFB2C261560DFB7736CE3CCF39D1B
EEE91DF8E2DC65C0E094EF161D53506F33B0E0C86BEE448D9F70F744F2837023
A42F54156D5809A68E788ED0B950B6B2D6CFC86493E1CDFD2793D8B375FA941D
75DC9F74CDCF7596C4CD0BDB58C8C8E67C27D43A4AAB9BEC6B48A9C3703B0693
13F9FED0D24B010813EF551EF15C21296DC7AE696D929D2BCD8C79736178AD84
FA7112BA64A56458CFBA2DEC2A0C98B807CE4B7064ACD328AA21CE547EA714CD
58E3CB8875F64925BC7CEC1E54A639DBE68E96481B19B12FE97D91C11AE3C262
A203320CF8D0F203016682C214FCC2FD5B04E7938DD6F82B351497B403F3A45A
DE77FA6AD6ABBEB989D7C265800E3293211411DC743995448D51EBFAAFE15A68
8FA0086CE1D2567F25315399BF60DAD04A72F4FB24AEFD2205D42D0090715A76
DBF57784BCD075E044B1F313FCBA2FEDCE2467F98B23BA5E8D515F23D1969208
3B58D8FA956F4B75F6ADEE9AE079CFDDB8D39C51780903DF9B81974FC1C9DAFC
A752E9A824CF3E1150A0FF43D389E46EA0EFE5C0F8882E01A506926FCD5E2626
6A10343105E947584617685896E9BEE2BE7615C82FC3000FED17EA056D12D181
535F8B60399C74CD8574049F71949A181FB271217F2DD2F393E6FBA194BE43CC
CBA48CDC3DD9CF7BF402A862FC245742B43F492728C1A77C92F2C2F55DE686B9
6B4D4868447DD80080627C119AA2C480AD837EEC66EAA94F1A515BD7A9B89230
61CD16B6ACC3929B1BDE92F252D5EC9E7A5E810DA329B376C2926734DF4BD142
E097AE4CE80AD186099C14A9C8B7C263924F9BCA947ED76F1BB80F3CA85E6676
028E7AFD37163201B8A80BBFB348EFEC13DC6CD829EC27C0DE75B885313375D8
D768F9DA94855A815E655454B83831FC072ED9058EECAA13C3A14D6C474F661B
65E3AE472312E1B8C583D93832BF7D5883744A43388C707F14CD7386F5D30959
A52D06ABEADF3AC5F324ED77DA176C3AEE2E25FB0CE9373E1CD4481A752A05FA
4427E0661BDA432B5313520C8B514C54018DD993E8B2360CC6D3189EA4C603FA
C34E321ADE20732C5CE35004D849922AC4D5086BE0DBE6359B4E7A5C2815AB10
5F92E6A61497735124E781755F56BE7AFAF3D7E65A37EDEBD803B19CEEB8C28F
D2D79A1A981D996CEC461C538951B29CC11F116A800F40E148E42DF814747AA6
E9FE4749E8D685A0E320BF656D77262449C72A353099F6BDE000E61289D5FB3D
040BEC68014980E096BF049DABD27175E8EF5252AAD0CC202EEF6D89248EA3D4
435ED435F82B2CECE76D51BCC8000BA6DC8B32909D92A220F73C1854B688D8DA
AB9DBAF763717D2BE7FB4CA50AF113547C5A2B83657E09751B7D11F063DD32AD
D02AC2E3ED0FC65B9C8E2C9067131A3F15FC29A0FAA4BE0E24A02CCF98CCFB70
B41A98A0244072AA9922E2846F645B238F1F29BEEF38B0E12A8920947F15E6CA
F346980A3F3D6E51AC388B799B8954631B923BA6D14BF93FE5774DE5858BA8C2
CD1C254CD0E60859802268AE867D1EA183783917F6FBD7C7899A97F2DF85F36F
E33F5F427CE88E0E07FFA1D345FB6A7D8C51F83B213BD38570FF0B7DB4791EC8
D7848F7439BCB3C0B77995BDF98E5ACA3B85562D56B6E5FC5C09ACEBB88094FE
124A6BACCDF44FAB8B5BCD62AE39291931D5C333B55BB444EB667C6CDBCE5AD9
DA7E6F36108A7FA65F6A600DE6F41A8CE29B187ABC6391709B2276CF8876D332
0CBB96D38482666077258FCF81D7B52E4836675D3B1A36AC0A08258D54DEA1D6
F3C52F8604343CF742EC9C8440093E7A12CAF62738418DE7D7290D3F9E70E8C8
A708C96E2F593C5B79A5F54D13584B557341B237FE6AC7BD0DC5EE7B6E334A0D
69BD1428E754D3B74C71A5442A1629CF0C2D17B62F6647AB5663F4D61C3111BB
3954DF7E777CCEFD32AFDBAC0D17EFB11EFEF4AF3BDB56FBB4239A70CBF86125
3BC37F4C96687174403DA6EE214443824EF02B84E3C725CD41FE9702484465AA
31C71F9F5B58E3B336084E61B91F6D33829EDC313F748B28A48C29097EC55CAA
DEDF817927D3A3F2FDFD627C987FE71D62F6EAAFE2035C06B2F7670CA315EAF1
DFEFEC6602A578F8C28335167D02D878E5474DC9FCEDD59C5215699D97F06A3E
08ECDF9F053B46F9FC02A4FA173EF9EDB98B1A8C6CD336D67A4B6375F3FD3F85
EA81D3F72343C101910BB2A0DD43BAF0DCD0EB1B96ED8E756BC48B0770B86729
6684583AFA16D682D7D651ADFB9CBACBA31725214E1678FA094A80FC1D3FC846
2FE377B1DA4DFAB0C7585D960BF84B3A9030F42F1DE67C0DD209CE68888758D7
72A6948C8E72D50A50685989506C05911EC6FC55B57AF38D36E66D83E98013F1
08B2E2258BCBB4BF09814FB0421935C2FD3D841ED272A81D330CB8B1FE622907
B008CBF206AA3BBE6309B7668052ECE1A1034885E832F39ABCC93AE12433A620
97EDCA4F1A4118151984ED6838546954207EA97E2E1089E9D1B438B97EA85DD0
76D85143529B05CCEE6AC9B589A5B4C767A6FC80F74058C7236B96174704E3FF
2BC8AF34B1640710EBC25B7D93A13B854E0D5926CEBFAB6C51E249237A054F47
6B301F6809FD42E6452CBA353C438780F31761156A5E4D506296345640ABC8BA
C88324344D1A3D25F1572872DF3D6636DCE50D638A7E4E082CA096C685970BB4
47559997DAA68D5251C2AC3143C24F1355222F67BE43F3E62532AB1BF7720BCD
B532126CD7D01432A88B96A93A0606F9AA74B1AD7D5B023995FCC120CD4F6258
DD5C75C30E694FFA828F126CE44B9F9DF45C00310137EA302B51AE00541BDB22
EC6FA4B7C21F2F0D546F7566E6A7332E40C322AEF54251623FA62EC10AF77308
48D59F234EDFEB2C9752B28E805CFD7242D6DD02718AD55841F4FE537E1BE0E4
F82E8544723981A7AAB0369564B693097173DF59E053DD2F09A971C26CBCB80D
094F5B43779307D3C588ECEEC7A81504A6CFF3E14853FBE2E6E1CDEF119B270E
57C4BF5E98ECE9C5BF8C98E61793C3DFEBE9A8E4325C9FC696BCFB749A9610B4
1FBB0B17B33D98284D432EDF90D8E5AA6DD07815EF7BE05DAEF58C120E68205A
0522C2E0D318C9CCCAC24A55A9684962E301D770B7A74B2BAA934AAEDA71FE6A
182ED4C86EA3816C7C271C3D73035BDA19BC7F369D640B23B04F3005A93CFECB
712132E5004A0A1C8A3F0E7C29F1EB488F49F738B9954882566338C535EC287D
F7DD1EE972393DCD690B24F901E77C7EFBAAC487F7C86A2A3831F0DDA96FA33A
97D68736C2828189A239E5FB4C1C5DEF1562456CD3505CA690370320513BA932
FA8AA3F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX2488
%!FontType1-1.0: SFBX2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx2488, tcbx2488, labx2488, lbbx2488, lcbx2488, rxbx2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-205 -316 1564 922}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C19889DE21E60D1FDB2BFE19ABFEF06059
8A659CCB607015182EC681AF73ADDE4533A86C8A88DDFD99E33AB4637931057E
AC7D9DF42B614C752A4175AB95C7E0AB2A036E2E0B49EA8205ECFC2290E6E927
E0CDC62A1742FC8E59EA1532BF2721235ECE5FBE40A9DE5411F785DD21009E4F
1E0974563ADC9CF62D37819E39ED65120FB9C870C1823C3F96198B4A88435968
73AD99EF27B2E0BD2FEAC130296DEC42786C23651F4199AF1251DF159B7DCBE2
4E2A7B6A7765F10DB0707FC84D49B021D432A4B6DDF145E8C9604BCD081997D8
5FE2A113308C11753DDB0301F572C3790B7FDBE0DA142487D27CBBB1228B7FF4
5990EFE9A1AD38B9FCBAACC2C3FE78B05D3C597476DD1BD6BE76B78BD875A91D
E61C79D2049588978FFEE57606CE37B4CC639447FBDA179E5D657AE76C1350A9
3E4EFC7D003366F550F2399536AD7722B1C17AC3C973B097153F3F1FF6DF7CF9
8AF85C0631FEBB48E1C783A623F53F382BD88C41ED9A1F44FA77F70816BD99FD
28A71AF42CFB86401E2D85B555E493A4D4923D3E6DBA45893785426343E1E646
925DCCD302343D6ADEE9FDB3D9C91835C7F94F8904D69AA567B8E7538C486958
DE83E2EA48EB8BE7F57664E0011ABC707B5A54E833D8DB9266AD753ACF844536
CF63146D84D930F5D8F7A409CF367D695F25DFC24FA1317F969D2ED8069FB4A7
E0D8BB63E7C9EB62301AAE7055D9B44943C49DEE271180327625682E2630BFBC
096AE5958EF7FEA5F543A3891B7E72E7E3BBC8734A30D8636B2F07B03F3C0D9D
6EA10F13A9334659FB1E3FDE739ABE03745E2B98A65D46855CEE364ED35377F2
AEDEC124A1665DF088074933F8A7C7A384AF50B6F9E3D49D4B6E89299133BEB6
2F8D1691C523B6B445208E2B36CD36DF87832C5EF08BE5129A3B4956E3B529CA
416E161D4DD32EC802115E5ABE95A2ED60781C858F6E6E37B1F583C5F29F6164
9A21FEAB076CCD1432397AF96DA816F5179CFBE7140E02C5A8CC222291681AFB
56C08D0058ECC4E243C946D05F169F3F923E9B7CDEC9976448C4D1AE335E5073
B23BEA0EBCF391BE9C9450222676364AFB9DC9162339892CF2971FB375F394D0
A1EF6BE099AC20DC2E574F3C3E9353AAA14C871A230401234B3271C7494B4403
A917AC4C818EA103F17546A96F647073AF9B3960F98A4F749DB0845D7A1BFB1B
8349019A3AAD25E7467ACF31FCEFAEC3C7E98C614BF0BCF98668E60F16AAD2FD
CA92BC85A23037BD3216A9022BDCF275C7A5AA9DE3B1D2770A526C791680D470
3B3EF8A52BFD2B0D73A848CF812FE1C1E92EC5948EF041AC4F760C2E070A5E8A
38601D62D4246CA01559ADE0C0BE6265A7AE784CC08B86A3021A5E517F3A5822
F5E3B876E2B431CA7085B8C474398013F18D7EC508826A589491283CDD84DA84
200884D5F63C4253C699615707DA4C0C8FFE2931C09190CF96395C01AFB56EEE
B1C77982ABB8EE6140B32005D6FDD8032C07A41D1A7215A0BD4E1C327A4DA1BC
A9DF66CFAA3E3C9EF2EA20A1F5775D2F487873EF02A3817121EF51B06E518DA6
5E02328C23570BD17A6F73C02A2F6319B8CCADF5F7D940CE90249C21583EC737
215883E3A284AB0522473644EC48187A5E602EDFB5C56D031B0E5582DAE1FDC1
5A43243CD258A3016BF198EFFEBA06DAD2AF7ACAD20D87BCC1681E0EB3CBDF30
787ADABE840BD298702148110935B920278B46E6830AFB9C241028E4B03580C3
6A691DC2BA91ABBDD22C28462C4993A2EC2654F0DF293296892B97F7ABE0C014
82F21340FA5A1647F7FE4050BCA3EFEBEEBCBB9E556B6F07D6254B6E558CCA78
10B822AF7359BA3562E48A18302104F261D59B40CE1E87A94355B3DBA25B73A8
B3D716AB89F3A05B1B2A3625A73710FEE11B6B3B23CD2AD462743A568581BA98
06EABB808210BA22E31330AF135263448E11EEAA9C42FCF442B59A3F5EE82EFC
EBE653CAEAA3E54E66EB06C025BDCAD46B9F4A8425FE56025D186D458FD46CB0
DD2A1936A55ADFF8F3172EC5D54CB21A5BE50BB39E499346B2E7BE0581F0CA16
0B8537E1E7436FBE5D6560DE129DAB52394D2B2CA27C4CDEAC8BE39013081DAE
4FFEBC10DCA2BDBDBB7E7785E47D263F0766772A359FB2DF0ADD8059A18038B3
A93B3DC944C76ACD1DBF9F72A09A9F65D4AEF78EFA4194F8B382D838FF159460
A2C7DDF0A2E208DE89565A33E04FB4EB99E3FFA8668A139C73500CE409B509D7
885D4BDA1BFE1969E63E00501096018E95E6497BA3A8DDF6BE4931819BF48B07
8E6DEC115A4BC6257DD2F83731A0B20D18F3C5AC2AE6DB4A6212F38D164582C2
0DFC0E1AF48FCC5A39915C46D4313FC113C1E46ADE60BFCFDDB18CAC29B4284A
A4009E88F3B4EB5FCAF43F1D91255828E09E44CBAA3CB16E7F9EB3B66451D94F
DCFC3D8AAB4A2B8CE678B0975721D1848FA2B059C1C940C065083EDE384D43B7
967C05D0453B90FEA4A7EDB4D67BCC0CA88FDAAE688ACFE4B44DFF73821467FF
1946F2D919812BE51E7951C1710EF6ADAF097A54E044F42EC01F872F4AF270ED
5D8DBA63666244ADAC251BF383AEDF5B51FAFF0174012508F2670400F25CA6F6
3A2A1E12E33D33B56BB2ED3ACBAF58A521634A31E620C8987AFCA2D0E5D7B310
F54F82A1A3D214AE2750886E1F1A99784E96C1DE490362FAF9FF260EF8EB3A14
25ADDE3EA443D87E1433366B953DA1D758DD173F82B89450EF711CA111B2562B
2F104FD8DDC4709FF156BB3B7D3F630F89B85AE1044880D04A881DF72E3EFF1B
86BD4C981B3109A19FCFE13E36CD2D9FBB84407FBEA91A5C1847CC6D4EDCD282
0D4F3891F262C0C5D6F5BC07D77C679AB4EF848DCF1A994E99BD2EF698FC41B9
18443EF7BCFA351166ABBE26B95ABA4E4EF60D85D6EB6A1411DB44C40BA382BF
B1F6B493ACB4AC69B3D1D6F781272500E632C8A1CF160C2BB20128B6EAD4D7F5
EB46265AA5ED4ADBBBA23BC2CDC51B3F5CADB85421B005B6F6841532A20AD475
C2ADC80140514119D363B0A8AF6962196E6131158F15D3F714C1764C36342110
31A83B03E27769ED2EB5696A397A2B985B57642691BC0168D35C37A1339AAD0F
444F479BEA165484DCC9405131AA6593D96E0FCE021616D0DB89C51001090A4A
7DD81C5B70AE58A63D575AA6135D164A571F6073A338B17B31C12ECE071CB251
03C640F048A109FD27E16288BF3A8F45BFB5024F2D96546D483D807126DEB7E0
C94CAF9E06D0C735EA3C1D5B0DACC1788B9E62CC5454EF12F2D8BA1FFA7D5836
72522AFD19F8C759961ED84983411522A98CA805CF2EBE2D98711E488D766749
A40E7E8247757063E130D6D4967D866AEC51D404780C7040770E0BC12101ADD2
0399EB6F2622FD2F44F7281B4715794B7A1BEA96746DF927B1B78AE0AF474B55
4530D8E321AA77AD96270F0C2049F7C5F891F30DD3D978A78A4ADC04F7B7D144
110C70F6FABADF813CBD945DDA5545001321A38CD713C8E2501A63ABFB7F6C8E
5929E5DA54E9306418CD7E169510940A9DED0A4AD1A7DBBD54795E911DDF0C56
D2BC9B1A789822AF2C02181867086C784740030776111D90C98206E38D49AF3C
0128B0329C71A800C03E0409D8C56211C6D2880423B1A2CAD3C42B7F1F6CEC10
3F4D58409B6EB4748BF2934AA97CEBFCFAEC0A7568FCDBCDD01AA97D7DC30574
14513DDDDE40C2A9D48B8B70CC8CFEC1EE1A89340BE770E44A899700BE609FDE
11866633B7F566D32F137F58A2C3C8FD5D1DB151C504570286AF49C568CB71FA
3AB877A528B1A29624B70E814EB71A48908324E78A58C383450F3CF968AB85F3
B712D270EA0209E3747D35FB85DE480708BDCB7CBDC9C0FC006E8C4C3F2D173A
8B8EA53D1CD9A51A7B94F5483928FFC97EBE222AE4AF9E2AA3A52709BA37237B
9EC013B7CF53983E67EC77FC4E639C8A348C13924390C909C288842B157CAD1E
44C4FC596F1EB0AECCFCE96209BEAA676650FF097A6679460F29EBA8E3EEB5AB
A963AC971B7A995188FED3B46A0429248D1C8A69D840F85F6E58C703FBE93C2F
852E8B121A1E1CEDC0550E1FCBC44D4206170B5FE4F667255B877A3405A668FF
968B539014942319CEB5ECA61A9CE619E1E0761E13A5BA19D2774FA22CE45CC8
125486910161478FAB68C59B50B66117E424EDCAB5798C2E260434D90F8A282C
D728D89BC16BE9140AB590C156D776BF1F211004ACE6267F35500897F21B61D9
FCBB6E4073CA165A1180587836396ECD9D49C3C08BA4D69BC9C06CFBE152CF0C
078EB5CDD0D9704BFCC9F1611A0D4AA2A26547A26343A1BB05062BA3BBA2174F
6F41242DF81C995A0F2C6A2486E84A6D87A7317EAE7A9F55093F0FEE24ADF9B2
1AA9AC2E6743B8D0464C4383BAA135A725568E617C36F3DBCBF776018703D691
491B08704C697A121A38581557F61F3299B3628E247CFBD2CBA13AEA374F8F32
FF99A373DF534173BA0BE0FAA239302D33A5A672B4B3BE25B94D5B4607BF0CA7
E042CBF2D8DA4E014B8A511C4D14E1A3C12E158D43B0CD95E2E3A2590E2ED82B
AF81C98CC659859E069F70F570409361CFB07A6E8DA7A1A94773BC1AA35CEF94
BCCEDD6F29B53E2840A2317E38B52ED6C90ADE3440C82D48D6A33EDCF9D04669
581D55725B5F206DB3276A13CBC0EB3EA955E179CF8F45AFF8B43FF0AC533EB8
FF397620188FE7F54CC51ED4CB9221317C8F70502EAADF7A9A1D219564801CC5
1BE0EA93877036DDC3A1540090F5BB2B6DDD4DCAE4B20AB9C0FB3CE54A2AF8C8
47C84253F5CD52915E685ED11480F436D632A308872D3E7C2F9F2FE388743405
91A91AF1E97E5A4D210C70E57DA1B6D714E3230F4B05040A5941398D7801B20A
B9F43972FBD40A3D1B17CA995A1A5D31C88AC04A170C35D1CB998D411040AC62
70B239354032B42CF908309E1CD67453FC59A5C02992B2F3964B99E209080F79
4F3ED20D24B5AE8557E83B04E9F92DD7342373D4E53A78307DBBAF5E1E418FDD
BC58DD3D51A3493E9D165F3ECC1551D1197C57AD21E5D97EB1B4C0B5DDF3DD26
607334B9F7BC588FD51AEDC2771321F8DC3DD1F1F3C78FF7AC4DA62989DB373F
4DBBE8F9043445D4E0ECC934250B86A2B91B8110E0EA6718CCC099B72B68B37C
97E610E7D168867847B65D0F5B1A7206C8A1C712F2B02B3A5702776B4EFD3BBC
B53D9163DE849C1ED9D7DCE21BD581BA61EDDF6C37B2D1D288D0B90222B25220
620EEBA206AF5CA0243EB61C6ED6B6F0F5ED7D437AE3F14C4F0DD1698D9759C2
50B3A3074DDAC2A26AFDF89367290A9191A623F1AB688FF87FBAA62DC16EDCA0
696663CCE9936DAE0D21C4B779166ECBBED6EE09D1D65F2C2BE666AA66725BCB
DF379F434A940E8D41A4B19E695AB781AC8A49B118B31B1944AE889B84F15EF9
64133BA2AF5597592B3816CD777C55A4478B65DD27E903DBF842D827B33C669E
763381237A31C95D68460E9D23B3ECFFF53A6AA0BDF1816FC35BA4A820A017FA
6B9197165F5539494B42176BBAC6D0078BFFD5CF7A2221043457CC2F646C411E
79CC4B292021086824CD71666C718B0685DAA438B37A6D995CE72073D73878AB
F61030B5A9733F6A7DA8B1FAA9D333203F8F7E67C704A4E4C502B8F93CFA53DB
00177484BC321B833108B369D968B34FA59E86D61C5143801078B619CCA6FB85
46796B6E1ABE8BE912F59A1C9B9E466F0258ADBA095A1C3BAF25E1DF56740299
56BC7E8811F2EE19E84AD9437D1035931306813253D0AE866D12256F204A73A3
6CA5DBC05A790CF4BDB53CBD3D2B903F8B7D32CCCB8E6CA24FA190CD5F09A873
92800E36695C094E10B3F0D345E5C2D0E8FAB3A0156E63AE071B3E67F00029F5
4AC579D49DFAA54ABE7B607A84DE64405908A3F11A0A2415F87CAE126B8877CB
D1EF75B492DF44E4D18686001320C0B73A3C9B5FBDA402071201F9544216D392
A4051318283BE14C5DEDD25907CB5FABAFF5B0E318392618604AA99CB59E42BE
A3B7CA2508355C56BC45CDFC3B47C188BB9107507EDDEDED083C04F72BC37090
660C5B49E8882EB7FADE34CBA0C54E1F59886AC35C27648206F893FD55A9CEB5
48E54EA57F452E3896BCA6B0C6B871F028E601051F0857C29192867A13244125
55B32DC09D7CF35CD896C1AD91DB63ABBEE84A91DA057C832E564392765BE862
5C1BB8278EBD8FB78C7D9E59A0C711957835369276C0308838BE235E25DA3D22
6FE6D5AF5FE7C52CD3410CD75F1762444C55AAEF40F1C541BCA63E7919499D35
A59EB974BB252CDA74D15AE70E0C9565FAEEC1CEE5043C62E30B3F0EC2683ECD
F423D6EDA89A84C6BA5A651B01EACCF0442490FAE838CEAF5D712DE7D1D7223B
45B1ADA04C0BB921DDD6BA102A088F0236335387EE3D53B3B1AAC4BC94CB06AF
224E917EE8D2F229A8E2905508A4C6F25C471A12F0DE5D5BA63815F71A722F68
A865912131A1AB25065C215CC69AED58357A02192233CA714B885A88D8D9F861
4FED45D385B9282F6DF8A920815B2E65E4BA85173909A8F2341E33AFBC2BA3E7
E4883512F47B4F3D849B1ED78407FC8FF7D272905289E65AF5916D043216608B
CE43846FA1497155E745CD68B6019BBAF21B62E873A24B09CDE12FF36194ADAE
A62942E24E18E6959C04253E911EB3E6200DFB4E1C00DDDD108CBE74AFC5F408
A8D93923D345AE3491998E34AE5E41424E11122F6192B5AFF66D014A44E6484E
8AC3D3BC61786560C7C0F2CABCAFEE5B3A18DB158026B7FC8E85AB8C5339AC80
D5C56364ED7372B6B3ADFC199E3D5E8FA339FB3D57C44F2F76A2A25A89838BCD
D1D4DF6B015BA09D58C3C224E59237F2840F8A90647E140C3EFBA0D28DA13781
E20AD35E7B9CC09E0CCBBE81E95D4C8811890CD6E7198EC4A7F498A54CD786F6
774A0144CE606DB8E47FB4E063BC269800723B0EEE0685C2F577DDC0380CCB77
D5C7830040F91502CE940FE52755DF6B303A9837C86386272B39DF4235844E5F
4E839192EB8457C1EFD294237079746535B27D21B46E7304FE1D93196E0CA751
050350107AA662AB196557CB07B79F14991397937E4528A3FA60BE3E50012196
9A543B89B5C2E2FAA08EE97B047FE532C72673F71906BABF15DCBFA7BA79905C
3ACAF9B34EC8F4F6AA5A9D11204BD3048ABC23D224E53B704E2E14B36B046649
8543AE1059916C8A8C678FAD774581827E7E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (TP_langage_machine.dvi)
@start /Fa 22[43 113[66 1[50 35 37 33 1[50 49 50 77 23
47 1[23 50 49 30 43 50 43 50 47 10[64 66 67 54 63 72
62 72 68 85 53 3[68 2[58 70 62 65 64 2[76 1[76 1[27 10[49
27 1[27 44[{ T1Encoding ReEncodeFont }44 99.6264 /SFSS1200
rf /Fb 21[43 43 43 7[49 22[66 80[51 70 51 54 38 38 38
51 54 49 54 81 27 51 30 27 54 49 30 43 54 43 54 49 8[73
1[73 73 70 54 72 76 66 76 73 89 61 2[35 1[77 1[66 74
70 69 73 1[46 76 1[76 1[27 2[49 49 49 49 49 49 49 49
49 27 33 27 2[38 38 27 3[81 6[54 57 4[98 22[{ T1Encoding ReEncodeFont }
71 99.6264 /SFRM1200 rf /Fc 153[34 51 62 50 62 54 44[56
56 56 56 7[44 41[{ T1Encoding ReEncodeFont }11 99.6264
/SFBX1200 rf /Fd 138[86 1[61 62 3[86 129 43 4[77 1[70
2[86 77 20[93 10[117 14[77 77 49[{ T1Encoding ReEncodeFont }14
143.462 /SFBX1728 rf /Fe 145[105 157 3[52 105 94 1[84
1[84 1[94 20[118 76[{ T1Encoding ReEncodeFont }9 206.559
/SFRM2488 rf /Ff 171[150 3[148 21[60 58[{ T1Encoding ReEncodeFont }3
206.559 /SFBX2488 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372 -561
a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -372
-561 a 0 TeXcolorgray Black 0 TeXcolorgray -364 -246
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364
-246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (Langages) /OUT pdfmark
end
 -364 -246
a -364 -246 a
SDict begin [/Count -0/Dest (section.2) cvn/Title (Assembleur) /OUT
pdfmark end
 -364 -246 a -364 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -364 -246 a -364
-246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -364 -246 a -364 -246 a
SDict begin H.S end
 -364 -246 a -364 -246
a
SDict begin 14.5 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -364 -246 a -299 -103 a Ff(TP)72
b(:)181 b Fe(Langage)64 b(mac)-5 b(hine)p -364 17 4489
5 v -364 288 a
SDict begin H.S end
 -364 288 a -364 288 a
SDict begin 14.5 H.A end
 -364 288 a -364
288 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 -364 288 a 182 x Fd(1)155 b(Langages)-364 580 y
SDict begin H.S end

-364 580 a -364 580 a
SDict begin 14.5 H.A end
 -364 580 a -364 580 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -364 580
a 0 TeXcolorgray -268 689 a Fc(1\))p 0 TeXcolorgray 48
w Fb(Qu'est-ce)34 b(que)f(le)g(langage)f(mac)m(hine)16
b(?)-364 1676 y
SDict begin H.S end
 -364 1676 a -364 1676 a
SDict begin 14.5 H.A end
 -364 1676 a -364
1676 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -364 1676 a 0 TeXcolorgray -268 1789 a Fc(2\))p
0 TeXcolorgray 48 w Fb(Qu'est-ce)34 b(que)f(le)g(langage)f(assem)m
(bleur)16 b(?)-364 2776 y
SDict begin H.S end
 -364 2776 a -364 2776 a
SDict begin 14.5 H.A end
 -364
2776 a -364 2776 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -364 2776 a 0 TeXcolorgray -268 2889
a Fc(3\))p 0 TeXcolorgray 48 w Fb(Commen)m(t)34 b(un)f(programme)g
(\351crit)g(en)g(langage)f(de)h(haut)g(niv)m(eau)g(est-il)g
(transformer)g(en)g(langage)f(mac)m(hine)16 b(?)-364
4008 y
SDict begin H.S end
 -364 4008 a -364 4008 a
SDict begin 14.5 H.A end
 -364 4008 a -364 4008
a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 -364 4008 a 158 x Fd(2)155 b(Assem)l(bleur)-217 4385
y Fb(Il)46 b(existe)i(sur)f(le)g(w)m(eb)h(un)f(sim)m(ulateur)h(p)s(our)
e(r\351aliser)h(des)h(instructions)g(en)f(langage)f(assem)m(bleur/mac)m
(hine)k(\340)-364 4506 y(l'adresse)34 b(:)-364 4626 y
Fa(https)g(://www.p)s(eterhigginson.co.uk/A)m(QA/)-217
4796 y Fb(On)e(donne)h(ci-dessous)i(les)e(principales)h(instructions)g
(du)f(langage)f(assem)m(bleur)j(:)-217 4966 y(L'op)s(\351rande)40
b(<op)s(\351rande>)g(est)h(une)f(v)-5 b(aleur)40 b(d\351sign\351e)i
(par)e(#n)g(ou)g(Rm)g(p)s(our)g(utiliser)h(le)f(con)m(ten)m(u)h(du)g
(registre)-364 5087 y(Rm.)33 b(Les)g(registres)h(Rm)e(du)h(pro)s
(cesseur)i(v)m(on)m(t)e(de)g(R0)f(\340)g(R12.)p 0 TeXcolorgray
-266 5259 a(\026)p 0 TeXcolorgray 48 w Fa(LDR)27 b(Rd,)g(<mem)h(ref>)g
Fb(:)f(Charge)h(la)f(v)-5 b(aleur)28 b(sto)s(c)m(k)m(\351e)i(dans)e
(l'emplacemen)m(t)i(m\351moire)e(sp)s(\351ci\034\351)h(par)e(<mem)h
(ref>)-120 5379 y(dans)33 b(le)g(registre)g(d.)p 0 TeXcolorgray
-266 5534 a(\026)p 0 TeXcolorgray 48 w Fa(STR)28 b(Rd,)g(<mem)h(ref>)g
Fb(:)f(Sto)s(c)m(k)m(e)i(la)e(v)-5 b(aleur)29 b(du)f(registre)i(d)e
(dans)h(l'emplacemen)m(t)i(m\351moire)e(sp)s(\351ci\034\351)h(par)f
(<mem)-120 5654 y(ref>.)p 0 TeXcolorgray -266 5809 a(\026)p
0 TeXcolorgray 48 w Fa(ADD)35 b(Rd,)f(Rn,)g(<op)s(\351rande>)g
Fb(:)g(Ajoute)g(la)g(v)-5 b(aleur)34 b(sp)s(\351ci\034\351e)i(dans)f
(<op)s(\351rande>)f(\340)g(la)g(v)-5 b(aleur)34 b(dans)h(le)g(registre)
-120 5929 y(n)e(et)g(sto)s(c)m(k)m(e)h(le)f(r\351sultat)g(dans)g(le)g
(registre)g(d.)p 0 TeXcolorgray 1856 6310 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-561 a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 -372 -561 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-266 -146 a Fb(\026)p 0 TeXcolorgray 48 w Fa(SUB)30 b(Rd,)f(Rn,)h(<op)s
(\351rande>)f Fb(:)h(Soustrait)f(la)h(v)-5 b(aleur)30
b(sp)s(\351ci\034\351e)h(par)f(<op)s(\351rande>)f(de)h(la)g(v)-5
b(aleur)30 b(dans)g(le)g(registre)-120 -26 y(n)j(et)g(sto)s(c)m(k)m(e)h
(le)f(r\351sultat)g(dans)g(le)g(registre)g(d.)p 0 TeXcolorgray
-266 118 a(\026)p 0 TeXcolorgray 48 w Fa(MO)m(V)g(Rd,)f(<op)s
(\351rande>)h Fb(:)f(Copie)i(la)e(v)-5 b(aleur)33 b(sp)s
(\351ci\034\351e)h(par)f(<op)s(\351rande>)f(dans)h(le)g(registre)h(d.)p
0 TeXcolorgray -266 262 a(\026)p 0 TeXcolorgray 48 w
Fa(CMP)43 b(Rn,)g(<op)s(\351rande>)f Fb(:)h(Compare)h(la)f(v)-5
b(aleur)43 b(sto)s(c)m(k)m(\351e)i(dans)e(le)h(registre)f(n)g(a)m(v)m
(ec)i(la)d(v)-5 b(aleur)44 b(sp)s(\351ci\034\351e)h(par)-120
383 y(<op)s(\351rande>.)p 0 TeXcolorgray -266 527 a(\026)p
0 TeXcolorgray 48 w Fa(B)32 b(<lab)s(el>)g Fb(:)h(Branc)m(he)g
(toujours)g(sur)g(l'instruction)h(\340)e(la)g(p)s(osition)h(<lab)s(el>)
g(dans)g(le)g(programme.)p 0 TeXcolorgray -266 671 a(\026)p
0 TeXcolorgray 48 w Fa(B)k(<condition>)h(<lab)s(el>)e
Fb(:)i(Branc)m(he)g(conditionnellemen)m(t)i(\340)e(l'instruction)g
(\340)g(la)f(p)s(osition)h(<lab)s(el>)f(dans)h(le)-120
791 y(programme)32 b(si)h(la)e(derni\350re)i(comparaison)g(r\351p)s
(ond)f(aux)g(crit\350res)h(sp)s(\351ci\034\351s)h(par)e(la)g
(<condition>.)g(Les)h(v)-5 b(aleurs)-120 911 y(p)s(ossibles)41
b(p)s(our)d(<condition>)h(et)g(leur)g(signi\034cation)h(son)m(t)f(:)g
(EQ)g(p)s(our)f(\311gal)h(\340,)g(NE)g(p)s(our)f(Non)h(\351gal)g(\340,)
f(GT)-120 1032 y(p)s(our)32 b(Sup)s(\351rieur)i(\340)e(et)h(L)-8
b(T)33 b(p)s(our)f(Inf\351rieur)i(\340.)p 0 TeXcolorgray
-266 1176 a(\026)p 0 TeXcolorgray 48 w Fa(AND)e(Rd,)f(Rn,)g(<op)s
(\351rande>)g Fb(:)g(E\033ectue)h(une)g(op)s(\351ration)e(ET)i(logique)
g(au)f(niv)m(eau)h(du)f(bit)h(en)m(tre)g(la)e(v)-5 b(aleur)32
b(dans)-120 1296 y(le)h(registre)g(n)g(et)g(la)f(v)-5
b(aleur)33 b(sp)s(\351ci\034\351e)i(par)d(<op)s(\351rande>)h(et)f(sto)s
(c)m(k)m(e)i(le)f(r\351sultat)h(dans)f(le)g(registre)g(d.)p
0 TeXcolorgray -266 1440 a(\026)p 0 TeXcolorgray 48 w
Fa(ORR)d(Rd,)h(Rn,)f(<op)s(\351rande>)h Fb(:)f(E\033ectue)i(une)f(op)s
(\351ration)g(OU)f(logique)i(au)e(niv)m(eau)i(du)f(bit)g(en)m(tre)g(la)
g(v)-5 b(aleur)31 b(dans)-120 1560 y(le)i(registre)g(n)g(et)g(la)f(v)-5
b(aleur)33 b(sp)s(\351ci\034\351e)i(par)d(<op)s(\351rande>)h(et)f(sto)s
(c)m(k)m(e)i(le)f(r\351sultat)h(dans)f(le)g(registre)g(d.)p
0 TeXcolorgray -266 1704 a(\026)p 0 TeXcolorgray 48 w
Fa(EOR)e(Rd,)h(Rn,)f(<op)s(\351rande>)g Fb(:)h(E\033ectue)h(une)f(op)s
(\351ration)f(logique)h(binaire)g(ou)g(exclusif)h(\(X)m(OR\))e(en)m
(tre)i(la)e(v)-5 b(aleur)-120 1825 y(dans)33 b(le)g(registre)g(n)g(et)g
(la)f(v)-5 b(aleur)33 b(sp)s(\351ci\034\351e)i(par)d(<op)s(\351rande>)h
(et)f(sto)s(c)m(k)m(e)j(le)e(r\351sultat)g(dans)g(le)g(registre)g(d.)p
0 TeXcolorgray -266 1969 a(\026)p 0 TeXcolorgray 48 w
Fa(MVN)f(Rd,)e(<op)s(\351rande>)h Fb(:)g(E\033ectue)i(une)e(op)s
(\351ration)g(NON)g(logique)h(au)f(niv)m(eau)h(du)f(bit)h(sur)f(la)g(v)
-5 b(aleur)31 b(sp)s(\351ci\034\351e)-120 2089 y(par)h(<op)s
(\351rande>)h(et)g(sto)s(c)m(k)m(e)h(le)f(r\351sultat)g(dans)g(le)g
(registre)g(d.)p 0 TeXcolorgray -266 2233 a(\026)p 0
TeXcolorgray 48 w Fa(LSL)25 b(Rd,)g(Rn,)g(<op)s(\351rande>)g
Fb(:)g(D\351cale)h(logiquemen)m(t)h(\340)e(gauc)m(he)h(la)f(v)-5
b(aleur)25 b(sto)s(c)m(k)m(\351e)j(dans)d(le)h(registre)g(n)f(du)g(nom)
m(bre)-120 2353 y(de)33 b(bits)g(sp)s(\351ci\034\351)h(par)f(<op)s
(\351rande>)f(et)h(sto)s(c)m(k)m(e)h(le)f(r\351sultat)g(dans)h(le)f
(registre)g(d.)p 0 TeXcolorgray -266 2497 a(\026)p 0
TeXcolorgray 48 w Fa(LSR)27 b(Rd,)f(Rn,)h(<op)s(\351rande>)g
Fb(:)g(D\351cale)h(logiquemen)m(t)h(\340)e(droite)g(la)f(v)-5
b(aleur)28 b(sto)s(c)m(k)m(\351e)h(dans)e(le)g(registre)h(n)f(du)g(nom)
m(bre)-120 2618 y(de)33 b(bits)g(sp)s(\351ci\034\351)h(par)f(<op)s
(\351rande>)f(et)h(sto)s(c)m(k)m(e)h(le)f(r\351sultat)g(dans)h(le)f
(registre)g(d.)p 0 TeXcolorgray -266 2762 a(\026)p 0
TeXcolorgray 48 w Fa(HAL)-8 b(T)32 b Fb(:)h(Arr\352te)g(l'ex\351cution)
i(du)d(programme.)-364 2805 y
SDict begin H.S end
 -364 2805 a -364 2805 a
SDict begin 14.5 H.A end

-364 2805 a -364 2805 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -364 2805 a 0 TeXcolorgray -268
2917 a Fc(1\))p 0 TeXcolorgray 48 w Fb(Indiquer)i(ce)f(que)h(fon)m(t)e
(les)i(di\033\351ren)m(tes)g(instructions)g(\351crites)g(en)f(assem)m
(bleur.)-364 2988 y
SDict begin H.S end
 -364 2988 a -364 2988 a
SDict begin 14.5 H.A end
 -364 2988
a -364 2988 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -364 2988 a 0 TeXcolorgray -52 3095 a Fc(a\))p
0 TeXcolorgray 49 w Fb(ADD)g(R0,)f(R1,)h(#25)-364 3486
y
SDict begin H.S end
 -364 3486 a -364 3486 a
SDict begin 14.5 H.A end
 -364 3486 a -364 3486 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -364
3486 a 0 TeXcolorgray -60 3594 a Fc(b\))p 0 TeXcolorgray
49 w Fb(LDR)f(R2,64)-364 3985 y
SDict begin H.S end
 -364 3985 a -364 3985
a
SDict begin 14.5 H.A end
 -364 3985 a -364 3985 a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -364 3985 a 0 TeXcolorgray
-47 4092 a Fc(c\))p 0 TeXcolorgray 48 w Fb(MO)m(V)h(R3,)f(#45)-364
4483 y
SDict begin H.S end
 -364 4483 a -364 4483 a
SDict begin 14.5 H.A end
 -364 4483 a -364 4483
a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -364 4483 a 0 TeXcolorgray -60 4590 a Fc(d\))p 0 TeXcolorgray
49 w Fb(STR)h(R4,)f(72)-364 4981 y
SDict begin H.S end
 -364 4981 a -364 4981
a
SDict begin 14.5 H.A end
 -364 4981 a -364 4981 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -364 4981 a 0 TeXcolorgray
-49 5088 a Fc(e\))p 0 TeXcolorgray 49 w Fb(SUB)h(R5,R2,R3)-364
5479 y
SDict begin H.S end
 -364 5479 a -364 5479 a
SDict begin 14.5 H.A end
 -364 5479 a -364 5479
a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -364 5479 a 0 TeXcolorgray -42 5587 a Fc(f)10 b(\))p
0 TeXcolorgray 49 w Fb(CMP)33 b(R3,)g(#25)95 5707 y(BGT)f(15)p
0 TeXcolorgray 1856 6310 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372
-561 a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 -372 -561 a 0 TeXcolorgray 0 TeXcolorgray -364 -246
a
SDict begin H.S end
 -364 -246 a -364 -246 a
SDict begin 14.5 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Item.11) cvn /DEST pdfmark end
 -364
-246 a 0 TeXcolorgray -268 -146 a Fc(2\))p 0 TeXcolorgray
48 w Fb(\311crire)34 b(les)f(instructions)h(en)f(assem)m(bleur)i
(corresp)s(ondan)m(t)e(aux)g(phrases)h(suiv)-5 b(an)m(tes)34
b(:)p 0 TeXcolorgray -52 9 a(\026)p 0 TeXcolorgray 49
w(Place)f(la)f(v)-5 b(aleur)33 b(15)f(dans)h(le)g(registre)h(R0)p
0 TeXcolorgray -52 400 a(\026)p 0 TeXcolorgray 49 w(Place)f(la)f(v)-5
b(aleur)33 b(7)g(dans)g(le)g(registre)g(R1)p 0 TeXcolorgray
-52 790 a(\026)p 0 TeXcolorgray 49 w(A)m(dditionne)45
b(la)f(v)-5 b(aleur)44 b(sto)s(c)m(k)m(\351e)i(dans)e(le)h(registre)f
(R0)g(et)g(la)g(v)-5 b(aleur)44 b(sto)s(c)m(k)m(\351e)i(dans)e(le)h
(registre)f(R1,)g(le)95 911 y(r\351sultat)33 b(est)g(sto)s(c)m(k)m
(\351)h(dans)f(le)g(registre)h(R5)p 0 TeXcolorgray -52
1302 a(\026)p 0 TeXcolorgray 49 w(Place)f(le)g(con)m(ten)m(u)h(du)f
(registre)g(R5)f(\340)h(l'adresse)h(m\351moire)f(125.)p
0 TeXcolorgray -52 1693 a(\026)p 0 TeXcolorgray 49 w(Place)g(la)f(v)-5
b(aleur)33 b(10)f(dans)h(le)g(registre)h(R1)p 0 TeXcolorgray
-52 2084 a(\026)p 0 TeXcolorgray 49 w(Place)f(la)f(v)-5
b(aleur)33 b(sto)s(c)m(k)m(\351e)i(\340)d(l'adresse)i(m\351moire)g(125)
e(dans)h(le)g(registre)g(R0)p 0 TeXcolorgray -52 2474
a(\026)p 0 TeXcolorgray 49 w(Soustrait)27 b(la)g(v)-5
b(aleur)28 b(sto)s(c)m(k)m(\351e)h(dans)f(le)g(registre)g(R0)e(et)i(la)
f(v)-5 b(aleur)28 b(sto)s(c)m(k)m(\351e)h(dans)f(le)f(registre)h(R1,)f
(le)h(r\351sultat)95 2595 y(est)33 b(sto)s(c)m(k)m(\351)h(dans)f(le)g
(registre)g(R5)p 0 TeXcolorgray -52 2986 a(\026)p 0 TeXcolorgray
49 w(Place)g(le)g(con)m(ten)m(u)h(du)f(registre)g(R5)f(\340)h
(l'adresse)h(m\351moire)f(125.)-364 3259 y
SDict begin H.S end
 -364 3259
a -364 3259 a
SDict begin 14.5 H.A end
 -364 3259 a -364 3259 a
SDict begin [/View [/XYZ H.V]/Dest (Item.12) cvn /DEST pdfmark end
 -364 3259 a 0 TeXcolorgray
-268 3377 a Fc(3\))p 0 TeXcolorgray 48 w Fb(Quelles)h(son)m(t)f(les)h
(v)-5 b(aleurs)33 b(dans)g(les)g(di\033\351ren)m(ts)i(registres)e(\340)
g(l'issu)h(de)f(ce)g(programme)16 b(?)-364 3891 y
SDict begin H.S end
 -364
3891 a -364 3891 a
SDict begin 14.5 H.A end
 -364 3891 a -364 3891 a
SDict begin [/View [/XYZ H.V]/Dest (Item.13) cvn /DEST pdfmark end
 -364 3891
a 0 TeXcolorgray -268 4004 a Fc(4\))p 0 TeXcolorgray
48 w Fb(Saisir)33 b(v)m(otre)g(programme)g(dans)g(le)g(sim)m(ulateur)h
(et)f(v)m(\351ri\034er)h(v)m(os)g(r\351p)s(onses.)p 0
TeXcolorgray 1856 6310 a(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
